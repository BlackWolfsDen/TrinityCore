// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: presence_service.proto

#ifndef PROTOBUF_presence_5fservice_2eproto__INCLUDED
#define PROTOBUF_presence_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "entity_types.pb.h"
#include "presence_types.pb.h"
#include "rpc_types.pb.h"
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace presence {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_presence_5fservice_2eproto();
void protobuf_AssignDesc_presence_5fservice_2eproto();
void protobuf_ShutdownFile_presence_5fservice_2eproto();

class SubscribeRequest;
class SubscribeNotificationRequest;
class UnsubscribeRequest;
class UpdateRequest;
class QueryRequest;
class QueryResponse;
class OwnershipRequest;

// ===================================================================

class SubscribeRequest : public ::google::protobuf::Message {
 public:
  SubscribeRequest();
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeRequest& default_instance();

  void Swap(SubscribeRequest* other);

  // implements Message ----------------------------------------------

  SubscribeRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // required .Battlenet.EntityId entity_id = 2;
  inline bool has_entity_id() const;
  inline void clear_entity_id();
  static const int kEntityIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& entity_id() const;
  inline ::Battlenet::EntityId* mutable_entity_id();
  inline ::Battlenet::EntityId* release_entity_id();
  inline void set_allocated_entity_id(::Battlenet::EntityId* entity_id);

  // required uint64 object_id = 3;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 3;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);

  // repeated fixed32 program = 4;
  inline int program_size() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 4;
  inline ::google::protobuf::uint32 program(int index) const;
  inline void set_program(int index, ::google::protobuf::uint32 value);
  inline void add_program(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      program() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_program();

  // optional bool flag_public = 5 [default = true, deprecated = true];
  inline bool has_flag_public() const PROTOBUF_DEPRECATED;
  inline void clear_flag_public() PROTOBUF_DEPRECATED;
  static const int kFlagPublicFieldNumber = 5;
  inline bool flag_public() const PROTOBUF_DEPRECATED;
  inline void set_flag_public(bool value) PROTOBUF_DEPRECATED;

  // @@protoc_insertion_point(class_scope:Battlenet.presence.SubscribeRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_entity_id();
  inline void clear_has_entity_id();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_flag_public();
  inline void clear_has_flag_public();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* agent_id_;
  ::Battlenet::EntityId* entity_id_;
  ::google::protobuf::uint64 object_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > program_;
  bool flag_public_;
  friend void  protobuf_AddDesc_presence_5fservice_2eproto();
  friend void protobuf_AssignDesc_presence_5fservice_2eproto();
  friend void protobuf_ShutdownFile_presence_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SubscribeRequest* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeNotificationRequest : public ::google::protobuf::Message {
 public:
  SubscribeNotificationRequest();
  virtual ~SubscribeNotificationRequest();

  SubscribeNotificationRequest(const SubscribeNotificationRequest& from);

  inline SubscribeNotificationRequest& operator=(const SubscribeNotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeNotificationRequest& default_instance();

  void Swap(SubscribeNotificationRequest* other);

  // implements Message ----------------------------------------------

  SubscribeNotificationRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Battlenet.EntityId entity_id = 1;
  inline bool has_entity_id() const;
  inline void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& entity_id() const;
  inline ::Battlenet::EntityId* mutable_entity_id();
  inline ::Battlenet::EntityId* release_entity_id();
  inline void set_allocated_entity_id(::Battlenet::EntityId* entity_id);

  // @@protoc_insertion_point(class_scope:Battlenet.presence.SubscribeNotificationRequest)
 private:
  inline void set_has_entity_id();
  inline void clear_has_entity_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* entity_id_;
  friend void  protobuf_AddDesc_presence_5fservice_2eproto();
  friend void protobuf_AssignDesc_presence_5fservice_2eproto();
  friend void protobuf_ShutdownFile_presence_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SubscribeNotificationRequest* default_instance_;
};
// -------------------------------------------------------------------

class UnsubscribeRequest : public ::google::protobuf::Message {
 public:
  UnsubscribeRequest();
  virtual ~UnsubscribeRequest();

  UnsubscribeRequest(const UnsubscribeRequest& from);

  inline UnsubscribeRequest& operator=(const UnsubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnsubscribeRequest& default_instance();

  void Swap(UnsubscribeRequest* other);

  // implements Message ----------------------------------------------

  UnsubscribeRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // required .Battlenet.EntityId entity_id = 2;
  inline bool has_entity_id() const;
  inline void clear_entity_id();
  static const int kEntityIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& entity_id() const;
  inline ::Battlenet::EntityId* mutable_entity_id();
  inline ::Battlenet::EntityId* release_entity_id();
  inline void set_allocated_entity_id(::Battlenet::EntityId* entity_id);

  // optional uint64 object_id = 3;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 3;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Battlenet.presence.UnsubscribeRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_entity_id();
  inline void clear_has_entity_id();
  inline void set_has_object_id();
  inline void clear_has_object_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* agent_id_;
  ::Battlenet::EntityId* entity_id_;
  ::google::protobuf::uint64 object_id_;
  friend void  protobuf_AddDesc_presence_5fservice_2eproto();
  friend void protobuf_AssignDesc_presence_5fservice_2eproto();
  friend void protobuf_ShutdownFile_presence_5fservice_2eproto();

  void InitAsDefaultInstance();
  static UnsubscribeRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateRequest : public ::google::protobuf::Message {
 public:
  UpdateRequest();
  virtual ~UpdateRequest();

  UpdateRequest(const UpdateRequest& from);

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRequest& default_instance();

  void Swap(UpdateRequest* other);

  // implements Message ----------------------------------------------

  UpdateRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Battlenet.EntityId entity_id = 1;
  inline bool has_entity_id() const;
  inline void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& entity_id() const;
  inline ::Battlenet::EntityId* mutable_entity_id();
  inline ::Battlenet::EntityId* release_entity_id();
  inline void set_allocated_entity_id(::Battlenet::EntityId* entity_id);

  // repeated .Battlenet.presence.FieldOperation field_operation = 2;
  inline int field_operation_size() const;
  inline void clear_field_operation();
  static const int kFieldOperationFieldNumber = 2;
  inline const ::Battlenet::presence::FieldOperation& field_operation(int index) const;
  inline ::Battlenet::presence::FieldOperation* mutable_field_operation(int index);
  inline ::Battlenet::presence::FieldOperation* add_field_operation();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::FieldOperation >&
      field_operation() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::FieldOperation >*
      mutable_field_operation();

  // optional bool no_create = 3 [default = false];
  inline bool has_no_create() const;
  inline void clear_no_create();
  static const int kNoCreateFieldNumber = 3;
  inline bool no_create() const;
  inline void set_no_create(bool value);

  // optional .Battlenet.EntityId agent_id = 4;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 4;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // @@protoc_insertion_point(class_scope:Battlenet.presence.UpdateRequest)
 private:
  inline void set_has_entity_id();
  inline void clear_has_entity_id();
  inline void set_has_no_create();
  inline void clear_has_no_create();
  inline void set_has_agent_id();
  inline void clear_has_agent_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* entity_id_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::FieldOperation > field_operation_;
  ::Battlenet::EntityId* agent_id_;
  bool no_create_;
  friend void  protobuf_AddDesc_presence_5fservice_2eproto();
  friend void protobuf_AssignDesc_presence_5fservice_2eproto();
  friend void protobuf_ShutdownFile_presence_5fservice_2eproto();

  void InitAsDefaultInstance();
  static UpdateRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryRequest : public ::google::protobuf::Message {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRequest& default_instance();

  void Swap(QueryRequest* other);

  // implements Message ----------------------------------------------

  QueryRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Battlenet.EntityId entity_id = 1;
  inline bool has_entity_id() const;
  inline void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& entity_id() const;
  inline ::Battlenet::EntityId* mutable_entity_id();
  inline ::Battlenet::EntityId* release_entity_id();
  inline void set_allocated_entity_id(::Battlenet::EntityId* entity_id);

  // repeated .Battlenet.presence.FieldKey key = 2;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::Battlenet::presence::FieldKey& key(int index) const;
  inline ::Battlenet::presence::FieldKey* mutable_key(int index);
  inline ::Battlenet::presence::FieldKey* add_key();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::FieldKey >&
      key() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::FieldKey >*
      mutable_key();

  // optional .Battlenet.EntityId agent_id = 3;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 3;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // @@protoc_insertion_point(class_scope:Battlenet.presence.QueryRequest)
 private:
  inline void set_has_entity_id();
  inline void clear_has_entity_id();
  inline void set_has_agent_id();
  inline void clear_has_agent_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* entity_id_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::FieldKey > key_;
  ::Battlenet::EntityId* agent_id_;
  friend void  protobuf_AddDesc_presence_5fservice_2eproto();
  friend void protobuf_AssignDesc_presence_5fservice_2eproto();
  friend void protobuf_ShutdownFile_presence_5fservice_2eproto();

  void InitAsDefaultInstance();
  static QueryRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryResponse : public ::google::protobuf::Message {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponse& default_instance();

  void Swap(QueryResponse* other);

  // implements Message ----------------------------------------------

  QueryResponse* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.presence.Field field = 2;
  inline int field_size() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 2;
  inline const ::Battlenet::presence::Field& field(int index) const;
  inline ::Battlenet::presence::Field* mutable_field(int index);
  inline ::Battlenet::presence::Field* add_field();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::Field >&
      field() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::Field >*
      mutable_field();

  // @@protoc_insertion_point(class_scope:Battlenet.presence.QueryResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::Field > field_;
  friend void  protobuf_AddDesc_presence_5fservice_2eproto();
  friend void protobuf_AssignDesc_presence_5fservice_2eproto();
  friend void protobuf_ShutdownFile_presence_5fservice_2eproto();

  void InitAsDefaultInstance();
  static QueryResponse* default_instance_;
};
// -------------------------------------------------------------------

class OwnershipRequest : public ::google::protobuf::Message {
 public:
  OwnershipRequest();
  virtual ~OwnershipRequest();

  OwnershipRequest(const OwnershipRequest& from);

  inline OwnershipRequest& operator=(const OwnershipRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OwnershipRequest& default_instance();

  void Swap(OwnershipRequest* other);

  // implements Message ----------------------------------------------

  OwnershipRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Battlenet.EntityId entity_id = 1;
  inline bool has_entity_id() const;
  inline void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& entity_id() const;
  inline ::Battlenet::EntityId* mutable_entity_id();
  inline ::Battlenet::EntityId* release_entity_id();
  inline void set_allocated_entity_id(::Battlenet::EntityId* entity_id);

  // optional bool release_ownership = 2 [default = false];
  inline bool has_release_ownership() const;
  inline void clear_release_ownership();
  static const int kReleaseOwnershipFieldNumber = 2;
  inline bool release_ownership() const;
  inline void set_release_ownership(bool value);

  // @@protoc_insertion_point(class_scope:Battlenet.presence.OwnershipRequest)
 private:
  inline void set_has_entity_id();
  inline void clear_has_entity_id();
  inline void set_has_release_ownership();
  inline void clear_has_release_ownership();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* entity_id_;
  bool release_ownership_;
  friend void  protobuf_AddDesc_presence_5fservice_2eproto();
  friend void protobuf_AssignDesc_presence_5fservice_2eproto();
  friend void protobuf_ShutdownFile_presence_5fservice_2eproto();

  void InitAsDefaultInstance();
  static OwnershipRequest* default_instance_;
};
// ===================================================================

class PresenceService_Stub;

class PresenceService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PresenceService() {};
 public:
  virtual ~PresenceService();

  typedef PresenceService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Subscribe(::google::protobuf::RpcController* controller,
                       const ::Battlenet::presence::SubscribeRequest* request,
                       ::Battlenet::NoData* response,
                       ::google::protobuf::Closure* done);
  virtual void Unsubscribe(::google::protobuf::RpcController* controller,
                       const ::Battlenet::presence::UnsubscribeRequest* request,
                       ::Battlenet::NoData* response,
                       ::google::protobuf::Closure* done);
  virtual void Update(::google::protobuf::RpcController* controller,
                       const ::Battlenet::presence::UpdateRequest* request,
                       ::Battlenet::NoData* response,
                       ::google::protobuf::Closure* done);
  virtual void Query(::google::protobuf::RpcController* controller,
                       const ::Battlenet::presence::QueryRequest* request,
                       ::Battlenet::presence::QueryResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Ownership(::google::protobuf::RpcController* controller,
                       const ::Battlenet::presence::OwnershipRequest* request,
                       ::Battlenet::NoData* response,
                       ::google::protobuf::Closure* done);
  virtual void SubscribeNotification(::google::protobuf::RpcController* controller,
                       const ::Battlenet::presence::SubscribeNotificationRequest* request,
                       ::Battlenet::NoData* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PresenceService);
};

class PresenceService_Stub : public PresenceService {
 public:
  PresenceService_Stub(::google::protobuf::RpcChannel* channel);
  PresenceService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~PresenceService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements PresenceService ------------------------------------------

  void Subscribe(::google::protobuf::RpcController* controller,
                       const ::Battlenet::presence::SubscribeRequest* request,
                       ::Battlenet::NoData* response,
                       ::google::protobuf::Closure* done);
  void Unsubscribe(::google::protobuf::RpcController* controller,
                       const ::Battlenet::presence::UnsubscribeRequest* request,
                       ::Battlenet::NoData* response,
                       ::google::protobuf::Closure* done);
  void Update(::google::protobuf::RpcController* controller,
                       const ::Battlenet::presence::UpdateRequest* request,
                       ::Battlenet::NoData* response,
                       ::google::protobuf::Closure* done);
  void Query(::google::protobuf::RpcController* controller,
                       const ::Battlenet::presence::QueryRequest* request,
                       ::Battlenet::presence::QueryResponse* response,
                       ::google::protobuf::Closure* done);
  void Ownership(::google::protobuf::RpcController* controller,
                       const ::Battlenet::presence::OwnershipRequest* request,
                       ::Battlenet::NoData* response,
                       ::google::protobuf::Closure* done);
  void SubscribeNotification(::google::protobuf::RpcController* controller,
                       const ::Battlenet::presence::SubscribeNotificationRequest* request,
                       ::Battlenet::NoData* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PresenceService_Stub);
};


// ===================================================================


// ===================================================================

// SubscribeRequest

// optional .Battlenet.EntityId agent_id = 1;
inline bool SubscribeRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& SubscribeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.SubscribeRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* SubscribeRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.presence.SubscribeRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* SubscribeRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void SubscribeRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.presence.SubscribeRequest.agent_id)
}

// required .Battlenet.EntityId entity_id = 2;
inline bool SubscribeRequest::has_entity_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeRequest::set_has_entity_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscribeRequest::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscribeRequest::clear_entity_id() {
  if (entity_id_ != NULL) entity_id_->::Battlenet::EntityId::Clear();
  clear_has_entity_id();
}
inline const ::Battlenet::EntityId& SubscribeRequest::entity_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.SubscribeRequest.entity_id)
  return entity_id_ != NULL ? *entity_id_ : *default_instance_->entity_id_;
}
inline ::Battlenet::EntityId* SubscribeRequest::mutable_entity_id() {
  set_has_entity_id();
  if (entity_id_ == NULL) entity_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.presence.SubscribeRequest.entity_id)
  return entity_id_;
}
inline ::Battlenet::EntityId* SubscribeRequest::release_entity_id() {
  clear_has_entity_id();
  ::Battlenet::EntityId* temp = entity_id_;
  entity_id_ = NULL;
  return temp;
}
inline void SubscribeRequest::set_allocated_entity_id(::Battlenet::EntityId* entity_id) {
  delete entity_id_;
  entity_id_ = entity_id;
  if (entity_id) {
    set_has_entity_id();
  } else {
    clear_has_entity_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.presence.SubscribeRequest.entity_id)
}

// required uint64 object_id = 3;
inline bool SubscribeRequest::has_object_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubscribeRequest::set_has_object_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubscribeRequest::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubscribeRequest::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::uint64 SubscribeRequest::object_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.SubscribeRequest.object_id)
  return object_id_;
}
inline void SubscribeRequest::set_object_id(::google::protobuf::uint64 value) {
  set_has_object_id();
  object_id_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.presence.SubscribeRequest.object_id)
}

// repeated fixed32 program = 4;
inline int SubscribeRequest::program_size() const {
  return program_.size();
}
inline void SubscribeRequest::clear_program() {
  program_.Clear();
}
inline ::google::protobuf::uint32 SubscribeRequest::program(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.SubscribeRequest.program)
  return program_.Get(index);
}
inline void SubscribeRequest::set_program(int index, ::google::protobuf::uint32 value) {
  program_.Set(index, value);
  // @@protoc_insertion_point(field_set:Battlenet.presence.SubscribeRequest.program)
}
inline void SubscribeRequest::add_program(::google::protobuf::uint32 value) {
  program_.Add(value);
  // @@protoc_insertion_point(field_add:Battlenet.presence.SubscribeRequest.program)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SubscribeRequest::program() const {
  // @@protoc_insertion_point(field_list:Battlenet.presence.SubscribeRequest.program)
  return program_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SubscribeRequest::mutable_program() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.presence.SubscribeRequest.program)
  return &program_;
}

// optional bool flag_public = 5 [default = true, deprecated = true];
inline bool SubscribeRequest::has_flag_public() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SubscribeRequest::set_has_flag_public() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SubscribeRequest::clear_has_flag_public() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SubscribeRequest::clear_flag_public() {
  flag_public_ = true;
  clear_has_flag_public();
}
inline bool SubscribeRequest::flag_public() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.SubscribeRequest.flag_public)
  return flag_public_;
}
inline void SubscribeRequest::set_flag_public(bool value) {
  set_has_flag_public();
  flag_public_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.presence.SubscribeRequest.flag_public)
}

// -------------------------------------------------------------------

// SubscribeNotificationRequest

// required .Battlenet.EntityId entity_id = 1;
inline bool SubscribeNotificationRequest::has_entity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeNotificationRequest::set_has_entity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeNotificationRequest::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeNotificationRequest::clear_entity_id() {
  if (entity_id_ != NULL) entity_id_->::Battlenet::EntityId::Clear();
  clear_has_entity_id();
}
inline const ::Battlenet::EntityId& SubscribeNotificationRequest::entity_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.SubscribeNotificationRequest.entity_id)
  return entity_id_ != NULL ? *entity_id_ : *default_instance_->entity_id_;
}
inline ::Battlenet::EntityId* SubscribeNotificationRequest::mutable_entity_id() {
  set_has_entity_id();
  if (entity_id_ == NULL) entity_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.presence.SubscribeNotificationRequest.entity_id)
  return entity_id_;
}
inline ::Battlenet::EntityId* SubscribeNotificationRequest::release_entity_id() {
  clear_has_entity_id();
  ::Battlenet::EntityId* temp = entity_id_;
  entity_id_ = NULL;
  return temp;
}
inline void SubscribeNotificationRequest::set_allocated_entity_id(::Battlenet::EntityId* entity_id) {
  delete entity_id_;
  entity_id_ = entity_id;
  if (entity_id) {
    set_has_entity_id();
  } else {
    clear_has_entity_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.presence.SubscribeNotificationRequest.entity_id)
}

// -------------------------------------------------------------------

// UnsubscribeRequest

// optional .Battlenet.EntityId agent_id = 1;
inline bool UnsubscribeRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnsubscribeRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnsubscribeRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnsubscribeRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& UnsubscribeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.UnsubscribeRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* UnsubscribeRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.presence.UnsubscribeRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* UnsubscribeRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void UnsubscribeRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.presence.UnsubscribeRequest.agent_id)
}

// required .Battlenet.EntityId entity_id = 2;
inline bool UnsubscribeRequest::has_entity_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnsubscribeRequest::set_has_entity_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnsubscribeRequest::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnsubscribeRequest::clear_entity_id() {
  if (entity_id_ != NULL) entity_id_->::Battlenet::EntityId::Clear();
  clear_has_entity_id();
}
inline const ::Battlenet::EntityId& UnsubscribeRequest::entity_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.UnsubscribeRequest.entity_id)
  return entity_id_ != NULL ? *entity_id_ : *default_instance_->entity_id_;
}
inline ::Battlenet::EntityId* UnsubscribeRequest::mutable_entity_id() {
  set_has_entity_id();
  if (entity_id_ == NULL) entity_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.presence.UnsubscribeRequest.entity_id)
  return entity_id_;
}
inline ::Battlenet::EntityId* UnsubscribeRequest::release_entity_id() {
  clear_has_entity_id();
  ::Battlenet::EntityId* temp = entity_id_;
  entity_id_ = NULL;
  return temp;
}
inline void UnsubscribeRequest::set_allocated_entity_id(::Battlenet::EntityId* entity_id) {
  delete entity_id_;
  entity_id_ = entity_id;
  if (entity_id) {
    set_has_entity_id();
  } else {
    clear_has_entity_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.presence.UnsubscribeRequest.entity_id)
}

// optional uint64 object_id = 3;
inline bool UnsubscribeRequest::has_object_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnsubscribeRequest::set_has_object_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnsubscribeRequest::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnsubscribeRequest::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::uint64 UnsubscribeRequest::object_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.UnsubscribeRequest.object_id)
  return object_id_;
}
inline void UnsubscribeRequest::set_object_id(::google::protobuf::uint64 value) {
  set_has_object_id();
  object_id_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.presence.UnsubscribeRequest.object_id)
}

// -------------------------------------------------------------------

// UpdateRequest

// required .Battlenet.EntityId entity_id = 1;
inline bool UpdateRequest::has_entity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateRequest::set_has_entity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateRequest::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateRequest::clear_entity_id() {
  if (entity_id_ != NULL) entity_id_->::Battlenet::EntityId::Clear();
  clear_has_entity_id();
}
inline const ::Battlenet::EntityId& UpdateRequest::entity_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.UpdateRequest.entity_id)
  return entity_id_ != NULL ? *entity_id_ : *default_instance_->entity_id_;
}
inline ::Battlenet::EntityId* UpdateRequest::mutable_entity_id() {
  set_has_entity_id();
  if (entity_id_ == NULL) entity_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.presence.UpdateRequest.entity_id)
  return entity_id_;
}
inline ::Battlenet::EntityId* UpdateRequest::release_entity_id() {
  clear_has_entity_id();
  ::Battlenet::EntityId* temp = entity_id_;
  entity_id_ = NULL;
  return temp;
}
inline void UpdateRequest::set_allocated_entity_id(::Battlenet::EntityId* entity_id) {
  delete entity_id_;
  entity_id_ = entity_id;
  if (entity_id) {
    set_has_entity_id();
  } else {
    clear_has_entity_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.presence.UpdateRequest.entity_id)
}

// repeated .Battlenet.presence.FieldOperation field_operation = 2;
inline int UpdateRequest::field_operation_size() const {
  return field_operation_.size();
}
inline void UpdateRequest::clear_field_operation() {
  field_operation_.Clear();
}
inline const ::Battlenet::presence::FieldOperation& UpdateRequest::field_operation(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.UpdateRequest.field_operation)
  return field_operation_.Get(index);
}
inline ::Battlenet::presence::FieldOperation* UpdateRequest::mutable_field_operation(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.presence.UpdateRequest.field_operation)
  return field_operation_.Mutable(index);
}
inline ::Battlenet::presence::FieldOperation* UpdateRequest::add_field_operation() {
  // @@protoc_insertion_point(field_add:Battlenet.presence.UpdateRequest.field_operation)
  return field_operation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::FieldOperation >&
UpdateRequest::field_operation() const {
  // @@protoc_insertion_point(field_list:Battlenet.presence.UpdateRequest.field_operation)
  return field_operation_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::FieldOperation >*
UpdateRequest::mutable_field_operation() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.presence.UpdateRequest.field_operation)
  return &field_operation_;
}

// optional bool no_create = 3 [default = false];
inline bool UpdateRequest::has_no_create() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateRequest::set_has_no_create() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateRequest::clear_has_no_create() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateRequest::clear_no_create() {
  no_create_ = false;
  clear_has_no_create();
}
inline bool UpdateRequest::no_create() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.UpdateRequest.no_create)
  return no_create_;
}
inline void UpdateRequest::set_no_create(bool value) {
  set_has_no_create();
  no_create_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.presence.UpdateRequest.no_create)
}

// optional .Battlenet.EntityId agent_id = 4;
inline bool UpdateRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& UpdateRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.UpdateRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* UpdateRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.presence.UpdateRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* UpdateRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void UpdateRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.presence.UpdateRequest.agent_id)
}

// -------------------------------------------------------------------

// QueryRequest

// required .Battlenet.EntityId entity_id = 1;
inline bool QueryRequest::has_entity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryRequest::set_has_entity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryRequest::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryRequest::clear_entity_id() {
  if (entity_id_ != NULL) entity_id_->::Battlenet::EntityId::Clear();
  clear_has_entity_id();
}
inline const ::Battlenet::EntityId& QueryRequest::entity_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.QueryRequest.entity_id)
  return entity_id_ != NULL ? *entity_id_ : *default_instance_->entity_id_;
}
inline ::Battlenet::EntityId* QueryRequest::mutable_entity_id() {
  set_has_entity_id();
  if (entity_id_ == NULL) entity_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.presence.QueryRequest.entity_id)
  return entity_id_;
}
inline ::Battlenet::EntityId* QueryRequest::release_entity_id() {
  clear_has_entity_id();
  ::Battlenet::EntityId* temp = entity_id_;
  entity_id_ = NULL;
  return temp;
}
inline void QueryRequest::set_allocated_entity_id(::Battlenet::EntityId* entity_id) {
  delete entity_id_;
  entity_id_ = entity_id;
  if (entity_id) {
    set_has_entity_id();
  } else {
    clear_has_entity_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.presence.QueryRequest.entity_id)
}

// repeated .Battlenet.presence.FieldKey key = 2;
inline int QueryRequest::key_size() const {
  return key_.size();
}
inline void QueryRequest::clear_key() {
  key_.Clear();
}
inline const ::Battlenet::presence::FieldKey& QueryRequest::key(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.QueryRequest.key)
  return key_.Get(index);
}
inline ::Battlenet::presence::FieldKey* QueryRequest::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.presence.QueryRequest.key)
  return key_.Mutable(index);
}
inline ::Battlenet::presence::FieldKey* QueryRequest::add_key() {
  // @@protoc_insertion_point(field_add:Battlenet.presence.QueryRequest.key)
  return key_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::FieldKey >&
QueryRequest::key() const {
  // @@protoc_insertion_point(field_list:Battlenet.presence.QueryRequest.key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::FieldKey >*
QueryRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.presence.QueryRequest.key)
  return &key_;
}

// optional .Battlenet.EntityId agent_id = 3;
inline bool QueryRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& QueryRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.QueryRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* QueryRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.presence.QueryRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* QueryRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void QueryRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.presence.QueryRequest.agent_id)
}

// -------------------------------------------------------------------

// QueryResponse

// repeated .Battlenet.presence.Field field = 2;
inline int QueryResponse::field_size() const {
  return field_.size();
}
inline void QueryResponse::clear_field() {
  field_.Clear();
}
inline const ::Battlenet::presence::Field& QueryResponse::field(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.QueryResponse.field)
  return field_.Get(index);
}
inline ::Battlenet::presence::Field* QueryResponse::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.presence.QueryResponse.field)
  return field_.Mutable(index);
}
inline ::Battlenet::presence::Field* QueryResponse::add_field() {
  // @@protoc_insertion_point(field_add:Battlenet.presence.QueryResponse.field)
  return field_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::Field >&
QueryResponse::field() const {
  // @@protoc_insertion_point(field_list:Battlenet.presence.QueryResponse.field)
  return field_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::presence::Field >*
QueryResponse::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.presence.QueryResponse.field)
  return &field_;
}

// -------------------------------------------------------------------

// OwnershipRequest

// required .Battlenet.EntityId entity_id = 1;
inline bool OwnershipRequest::has_entity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OwnershipRequest::set_has_entity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OwnershipRequest::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OwnershipRequest::clear_entity_id() {
  if (entity_id_ != NULL) entity_id_->::Battlenet::EntityId::Clear();
  clear_has_entity_id();
}
inline const ::Battlenet::EntityId& OwnershipRequest::entity_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.OwnershipRequest.entity_id)
  return entity_id_ != NULL ? *entity_id_ : *default_instance_->entity_id_;
}
inline ::Battlenet::EntityId* OwnershipRequest::mutable_entity_id() {
  set_has_entity_id();
  if (entity_id_ == NULL) entity_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.presence.OwnershipRequest.entity_id)
  return entity_id_;
}
inline ::Battlenet::EntityId* OwnershipRequest::release_entity_id() {
  clear_has_entity_id();
  ::Battlenet::EntityId* temp = entity_id_;
  entity_id_ = NULL;
  return temp;
}
inline void OwnershipRequest::set_allocated_entity_id(::Battlenet::EntityId* entity_id) {
  delete entity_id_;
  entity_id_ = entity_id;
  if (entity_id) {
    set_has_entity_id();
  } else {
    clear_has_entity_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.presence.OwnershipRequest.entity_id)
}

// optional bool release_ownership = 2 [default = false];
inline bool OwnershipRequest::has_release_ownership() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OwnershipRequest::set_has_release_ownership() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OwnershipRequest::clear_has_release_ownership() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OwnershipRequest::clear_release_ownership() {
  release_ownership_ = false;
  clear_has_release_ownership();
}
inline bool OwnershipRequest::release_ownership() const {
  // @@protoc_insertion_point(field_get:Battlenet.presence.OwnershipRequest.release_ownership)
  return release_ownership_;
}
inline void OwnershipRequest::set_release_ownership(bool value) {
  set_has_release_ownership();
  release_ownership_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.presence.OwnershipRequest.release_ownership)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace presence
}  // namespace Battlenet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_presence_5fservice_2eproto__INCLUDED
