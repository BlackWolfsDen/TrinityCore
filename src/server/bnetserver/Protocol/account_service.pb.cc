// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "account_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace account {

namespace {

const ::google::protobuf::Descriptor* GetAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGameAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGameAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheExpireRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheExpireRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CredentialUpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CredentialUpdateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CredentialUpdateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CredentialUpdateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountFlagUpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountFlagUpdateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAccountFlagUpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAccountFlagUpdateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionUpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionUpdateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionUpdateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionUpdateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsIgrAddressRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsIgrAddressRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountServiceRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountServiceRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountServiceConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountServiceConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountStateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGameAccountStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGameAccountStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGameAccountStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGameAccountStateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLicensesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLicensesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLicensesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLicensesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGameSessionInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGameSessionInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGameSessionInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGameSessionInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGameTimeRemainingInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGameTimeRemainingInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGameTimeRemainingInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGameTimeRemainingInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCAISInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCAISInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCAISInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCAISInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardCacheExpireRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardCacheExpireRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAuthorizedDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAuthorizedDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAuthorizedDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAuthorizedDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountStateNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountStateNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAccountStateNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAccountStateNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAccountNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAccountNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAccountSessionNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAccountSessionNotification_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* AccountService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* AccountListener_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_account_5fservice_2eproto() {
  protobuf_AddDesc_account_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "account_service.proto");
  GOOGLE_CHECK(file != NULL);
  GetAccountRequest_descriptor_ = file->message_type(0);
  static const int GetAccountRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, fetch_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, fetch_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, fetch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, fetch_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, fetch_battle_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, fetch_full_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, fetch_links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, fetch_parental_controls_),
  };
  GetAccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountRequest_descriptor_,
      GetAccountRequest::default_instance_,
      GetAccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountRequest));
  GetAccountResponse_descriptor_ = file->message_type(1);
  static const int GetAccountResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, battle_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, full_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, parental_control_info_),
  };
  GetAccountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountResponse_descriptor_,
      GetAccountResponse::default_instance_,
      GetAccountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountResponse));
  CreateGameAccountRequest_descriptor_ = file->message_type(2);
  static const int CreateGameAccountRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGameAccountRequest, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGameAccountRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGameAccountRequest, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGameAccountRequest, realm_permissions_),
  };
  CreateGameAccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGameAccountRequest_descriptor_,
      CreateGameAccountRequest::default_instance_,
      CreateGameAccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGameAccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGameAccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGameAccountRequest));
  CacheExpireRequest_descriptor_ = file->message_type(3);
  static const int CacheExpireRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheExpireRequest, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheExpireRequest, game_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheExpireRequest, email_),
  };
  CacheExpireRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheExpireRequest_descriptor_,
      CacheExpireRequest::default_instance_,
      CacheExpireRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheExpireRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheExpireRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheExpireRequest));
  CredentialUpdateRequest_descriptor_ = file->message_type(4);
  static const int CredentialUpdateRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CredentialUpdateRequest, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CredentialUpdateRequest, old_credentials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CredentialUpdateRequest, new_credentials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CredentialUpdateRequest, region_),
  };
  CredentialUpdateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CredentialUpdateRequest_descriptor_,
      CredentialUpdateRequest::default_instance_,
      CredentialUpdateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CredentialUpdateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CredentialUpdateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CredentialUpdateRequest));
  CredentialUpdateResponse_descriptor_ = file->message_type(5);
  static const int CredentialUpdateResponse_offsets_[1] = {
  };
  CredentialUpdateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CredentialUpdateResponse_descriptor_,
      CredentialUpdateResponse::default_instance_,
      CredentialUpdateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CredentialUpdateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CredentialUpdateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CredentialUpdateResponse));
  AccountFlagUpdateRequest_descriptor_ = file->message_type(6);
  static const int AccountFlagUpdateRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFlagUpdateRequest, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFlagUpdateRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFlagUpdateRequest, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFlagUpdateRequest, active_),
  };
  AccountFlagUpdateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountFlagUpdateRequest_descriptor_,
      AccountFlagUpdateRequest::default_instance_,
      AccountFlagUpdateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFlagUpdateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFlagUpdateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountFlagUpdateRequest));
  GameAccountFlagUpdateRequest_descriptor_ = file->message_type(7);
  static const int GameAccountFlagUpdateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFlagUpdateRequest, game_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFlagUpdateRequest, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFlagUpdateRequest, active_),
  };
  GameAccountFlagUpdateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAccountFlagUpdateRequest_descriptor_,
      GameAccountFlagUpdateRequest::default_instance_,
      GameAccountFlagUpdateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFlagUpdateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFlagUpdateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAccountFlagUpdateRequest));
  SubscriptionUpdateRequest_descriptor_ = file->message_type(8);
  static const int SubscriptionUpdateRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionUpdateRequest, ref_),
  };
  SubscriptionUpdateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionUpdateRequest_descriptor_,
      SubscriptionUpdateRequest::default_instance_,
      SubscriptionUpdateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionUpdateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionUpdateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionUpdateRequest));
  SubscriptionUpdateResponse_descriptor_ = file->message_type(9);
  static const int SubscriptionUpdateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionUpdateResponse, ref_),
  };
  SubscriptionUpdateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionUpdateResponse_descriptor_,
      SubscriptionUpdateResponse::default_instance_,
      SubscriptionUpdateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionUpdateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionUpdateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionUpdateResponse));
  IsIgrAddressRequest_descriptor_ = file->message_type(10);
  static const int IsIgrAddressRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsIgrAddressRequest, client_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsIgrAddressRequest, region_),
  };
  IsIgrAddressRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsIgrAddressRequest_descriptor_,
      IsIgrAddressRequest::default_instance_,
      IsIgrAddressRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsIgrAddressRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsIgrAddressRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsIgrAddressRequest));
  AccountServiceRegion_descriptor_ = file->message_type(11);
  static const int AccountServiceRegion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountServiceRegion, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountServiceRegion, shard_),
  };
  AccountServiceRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountServiceRegion_descriptor_,
      AccountServiceRegion::default_instance_,
      AccountServiceRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountServiceRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountServiceRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountServiceRegion));
  AccountServiceConfig_descriptor_ = file->message_type(12);
  static const int AccountServiceConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountServiceConfig, region_),
  };
  AccountServiceConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountServiceConfig_descriptor_,
      AccountServiceConfig::default_instance_,
      AccountServiceConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountServiceConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountServiceConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountServiceConfig));
  GetAccountStateRequest_descriptor_ = file->message_type(13);
  static const int GetAccountStateRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStateRequest, entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStateRequest, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStateRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStateRequest, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStateRequest, tags_),
  };
  GetAccountStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountStateRequest_descriptor_,
      GetAccountStateRequest::default_instance_,
      GetAccountStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountStateRequest));
  GetAccountStateResponse_descriptor_ = file->message_type(14);
  static const int GetAccountStateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStateResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStateResponse, tags_),
  };
  GetAccountStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountStateResponse_descriptor_,
      GetAccountStateResponse::default_instance_,
      GetAccountStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountStateResponse));
  GetGameAccountStateRequest_descriptor_ = file->message_type(15);
  static const int GetGameAccountStateRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameAccountStateRequest, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameAccountStateRequest, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameAccountStateRequest, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameAccountStateRequest, tags_),
  };
  GetGameAccountStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGameAccountStateRequest_descriptor_,
      GetGameAccountStateRequest::default_instance_,
      GetGameAccountStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameAccountStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameAccountStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGameAccountStateRequest));
  GetGameAccountStateResponse_descriptor_ = file->message_type(16);
  static const int GetGameAccountStateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameAccountStateResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameAccountStateResponse, tags_),
  };
  GetGameAccountStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGameAccountStateResponse_descriptor_,
      GetGameAccountStateResponse::default_instance_,
      GetGameAccountStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameAccountStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameAccountStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGameAccountStateResponse));
  GetLicensesRequest_descriptor_ = file->message_type(17);
  static const int GetLicensesRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLicensesRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLicensesRequest, fetch_account_licenses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLicensesRequest, fetch_game_account_licenses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLicensesRequest, fetch_dynamic_account_licenses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLicensesRequest, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLicensesRequest, exclude_unknown_program_),
  };
  GetLicensesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLicensesRequest_descriptor_,
      GetLicensesRequest::default_instance_,
      GetLicensesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLicensesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLicensesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLicensesRequest));
  GetLicensesResponse_descriptor_ = file->message_type(18);
  static const int GetLicensesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLicensesResponse, licenses_),
  };
  GetLicensesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLicensesResponse_descriptor_,
      GetLicensesResponse::default_instance_,
      GetLicensesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLicensesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLicensesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLicensesResponse));
  GetGameSessionInfoRequest_descriptor_ = file->message_type(19);
  static const int GetGameSessionInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameSessionInfoRequest, entity_id_),
  };
  GetGameSessionInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGameSessionInfoRequest_descriptor_,
      GetGameSessionInfoRequest::default_instance_,
      GetGameSessionInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameSessionInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameSessionInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGameSessionInfoRequest));
  GetGameSessionInfoResponse_descriptor_ = file->message_type(20);
  static const int GetGameSessionInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameSessionInfoResponse, session_info_),
  };
  GetGameSessionInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGameSessionInfoResponse_descriptor_,
      GetGameSessionInfoResponse::default_instance_,
      GetGameSessionInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameSessionInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameSessionInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGameSessionInfoResponse));
  GetGameTimeRemainingInfoRequest_descriptor_ = file->message_type(21);
  static const int GetGameTimeRemainingInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameTimeRemainingInfoRequest, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameTimeRemainingInfoRequest, account_id_),
  };
  GetGameTimeRemainingInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGameTimeRemainingInfoRequest_descriptor_,
      GetGameTimeRemainingInfoRequest::default_instance_,
      GetGameTimeRemainingInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameTimeRemainingInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameTimeRemainingInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGameTimeRemainingInfoRequest));
  GetGameTimeRemainingInfoResponse_descriptor_ = file->message_type(22);
  static const int GetGameTimeRemainingInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameTimeRemainingInfoResponse, game_time_remaining_info_),
  };
  GetGameTimeRemainingInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGameTimeRemainingInfoResponse_descriptor_,
      GetGameTimeRemainingInfoResponse::default_instance_,
      GetGameTimeRemainingInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameTimeRemainingInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameTimeRemainingInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGameTimeRemainingInfoResponse));
  GetCAISInfoRequest_descriptor_ = file->message_type(23);
  static const int GetCAISInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCAISInfoRequest, entity_id_),
  };
  GetCAISInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCAISInfoRequest_descriptor_,
      GetCAISInfoRequest::default_instance_,
      GetCAISInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCAISInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCAISInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCAISInfoRequest));
  GetCAISInfoResponse_descriptor_ = file->message_type(24);
  static const int GetCAISInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCAISInfoResponse, cais_info_),
  };
  GetCAISInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCAISInfoResponse_descriptor_,
      GetCAISInfoResponse::default_instance_,
      GetCAISInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCAISInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCAISInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCAISInfoResponse));
  ForwardCacheExpireRequest_descriptor_ = file->message_type(25);
  static const int ForwardCacheExpireRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardCacheExpireRequest, entity_id_),
  };
  ForwardCacheExpireRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardCacheExpireRequest_descriptor_,
      ForwardCacheExpireRequest::default_instance_,
      ForwardCacheExpireRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardCacheExpireRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardCacheExpireRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardCacheExpireRequest));
  GetAuthorizedDataRequest_descriptor_ = file->message_type(26);
  static const int GetAuthorizedDataRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthorizedDataRequest, entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthorizedDataRequest, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthorizedDataRequest, privileged_network_),
  };
  GetAuthorizedDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAuthorizedDataRequest_descriptor_,
      GetAuthorizedDataRequest::default_instance_,
      GetAuthorizedDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthorizedDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthorizedDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAuthorizedDataRequest));
  GetAuthorizedDataResponse_descriptor_ = file->message_type(27);
  static const int GetAuthorizedDataResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthorizedDataResponse, data_),
  };
  GetAuthorizedDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAuthorizedDataResponse_descriptor_,
      GetAuthorizedDataResponse::default_instance_,
      GetAuthorizedDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthorizedDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthorizedDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAuthorizedDataResponse));
  AccountStateNotification_descriptor_ = file->message_type(28);
  static const int AccountStateNotification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStateNotification, account_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStateNotification, subscriber_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStateNotification, account_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStateNotification, subscription_completed_),
  };
  AccountStateNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountStateNotification_descriptor_,
      AccountStateNotification::default_instance_,
      AccountStateNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStateNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStateNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountStateNotification));
  GameAccountStateNotification_descriptor_ = file->message_type(29);
  static const int GameAccountStateNotification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountStateNotification, game_account_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountStateNotification, subscriber_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountStateNotification, game_account_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountStateNotification, subscription_completed_),
  };
  GameAccountStateNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAccountStateNotification_descriptor_,
      GameAccountStateNotification::default_instance_,
      GameAccountStateNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountStateNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountStateNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAccountStateNotification));
  GameAccountNotification_descriptor_ = file->message_type(30);
  static const int GameAccountNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountNotification, game_accounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountNotification, subscriber_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountNotification, account_tags_),
  };
  GameAccountNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAccountNotification_descriptor_,
      GameAccountNotification::default_instance_,
      GameAccountNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAccountNotification));
  GameAccountSessionNotification_descriptor_ = file->message_type(31);
  static const int GameAccountSessionNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountSessionNotification, game_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountSessionNotification, session_info_),
  };
  GameAccountSessionNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAccountSessionNotification_descriptor_,
      GameAccountSessionNotification::default_instance_,
      GameAccountSessionNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountSessionNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountSessionNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAccountSessionNotification));
  AccountService_descriptor_ = file->service(0);
  AccountListener_descriptor_ = file->service(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_account_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountRequest_descriptor_, &GetAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountResponse_descriptor_, &GetAccountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGameAccountRequest_descriptor_, &CreateGameAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheExpireRequest_descriptor_, &CacheExpireRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CredentialUpdateRequest_descriptor_, &CredentialUpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CredentialUpdateResponse_descriptor_, &CredentialUpdateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountFlagUpdateRequest_descriptor_, &AccountFlagUpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAccountFlagUpdateRequest_descriptor_, &GameAccountFlagUpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionUpdateRequest_descriptor_, &SubscriptionUpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionUpdateResponse_descriptor_, &SubscriptionUpdateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsIgrAddressRequest_descriptor_, &IsIgrAddressRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountServiceRegion_descriptor_, &AccountServiceRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountServiceConfig_descriptor_, &AccountServiceConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountStateRequest_descriptor_, &GetAccountStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountStateResponse_descriptor_, &GetAccountStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGameAccountStateRequest_descriptor_, &GetGameAccountStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGameAccountStateResponse_descriptor_, &GetGameAccountStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLicensesRequest_descriptor_, &GetLicensesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLicensesResponse_descriptor_, &GetLicensesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGameSessionInfoRequest_descriptor_, &GetGameSessionInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGameSessionInfoResponse_descriptor_, &GetGameSessionInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGameTimeRemainingInfoRequest_descriptor_, &GetGameTimeRemainingInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGameTimeRemainingInfoResponse_descriptor_, &GetGameTimeRemainingInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCAISInfoRequest_descriptor_, &GetCAISInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCAISInfoResponse_descriptor_, &GetCAISInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardCacheExpireRequest_descriptor_, &ForwardCacheExpireRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAuthorizedDataRequest_descriptor_, &GetAuthorizedDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAuthorizedDataResponse_descriptor_, &GetAuthorizedDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountStateNotification_descriptor_, &AccountStateNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAccountStateNotification_descriptor_, &GameAccountStateNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAccountNotification_descriptor_, &GameAccountNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAccountSessionNotification_descriptor_, &GameAccountSessionNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_account_5fservice_2eproto() {
  delete GetAccountRequest::default_instance_;
  delete GetAccountRequest_reflection_;
  delete GetAccountResponse::default_instance_;
  delete GetAccountResponse_reflection_;
  delete CreateGameAccountRequest::default_instance_;
  delete CreateGameAccountRequest_reflection_;
  delete CacheExpireRequest::default_instance_;
  delete CacheExpireRequest_reflection_;
  delete CredentialUpdateRequest::default_instance_;
  delete CredentialUpdateRequest_reflection_;
  delete CredentialUpdateResponse::default_instance_;
  delete CredentialUpdateResponse_reflection_;
  delete AccountFlagUpdateRequest::default_instance_;
  delete AccountFlagUpdateRequest_reflection_;
  delete GameAccountFlagUpdateRequest::default_instance_;
  delete GameAccountFlagUpdateRequest_reflection_;
  delete SubscriptionUpdateRequest::default_instance_;
  delete SubscriptionUpdateRequest_reflection_;
  delete SubscriptionUpdateResponse::default_instance_;
  delete SubscriptionUpdateResponse_reflection_;
  delete IsIgrAddressRequest::default_instance_;
  delete IsIgrAddressRequest_reflection_;
  delete AccountServiceRegion::default_instance_;
  delete AccountServiceRegion_reflection_;
  delete AccountServiceConfig::default_instance_;
  delete AccountServiceConfig_reflection_;
  delete GetAccountStateRequest::default_instance_;
  delete GetAccountStateRequest_reflection_;
  delete GetAccountStateResponse::default_instance_;
  delete GetAccountStateResponse_reflection_;
  delete GetGameAccountStateRequest::default_instance_;
  delete GetGameAccountStateRequest_reflection_;
  delete GetGameAccountStateResponse::default_instance_;
  delete GetGameAccountStateResponse_reflection_;
  delete GetLicensesRequest::default_instance_;
  delete GetLicensesRequest_reflection_;
  delete GetLicensesResponse::default_instance_;
  delete GetLicensesResponse_reflection_;
  delete GetGameSessionInfoRequest::default_instance_;
  delete GetGameSessionInfoRequest_reflection_;
  delete GetGameSessionInfoResponse::default_instance_;
  delete GetGameSessionInfoResponse_reflection_;
  delete GetGameTimeRemainingInfoRequest::default_instance_;
  delete GetGameTimeRemainingInfoRequest_reflection_;
  delete GetGameTimeRemainingInfoResponse::default_instance_;
  delete GetGameTimeRemainingInfoResponse_reflection_;
  delete GetCAISInfoRequest::default_instance_;
  delete GetCAISInfoRequest_reflection_;
  delete GetCAISInfoResponse::default_instance_;
  delete GetCAISInfoResponse_reflection_;
  delete ForwardCacheExpireRequest::default_instance_;
  delete ForwardCacheExpireRequest_reflection_;
  delete GetAuthorizedDataRequest::default_instance_;
  delete GetAuthorizedDataRequest_reflection_;
  delete GetAuthorizedDataResponse::default_instance_;
  delete GetAuthorizedDataResponse_reflection_;
  delete AccountStateNotification::default_instance_;
  delete AccountStateNotification_reflection_;
  delete GameAccountStateNotification::default_instance_;
  delete GameAccountStateNotification_reflection_;
  delete GameAccountNotification::default_instance_;
  delete GameAccountNotification_reflection_;
  delete GameAccountSessionNotification::default_instance_;
  delete GameAccountSessionNotification_reflection_;
}

void protobuf_AddDesc_account_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Battlenet::account::protobuf_AddDesc_account_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_entity_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025account_service.proto\022\021Battlenet.accou"
    "nt\032\023account_types.proto\032\022entity_types.pr"
    "oto\032\017rpc_types.proto\"\264\002\n\021GetAccountReque"
    "st\0220\n\003ref\030\001 \001(\0132#.Battlenet.account.Acco"
    "untReference\022\030\n\tfetch_all\030\n \001(\010:\005false\022\031"
    "\n\nfetch_blob\030\013 \001(\010:\005false\022\027\n\010fetch_id\030\014 "
    "\001(\010:\005false\022\032\n\013fetch_email\030\r \001(\010:\005false\022\037"
    "\n\020fetch_battle_tag\030\016 \001(\010:\005false\022\036\n\017fetch"
    "_full_name\030\017 \001(\010:\005false\022\032\n\013fetch_links\030\020"
    " \001(\010:\005false\022&\n\027fetch_parental_controls\030\021"
    " \001(\010:\005false\"\234\002\n\022GetAccountResponse\022,\n\004bl"
    "ob\030\013 \001(\0132\036.Battlenet.account.AccountBlob"
    "\022(\n\002id\030\014 \001(\0132\034.Battlenet.account.Account"
    "Id\022\r\n\005email\030\r \003(\t\022\022\n\nbattle_tag\030\016 \001(\t\022\021\n"
    "\tfull_name\030\017 \001(\t\0221\n\005links\030\020 \003(\0132\".Battle"
    "net.account.GameAccountLink\022E\n\025parental_"
    "control_info\030\021 \001(\0132&.Battlenet.account.P"
    "arentalControlInfo\"\210\001\n\030CreateGameAccount"
    "Request\022-\n\007account\030\001 \001(\0132\034.Battlenet.acc"
    "ount.AccountId\022\016\n\006region\030\002 \001(\r\022\017\n\007progra"
    "m\030\003 \001(\007\022\034\n\021realm_permissions\030\004 \001(\r:\0011\"\216\001"
    "\n\022CacheExpireRequest\022-\n\007account\030\001 \003(\0132\034."
    "Battlenet.account.AccountId\022:\n\014game_acco"
    "unt\030\002 \003(\0132$.Battlenet.account.GameAccoun"
    "tHandle\022\r\n\005email\030\003 \003(\t\"\326\001\n\027CredentialUpd"
    "ateRequest\022-\n\007account\030\001 \002(\0132\034.Battlenet."
    "account.AccountId\022=\n\017old_credentials\030\002 \003"
    "(\0132$.Battlenet.account.AccountCredential"
    "\022=\n\017new_credentials\030\003 \003(\0132$.Battlenet.ac"
    "count.AccountCredential\022\016\n\006region\030\004 \001(\r\""
    "\032\n\030CredentialUpdateResponse\"w\n\030AccountFl"
    "agUpdateRequest\022-\n\007account\030\001 \001(\0132\034.Battl"
    "enet.account.AccountId\022\016\n\006region\030\002 \001(\r\022\014"
    "\n\004flag\030\003 \001(\004\022\016\n\006active\030\004 \001(\010\"x\n\034GameAcco"
    "untFlagUpdateRequest\022:\n\014game_account\030\001 \001"
    "(\0132$.Battlenet.account.GameAccountHandle"
    "\022\014\n\004flag\030\002 \001(\004\022\016\n\006active\030\003 \001(\010\"P\n\031Subscr"
    "iptionUpdateRequest\0223\n\003ref\030\002 \003(\0132&.Battl"
    "enet.account.SubscriberReference\"Q\n\032Subs"
    "criptionUpdateResponse\0223\n\003ref\030\001 \003(\0132&.Ba"
    "ttlenet.account.SubscriberReference\"=\n\023I"
    "sIgrAddressRequest\022\026\n\016client_address\030\001 \001"
    "(\t\022\016\n\006region\030\002 \001(\r\"1\n\024AccountServiceRegi"
    "on\022\n\n\002id\030\001 \002(\r\022\r\n\005shard\030\002 \002(\t\"O\n\024Account"
    "ServiceConfig\0227\n\006region\030\001 \003(\0132\'.Battlene"
    "t.account.AccountServiceRegion\"\315\001\n\026GetAc"
    "countStateRequest\022&\n\tentity_id\030\001 \001(\0132\023.B"
    "attlenet.EntityId\022\017\n\007program\030\002 \001(\r\022\016\n\006re"
    "gion\030\003 \001(\r\0227\n\007options\030\n \001(\0132&.Battlenet."
    "account.AccountFieldOptions\0221\n\004tags\030\013 \001("
    "\0132#.Battlenet.account.AccountFieldTags\"|"
    "\n\027GetAccountStateResponse\022.\n\005state\030\001 \001(\013"
    "2\037.Battlenet.account.AccountState\0221\n\004tag"
    "s\030\002 \001(\0132#.Battlenet.account.AccountField"
    "Tags\"\353\001\n\032GetGameAccountStateRequest\022+\n\na"
    "ccount_id\030\001 \001(\0132\023.Battlenet.EntityIdB\002\030\001"
    "\022,\n\017game_account_id\030\002 \001(\0132\023.Battlenet.En"
    "tityId\022;\n\007options\030\n \001(\0132*.Battlenet.acco"
    "unt.GameAccountFieldOptions\0225\n\004tags\030\013 \001("
    "\0132\'.Battlenet.account.GameAccountFieldTa"
    "gs\"\210\001\n\033GetGameAccountStateResponse\0222\n\005st"
    "ate\030\001 \001(\0132#.Battlenet.account.GameAccoun"
    "tState\0225\n\004tags\030\002 \001(\0132\'.Battlenet.account"
    ".GameAccountFieldTags\"\342\001\n\022GetLicensesReq"
    "uest\022&\n\ttarget_id\030\001 \001(\0132\023.Battlenet.Enti"
    "tyId\022\036\n\026fetch_account_licenses\030\002 \001(\010\022#\n\033"
    "fetch_game_account_licenses\030\003 \001(\010\022&\n\036fet"
    "ch_dynamic_account_licenses\030\004 \001(\010\022\017\n\007pro"
    "gram\030\005 \001(\007\022&\n\027exclude_unknown_program\030\006 "
    "\001(\010:\005false\"J\n\023GetLicensesResponse\0223\n\010lic"
    "enses\030\001 \003(\0132!.Battlenet.account.AccountL"
    "icense\"C\n\031GetGameSessionInfoRequest\022&\n\te"
    "ntity_id\030\001 \001(\0132\023.Battlenet.EntityId\"V\n\032G"
    "etGameSessionInfoResponse\0228\n\014session_inf"
    "o\030\002 \001(\0132\".Battlenet.account.GameSessionI"
    "nfo\"x\n\037GetGameTimeRemainingInfoRequest\022,"
    "\n\017game_account_id\030\001 \001(\0132\023.Battlenet.Enti"
    "tyId\022\'\n\naccount_id\030\002 \001(\0132\023.Battlenet.Ent"
    "ityId\"n\n GetGameTimeRemainingInfoRespons"
    "e\022J\n\030game_time_remaining_info\030\001 \001(\0132(.Ba"
    "ttlenet.account.GameTimeRemainingInfo\"<\n"
    "\022GetCAISInfoRequest\022&\n\tentity_id\030\001 \001(\0132\023"
    ".Battlenet.EntityId\"A\n\023GetCAISInfoRespon"
    "se\022*\n\tcais_info\030\001 \001(\0132\027.Battlenet.accoun"
    "t.CAIS\"C\n\031ForwardCacheExpireRequest\022&\n\te"
    "ntity_id\030\001 \001(\0132\023.Battlenet.EntityId\"k\n\030G"
    "etAuthorizedDataRequest\022&\n\tentity_id\030\001 \001"
    "(\0132\023.Battlenet.EntityId\022\013\n\003tag\030\002 \003(\t\022\032\n\022"
    "privileged_network\030\003 \001(\010\"L\n\031GetAuthorize"
    "dDataResponse\022/\n\004data\030\001 \003(\0132!.Battlenet."
    "account.AuthorizedData\"\304\001\n\030AccountStateN"
    "otification\0226\n\raccount_state\030\001 \001(\0132\037.Bat"
    "tlenet.account.AccountState\022\025\n\rsubscribe"
    "r_id\030\002 \001(\004\0229\n\014account_tags\030\003 \001(\0132#.Battl"
    "enet.account.AccountFieldTags\022\036\n\026subscri"
    "ption_completed\030\004 \001(\010\"\332\001\n\034GameAccountSta"
    "teNotification\022\?\n\022game_account_state\030\001 \001"
    "(\0132#.Battlenet.account.GameAccountState\022"
    "\025\n\rsubscriber_id\030\002 \001(\004\022B\n\021game_account_t"
    "ags\030\003 \001(\0132\'.Battlenet.account.GameAccoun"
    "tFieldTags\022\036\n\026subscription_completed\030\004 \001"
    "(\010\"\246\001\n\027GameAccountNotification\0229\n\rgame_a"
    "ccounts\030\001 \003(\0132\".Battlenet.account.GameAc"
    "countList\022\025\n\rsubscriber_id\030\002 \001(\004\0229\n\014acco"
    "unt_tags\030\003 \001(\0132#.Battlenet.account.Accou"
    "ntFieldTags\"\234\001\n\036GameAccountSessionNotifi"
    "cation\022:\n\014game_account\030\001 \001(\0132$.Battlenet"
    ".account.GameAccountHandle\022>\n\014session_in"
    "fo\030\002 \001(\0132(.Battlenet.account.GameSession"
    "UpdateInfo2\234\017\n\016AccountService\022`\n\016GetGame"
    "Account\022$.Battlenet.account.GameAccountH"
    "andle\032\".Battlenet.account.GameAccountBlo"
    "b\"\004\200\265\030\014\022_\n\nGetAccount\022$.Battlenet.accoun"
    "t.GetAccountRequest\032%.Battlenet.account."
    "GetAccountResponse\"\004\200\265\030\r\022l\n\021CreateGameAc"
    "count\022+.Battlenet.account.CreateGameAcco"
    "untRequest\032$.Battlenet.account.GameAccou"
    "ntHandle\"\004\200\265\030\016\022O\n\014IsIgrAddress\022&.Battlen"
    "et.account.IsIgrAddressRequest\032\021.Battlen"
    "et.NoData\"\004\200\265\030\017\022R\n\013CacheExpire\022%.Battlen"
    "et.account.CacheExpireRequest\032\026.Battlene"
    "t.NO_RESPONSE\"\004\200\265\030\024\022q\n\020CredentialUpdate\022"
    "*.Battlenet.account.CredentialUpdateRequ"
    "est\032+.Battlenet.account.CredentialUpdate"
    "Response\"\004\200\265\030\025\022n\n\tSubscribe\022,.Battlenet."
    "account.SubscriptionUpdateRequest\032-.Batt"
    "lenet.account.SubscriptionUpdateResponse"
    "\"\004\200\265\030\031\022T\n\013Unsubscribe\022,.Battlenet.accoun"
    "t.SubscriptionUpdateRequest\032\021.Battlenet."
    "NoData\"\004\200\265\030\032\022n\n\017GetAccountState\022).Battle"
    "net.account.GetAccountStateRequest\032*.Bat"
    "tlenet.account.GetAccountStateResponse\"\004"
    "\200\265\030\036\022z\n\023GetGameAccountState\022-.Battlenet."
    "account.GetGameAccountStateRequest\032..Bat"
    "tlenet.account.GetGameAccountStateRespon"
    "se\"\004\200\265\030\037\022b\n\013GetLicenses\022%.Battlenet.acco"
    "unt.GetLicensesRequest\032&.Battlenet.accou"
    "nt.GetLicensesResponse\"\004\200\265\030 \022\211\001\n\030GetGame"
    "TimeRemainingInfo\0222.Battlenet.account.Ge"
    "tGameTimeRemainingInfoRequest\0323.Battlene"
    "t.account.GetGameTimeRemainingInfoRespon"
    "se\"\004\200\265\030!\022w\n\022GetGameSessionInfo\022,.Battlen"
    "et.account.GetGameSessionInfoRequest\032-.B"
    "attlenet.account.GetGameSessionInfoRespo"
    "nse\"\004\200\265\030\"\022b\n\013GetCAISInfo\022%.Battlenet.acc"
    "ount.GetCAISInfoRequest\032&.Battlenet.acco"
    "unt.GetCAISInfoResponse\"\004\200\265\030#\022[\n\022Forward"
    "CacheExpire\022,.Battlenet.account.ForwardC"
    "acheExpireRequest\032\021.Battlenet.NoData\"\004\200\265"
    "\030$\022t\n\021GetAuthorizedData\022+.Battlenet.acco"
    "unt.GetAuthorizedDataRequest\032,.Battlenet"
    ".account.GetAuthorizedDataResponse\"\004\200\265\030%"
    "\022^\n\021AccountFlagUpdate\022+.Battlenet.accoun"
    "t.AccountFlagUpdateRequest\032\026.Battlenet.N"
    "O_RESPONSE\"\004\200\265\030&\022f\n\025GameAccountFlagUpdat"
    "e\022/.Battlenet.account.GameAccountFlagUpd"
    "ateRequest\032\026.Battlenet.NO_RESPONSE\"\004\200\265\030\'"
    "\032\'\312>$bnet.protocol.account.AccountServic"
    "e2\333\003\n\017AccountListener\022b\n\025OnAccountStateU"
    "pdated\022+.Battlenet.account.AccountStateN"
    "otification\032\026.Battlenet.NO_RESPONSE\"\004\200\265\030"
    "\001\022j\n\031OnGameAccountStateUpdated\022/.Battlen"
    "et.account.GameAccountStateNotification\032"
    "\026.Battlenet.NO_RESPONSE\"\004\200\265\030\002\022d\n\025OnGameA"
    "ccountsUpdated\022*.Battlenet.account.GameA"
    "ccountNotification\032\026.Battlenet.NO_RESPON"
    "SE\"\007\210\002\001\200\265\030\003\022j\n\024OnGameSessionUpdated\0221.Ba"
    "ttlenet.account.GameAccountSessionNotifi"
    "cation\032\026.Battlenet.NO_RESPONSE\"\007\210\002\001\200\265\030\004\032"
    "&\312>#bnet.protocol.account.AccountNotifyB"
    "\005H\001\200\001\001", 6806);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "account_service.proto", &protobuf_RegisterTypes);
  GetAccountRequest::default_instance_ = new GetAccountRequest();
  GetAccountResponse::default_instance_ = new GetAccountResponse();
  CreateGameAccountRequest::default_instance_ = new CreateGameAccountRequest();
  CacheExpireRequest::default_instance_ = new CacheExpireRequest();
  CredentialUpdateRequest::default_instance_ = new CredentialUpdateRequest();
  CredentialUpdateResponse::default_instance_ = new CredentialUpdateResponse();
  AccountFlagUpdateRequest::default_instance_ = new AccountFlagUpdateRequest();
  GameAccountFlagUpdateRequest::default_instance_ = new GameAccountFlagUpdateRequest();
  SubscriptionUpdateRequest::default_instance_ = new SubscriptionUpdateRequest();
  SubscriptionUpdateResponse::default_instance_ = new SubscriptionUpdateResponse();
  IsIgrAddressRequest::default_instance_ = new IsIgrAddressRequest();
  AccountServiceRegion::default_instance_ = new AccountServiceRegion();
  AccountServiceConfig::default_instance_ = new AccountServiceConfig();
  GetAccountStateRequest::default_instance_ = new GetAccountStateRequest();
  GetAccountStateResponse::default_instance_ = new GetAccountStateResponse();
  GetGameAccountStateRequest::default_instance_ = new GetGameAccountStateRequest();
  GetGameAccountStateResponse::default_instance_ = new GetGameAccountStateResponse();
  GetLicensesRequest::default_instance_ = new GetLicensesRequest();
  GetLicensesResponse::default_instance_ = new GetLicensesResponse();
  GetGameSessionInfoRequest::default_instance_ = new GetGameSessionInfoRequest();
  GetGameSessionInfoResponse::default_instance_ = new GetGameSessionInfoResponse();
  GetGameTimeRemainingInfoRequest::default_instance_ = new GetGameTimeRemainingInfoRequest();
  GetGameTimeRemainingInfoResponse::default_instance_ = new GetGameTimeRemainingInfoResponse();
  GetCAISInfoRequest::default_instance_ = new GetCAISInfoRequest();
  GetCAISInfoResponse::default_instance_ = new GetCAISInfoResponse();
  ForwardCacheExpireRequest::default_instance_ = new ForwardCacheExpireRequest();
  GetAuthorizedDataRequest::default_instance_ = new GetAuthorizedDataRequest();
  GetAuthorizedDataResponse::default_instance_ = new GetAuthorizedDataResponse();
  AccountStateNotification::default_instance_ = new AccountStateNotification();
  GameAccountStateNotification::default_instance_ = new GameAccountStateNotification();
  GameAccountNotification::default_instance_ = new GameAccountNotification();
  GameAccountSessionNotification::default_instance_ = new GameAccountSessionNotification();
  GetAccountRequest::default_instance_->InitAsDefaultInstance();
  GetAccountResponse::default_instance_->InitAsDefaultInstance();
  CreateGameAccountRequest::default_instance_->InitAsDefaultInstance();
  CacheExpireRequest::default_instance_->InitAsDefaultInstance();
  CredentialUpdateRequest::default_instance_->InitAsDefaultInstance();
  CredentialUpdateResponse::default_instance_->InitAsDefaultInstance();
  AccountFlagUpdateRequest::default_instance_->InitAsDefaultInstance();
  GameAccountFlagUpdateRequest::default_instance_->InitAsDefaultInstance();
  SubscriptionUpdateRequest::default_instance_->InitAsDefaultInstance();
  SubscriptionUpdateResponse::default_instance_->InitAsDefaultInstance();
  IsIgrAddressRequest::default_instance_->InitAsDefaultInstance();
  AccountServiceRegion::default_instance_->InitAsDefaultInstance();
  AccountServiceConfig::default_instance_->InitAsDefaultInstance();
  GetAccountStateRequest::default_instance_->InitAsDefaultInstance();
  GetAccountStateResponse::default_instance_->InitAsDefaultInstance();
  GetGameAccountStateRequest::default_instance_->InitAsDefaultInstance();
  GetGameAccountStateResponse::default_instance_->InitAsDefaultInstance();
  GetLicensesRequest::default_instance_->InitAsDefaultInstance();
  GetLicensesResponse::default_instance_->InitAsDefaultInstance();
  GetGameSessionInfoRequest::default_instance_->InitAsDefaultInstance();
  GetGameSessionInfoResponse::default_instance_->InitAsDefaultInstance();
  GetGameTimeRemainingInfoRequest::default_instance_->InitAsDefaultInstance();
  GetGameTimeRemainingInfoResponse::default_instance_->InitAsDefaultInstance();
  GetCAISInfoRequest::default_instance_->InitAsDefaultInstance();
  GetCAISInfoResponse::default_instance_->InitAsDefaultInstance();
  ForwardCacheExpireRequest::default_instance_->InitAsDefaultInstance();
  GetAuthorizedDataRequest::default_instance_->InitAsDefaultInstance();
  GetAuthorizedDataResponse::default_instance_->InitAsDefaultInstance();
  AccountStateNotification::default_instance_->InitAsDefaultInstance();
  GameAccountStateNotification::default_instance_->InitAsDefaultInstance();
  GameAccountNotification::default_instance_->InitAsDefaultInstance();
  GameAccountSessionNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_account_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_account_5fservice_2eproto {
  StaticDescriptorInitializer_account_5fservice_2eproto() {
    protobuf_AddDesc_account_5fservice_2eproto();
  }
} static_descriptor_initializer_account_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetAccountRequest::kRefFieldNumber;
const int GetAccountRequest::kFetchAllFieldNumber;
const int GetAccountRequest::kFetchBlobFieldNumber;
const int GetAccountRequest::kFetchIdFieldNumber;
const int GetAccountRequest::kFetchEmailFieldNumber;
const int GetAccountRequest::kFetchBattleTagFieldNumber;
const int GetAccountRequest::kFetchFullNameFieldNumber;
const int GetAccountRequest::kFetchLinksFieldNumber;
const int GetAccountRequest::kFetchParentalControlsFieldNumber;
#endif  // !_MSC_VER

GetAccountRequest::GetAccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetAccountRequest)
}

void GetAccountRequest::InitAsDefaultInstance() {
  ref_ = const_cast< ::Battlenet::account::AccountReference*>(&::Battlenet::account::AccountReference::default_instance());
}

GetAccountRequest::GetAccountRequest(const GetAccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetAccountRequest)
}

void GetAccountRequest::SharedCtor() {
  _cached_size_ = 0;
  ref_ = NULL;
  fetch_all_ = false;
  fetch_blob_ = false;
  fetch_id_ = false;
  fetch_email_ = false;
  fetch_battle_tag_ = false;
  fetch_full_name_ = false;
  fetch_links_ = false;
  fetch_parental_controls_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountRequest::~GetAccountRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetAccountRequest)
  SharedDtor();
}

void GetAccountRequest::SharedDtor() {
  if (this != default_instance_) {
    delete ref_;
  }
}

void GetAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountRequest_descriptor_;
}

const GetAccountRequest& GetAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetAccountRequest* GetAccountRequest::default_instance_ = NULL;

GetAccountRequest* GetAccountRequest::New() const {
  return new GetAccountRequest;
}

void GetAccountRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetAccountRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(fetch_all_, fetch_links_);
    if (has_ref()) {
      if (ref_ != NULL) ref_->::Battlenet::account::AccountReference::Clear();
    }
  }
  fetch_parental_controls_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.account.AccountReference ref = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ref()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fetch_all;
        break;
      }

      // optional bool fetch_all = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_fetch_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_all_)));
          set_has_fetch_all();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_fetch_blob;
        break;
      }

      // optional bool fetch_blob = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_fetch_blob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_blob_)));
          set_has_fetch_blob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_fetch_id;
        break;
      }

      // optional bool fetch_id = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_fetch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_id_)));
          set_has_fetch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_fetch_email;
        break;
      }

      // optional bool fetch_email = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_fetch_email:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_email_)));
          set_has_fetch_email();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_fetch_battle_tag;
        break;
      }

      // optional bool fetch_battle_tag = 14 [default = false];
      case 14: {
        if (tag == 112) {
         parse_fetch_battle_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_battle_tag_)));
          set_has_fetch_battle_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_fetch_full_name;
        break;
      }

      // optional bool fetch_full_name = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_fetch_full_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_full_name_)));
          set_has_fetch_full_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_fetch_links;
        break;
      }

      // optional bool fetch_links = 16 [default = false];
      case 16: {
        if (tag == 128) {
         parse_fetch_links:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_links_)));
          set_has_fetch_links();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_fetch_parental_controls;
        break;
      }

      // optional bool fetch_parental_controls = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_fetch_parental_controls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_parental_controls_)));
          set_has_fetch_parental_controls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetAccountRequest)
  return false;
#undef DO_
}

void GetAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetAccountRequest)
  // optional .Battlenet.account.AccountReference ref = 1;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->ref(), output);
  }

  // optional bool fetch_all = 10 [default = false];
  if (has_fetch_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->fetch_all(), output);
  }

  // optional bool fetch_blob = 11 [default = false];
  if (has_fetch_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->fetch_blob(), output);
  }

  // optional bool fetch_id = 12 [default = false];
  if (has_fetch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->fetch_id(), output);
  }

  // optional bool fetch_email = 13 [default = false];
  if (has_fetch_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->fetch_email(), output);
  }

  // optional bool fetch_battle_tag = 14 [default = false];
  if (has_fetch_battle_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->fetch_battle_tag(), output);
  }

  // optional bool fetch_full_name = 15 [default = false];
  if (has_fetch_full_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->fetch_full_name(), output);
  }

  // optional bool fetch_links = 16 [default = false];
  if (has_fetch_links()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->fetch_links(), output);
  }

  // optional bool fetch_parental_controls = 17 [default = false];
  if (has_fetch_parental_controls()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->fetch_parental_controls(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetAccountRequest)
}

::google::protobuf::uint8* GetAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetAccountRequest)
  // optional .Battlenet.account.AccountReference ref = 1;
  if (has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ref(), target);
  }

  // optional bool fetch_all = 10 [default = false];
  if (has_fetch_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->fetch_all(), target);
  }

  // optional bool fetch_blob = 11 [default = false];
  if (has_fetch_blob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->fetch_blob(), target);
  }

  // optional bool fetch_id = 12 [default = false];
  if (has_fetch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->fetch_id(), target);
  }

  // optional bool fetch_email = 13 [default = false];
  if (has_fetch_email()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->fetch_email(), target);
  }

  // optional bool fetch_battle_tag = 14 [default = false];
  if (has_fetch_battle_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->fetch_battle_tag(), target);
  }

  // optional bool fetch_full_name = 15 [default = false];
  if (has_fetch_full_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->fetch_full_name(), target);
  }

  // optional bool fetch_links = 16 [default = false];
  if (has_fetch_links()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->fetch_links(), target);
  }

  // optional bool fetch_parental_controls = 17 [default = false];
  if (has_fetch_parental_controls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->fetch_parental_controls(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetAccountRequest)
  return target;
}

int GetAccountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.account.AccountReference ref = 1;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ref());
    }

    // optional bool fetch_all = 10 [default = false];
    if (has_fetch_all()) {
      total_size += 1 + 1;
    }

    // optional bool fetch_blob = 11 [default = false];
    if (has_fetch_blob()) {
      total_size += 1 + 1;
    }

    // optional bool fetch_id = 12 [default = false];
    if (has_fetch_id()) {
      total_size += 1 + 1;
    }

    // optional bool fetch_email = 13 [default = false];
    if (has_fetch_email()) {
      total_size += 1 + 1;
    }

    // optional bool fetch_battle_tag = 14 [default = false];
    if (has_fetch_battle_tag()) {
      total_size += 1 + 1;
    }

    // optional bool fetch_full_name = 15 [default = false];
    if (has_fetch_full_name()) {
      total_size += 1 + 1;
    }

    // optional bool fetch_links = 16 [default = false];
    if (has_fetch_links()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool fetch_parental_controls = 17 [default = false];
    if (has_fetch_parental_controls()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountRequest::MergeFrom(const GetAccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ref()) {
      mutable_ref()->::Battlenet::account::AccountReference::MergeFrom(from.ref());
    }
    if (from.has_fetch_all()) {
      set_fetch_all(from.fetch_all());
    }
    if (from.has_fetch_blob()) {
      set_fetch_blob(from.fetch_blob());
    }
    if (from.has_fetch_id()) {
      set_fetch_id(from.fetch_id());
    }
    if (from.has_fetch_email()) {
      set_fetch_email(from.fetch_email());
    }
    if (from.has_fetch_battle_tag()) {
      set_fetch_battle_tag(from.fetch_battle_tag());
    }
    if (from.has_fetch_full_name()) {
      set_fetch_full_name(from.fetch_full_name());
    }
    if (from.has_fetch_links()) {
      set_fetch_links(from.fetch_links());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fetch_parental_controls()) {
      set_fetch_parental_controls(from.fetch_parental_controls());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountRequest::CopyFrom(const GetAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountRequest::IsInitialized() const {

  if (has_ref()) {
    if (!this->ref().IsInitialized()) return false;
  }
  return true;
}

void GetAccountRequest::Swap(GetAccountRequest* other) {
  if (other != this) {
    std::swap(ref_, other->ref_);
    std::swap(fetch_all_, other->fetch_all_);
    std::swap(fetch_blob_, other->fetch_blob_);
    std::swap(fetch_id_, other->fetch_id_);
    std::swap(fetch_email_, other->fetch_email_);
    std::swap(fetch_battle_tag_, other->fetch_battle_tag_);
    std::swap(fetch_full_name_, other->fetch_full_name_);
    std::swap(fetch_links_, other->fetch_links_);
    std::swap(fetch_parental_controls_, other->fetch_parental_controls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountRequest_descriptor_;
  metadata.reflection = GetAccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccountResponse::kBlobFieldNumber;
const int GetAccountResponse::kIdFieldNumber;
const int GetAccountResponse::kEmailFieldNumber;
const int GetAccountResponse::kBattleTagFieldNumber;
const int GetAccountResponse::kFullNameFieldNumber;
const int GetAccountResponse::kLinksFieldNumber;
const int GetAccountResponse::kParentalControlInfoFieldNumber;
#endif  // !_MSC_VER

GetAccountResponse::GetAccountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetAccountResponse)
}

void GetAccountResponse::InitAsDefaultInstance() {
  blob_ = const_cast< ::Battlenet::account::AccountBlob*>(&::Battlenet::account::AccountBlob::default_instance());
  id_ = const_cast< ::Battlenet::account::AccountId*>(&::Battlenet::account::AccountId::default_instance());
  parental_control_info_ = const_cast< ::Battlenet::account::ParentalControlInfo*>(&::Battlenet::account::ParentalControlInfo::default_instance());
}

GetAccountResponse::GetAccountResponse(const GetAccountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetAccountResponse)
}

void GetAccountResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  blob_ = NULL;
  id_ = NULL;
  battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parental_control_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountResponse::~GetAccountResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetAccountResponse)
  SharedDtor();
}

void GetAccountResponse::SharedDtor() {
  if (battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battle_tag_;
  }
  if (full_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete full_name_;
  }
  if (this != default_instance_) {
    delete blob_;
    delete id_;
    delete parental_control_info_;
  }
}

void GetAccountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountResponse_descriptor_;
}

const GetAccountResponse& GetAccountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetAccountResponse* GetAccountResponse::default_instance_ = NULL;

GetAccountResponse* GetAccountResponse::New() const {
  return new GetAccountResponse;
}

void GetAccountResponse::Clear() {
  if (_has_bits_[0 / 32] & 91) {
    if (has_blob()) {
      if (blob_ != NULL) blob_->::Battlenet::account::AccountBlob::Clear();
    }
    if (has_id()) {
      if (id_ != NULL) id_->::Battlenet::account::AccountId::Clear();
    }
    if (has_battle_tag()) {
      if (battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battle_tag_->clear();
      }
    }
    if (has_full_name()) {
      if (full_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        full_name_->clear();
      }
    }
    if (has_parental_control_info()) {
      if (parental_control_info_ != NULL) parental_control_info_->::Battlenet::account::ParentalControlInfo::Clear();
    }
  }
  email_.Clear();
  links_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetAccountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.account.AccountBlob blob = 11;
      case 11: {
        if (tag == 90) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blob()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_id;
        break;
      }

      // optional .Battlenet.account.AccountId id = 12;
      case 12: {
        if (tag == 98) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_email;
        break;
      }

      // repeated string email = 13;
      case 13: {
        if (tag == 106) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email(this->email_size() - 1).data(),
            this->email(this->email_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_email;
        if (input->ExpectTag(114)) goto parse_battle_tag;
        break;
      }

      // optional string battle_tag = 14;
      case 14: {
        if (tag == 114) {
         parse_battle_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battle_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->battle_tag().data(), this->battle_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "battle_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_full_name;
        break;
      }

      // optional string full_name = 15;
      case 15: {
        if (tag == 122) {
         parse_full_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->full_name().data(), this->full_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "full_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_links;
        break;
      }

      // repeated .Battlenet.account.GameAccountLink links = 16;
      case 16: {
        if (tag == 130) {
         parse_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_links;
        if (input->ExpectTag(138)) goto parse_parental_control_info;
        break;
      }

      // optional .Battlenet.account.ParentalControlInfo parental_control_info = 17;
      case 17: {
        if (tag == 138) {
         parse_parental_control_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parental_control_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetAccountResponse)
  return false;
#undef DO_
}

void GetAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetAccountResponse)
  // optional .Battlenet.account.AccountBlob blob = 11;
  if (has_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->blob(), output);
  }

  // optional .Battlenet.account.AccountId id = 12;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->id(), output);
  }

  // repeated string email = 13;
  for (int i = 0; i < this->email_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->email(i).data(), this->email(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "email");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->email(i), output);
  }

  // optional string battle_tag = 14;
  if (has_battle_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battle_tag().data(), this->battle_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battle_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->battle_tag(), output);
  }

  // optional string full_name = 15;
  if (has_full_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "full_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->full_name(), output);
  }

  // repeated .Battlenet.account.GameAccountLink links = 16;
  for (int i = 0; i < this->links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->links(i), output);
  }

  // optional .Battlenet.account.ParentalControlInfo parental_control_info = 17;
  if (has_parental_control_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->parental_control_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetAccountResponse)
}

::google::protobuf::uint8* GetAccountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetAccountResponse)
  // optional .Battlenet.account.AccountBlob blob = 11;
  if (has_blob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->blob(), target);
  }

  // optional .Battlenet.account.AccountId id = 12;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->id(), target);
  }

  // repeated string email = 13;
  for (int i = 0; i < this->email_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email(i).data(), this->email(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->email(i), target);
  }

  // optional string battle_tag = 14;
  if (has_battle_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battle_tag().data(), this->battle_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battle_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->battle_tag(), target);
  }

  // optional string full_name = 15;
  if (has_full_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "full_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->full_name(), target);
  }

  // repeated .Battlenet.account.GameAccountLink links = 16;
  for (int i = 0; i < this->links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->links(i), target);
  }

  // optional .Battlenet.account.ParentalControlInfo parental_control_info = 17;
  if (has_parental_control_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->parental_control_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetAccountResponse)
  return target;
}

int GetAccountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.account.AccountBlob blob = 11;
    if (has_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blob());
    }

    // optional .Battlenet.account.AccountId id = 12;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional string battle_tag = 14;
    if (has_battle_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battle_tag());
    }

    // optional string full_name = 15;
    if (has_full_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_name());
    }

    // optional .Battlenet.account.ParentalControlInfo parental_control_info = 17;
    if (has_parental_control_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parental_control_info());
    }

  }
  // repeated string email = 13;
  total_size += 1 * this->email_size();
  for (int i = 0; i < this->email_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->email(i));
  }

  // repeated .Battlenet.account.GameAccountLink links = 16;
  total_size += 2 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountResponse::MergeFrom(const GetAccountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  email_.MergeFrom(from.email_);
  links_.MergeFrom(from.links_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blob()) {
      mutable_blob()->::Battlenet::account::AccountBlob::MergeFrom(from.blob());
    }
    if (from.has_id()) {
      mutable_id()->::Battlenet::account::AccountId::MergeFrom(from.id());
    }
    if (from.has_battle_tag()) {
      set_battle_tag(from.battle_tag());
    }
    if (from.has_full_name()) {
      set_full_name(from.full_name());
    }
    if (from.has_parental_control_info()) {
      mutable_parental_control_info()->::Battlenet::account::ParentalControlInfo::MergeFrom(from.parental_control_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountResponse::CopyFrom(const GetAccountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountResponse::IsInitialized() const {

  if (has_blob()) {
    if (!this->blob().IsInitialized()) return false;
  }
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->links())) return false;
  return true;
}

void GetAccountResponse::Swap(GetAccountResponse* other) {
  if (other != this) {
    std::swap(blob_, other->blob_);
    std::swap(id_, other->id_);
    email_.Swap(&other->email_);
    std::swap(battle_tag_, other->battle_tag_);
    std::swap(full_name_, other->full_name_);
    links_.Swap(&other->links_);
    std::swap(parental_control_info_, other->parental_control_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountResponse_descriptor_;
  metadata.reflection = GetAccountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGameAccountRequest::kAccountFieldNumber;
const int CreateGameAccountRequest::kRegionFieldNumber;
const int CreateGameAccountRequest::kProgramFieldNumber;
const int CreateGameAccountRequest::kRealmPermissionsFieldNumber;
#endif  // !_MSC_VER

CreateGameAccountRequest::CreateGameAccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.CreateGameAccountRequest)
}

void CreateGameAccountRequest::InitAsDefaultInstance() {
  account_ = const_cast< ::Battlenet::account::AccountId*>(&::Battlenet::account::AccountId::default_instance());
}

CreateGameAccountRequest::CreateGameAccountRequest(const CreateGameAccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.CreateGameAccountRequest)
}

void CreateGameAccountRequest::SharedCtor() {
  _cached_size_ = 0;
  account_ = NULL;
  region_ = 0u;
  program_ = 0u;
  realm_permissions_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGameAccountRequest::~CreateGameAccountRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.CreateGameAccountRequest)
  SharedDtor();
}

void CreateGameAccountRequest::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
  }
}

void CreateGameAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGameAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGameAccountRequest_descriptor_;
}

const CreateGameAccountRequest& CreateGameAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

CreateGameAccountRequest* CreateGameAccountRequest::default_instance_ = NULL;

CreateGameAccountRequest* CreateGameAccountRequest::New() const {
  return new CreateGameAccountRequest;
}

void CreateGameAccountRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateGameAccountRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(region_, program_);
    if (has_account()) {
      if (account_ != NULL) account_->::Battlenet::account::AccountId::Clear();
    }
    realm_permissions_ = 1u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGameAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.CreateGameAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.account.AccountId account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }

      // optional uint32 region = 2;
      case 2: {
        if (tag == 16) {
         parse_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_program;
        break;
      }

      // optional fixed32 program = 3;
      case 3: {
        if (tag == 29) {
         parse_program:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_)));
          set_has_program();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_realm_permissions;
        break;
      }

      // optional uint32 realm_permissions = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_realm_permissions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &realm_permissions_)));
          set_has_realm_permissions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.CreateGameAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.CreateGameAccountRequest)
  return false;
#undef DO_
}

void CreateGameAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.CreateGameAccountRequest)
  // optional .Battlenet.account.AccountId account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->account(), output);
  }

  // optional uint32 region = 2;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->region(), output);
  }

  // optional fixed32 program = 3;
  if (has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->program(), output);
  }

  // optional uint32 realm_permissions = 4 [default = 1];
  if (has_realm_permissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->realm_permissions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.CreateGameAccountRequest)
}

::google::protobuf::uint8* CreateGameAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.CreateGameAccountRequest)
  // optional .Battlenet.account.AccountId account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account(), target);
  }

  // optional uint32 region = 2;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->region(), target);
  }

  // optional fixed32 program = 3;
  if (has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->program(), target);
  }

  // optional uint32 realm_permissions = 4 [default = 1];
  if (has_realm_permissions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->realm_permissions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.CreateGameAccountRequest)
  return target;
}

int CreateGameAccountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.account.AccountId account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

    // optional uint32 region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // optional fixed32 program = 3;
    if (has_program()) {
      total_size += 1 + 4;
    }

    // optional uint32 realm_permissions = 4 [default = 1];
    if (has_realm_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->realm_permissions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGameAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGameAccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGameAccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGameAccountRequest::MergeFrom(const CreateGameAccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      mutable_account()->::Battlenet::account::AccountId::MergeFrom(from.account());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_program()) {
      set_program(from.program());
    }
    if (from.has_realm_permissions()) {
      set_realm_permissions(from.realm_permissions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGameAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGameAccountRequest::CopyFrom(const CreateGameAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGameAccountRequest::IsInitialized() const {

  if (has_account()) {
    if (!this->account().IsInitialized()) return false;
  }
  return true;
}

void CreateGameAccountRequest::Swap(CreateGameAccountRequest* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(region_, other->region_);
    std::swap(program_, other->program_);
    std::swap(realm_permissions_, other->realm_permissions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateGameAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGameAccountRequest_descriptor_;
  metadata.reflection = CreateGameAccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheExpireRequest::kAccountFieldNumber;
const int CacheExpireRequest::kGameAccountFieldNumber;
const int CacheExpireRequest::kEmailFieldNumber;
#endif  // !_MSC_VER

CacheExpireRequest::CacheExpireRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.CacheExpireRequest)
}

void CacheExpireRequest::InitAsDefaultInstance() {
}

CacheExpireRequest::CacheExpireRequest(const CacheExpireRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.CacheExpireRequest)
}

void CacheExpireRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheExpireRequest::~CacheExpireRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.CacheExpireRequest)
  SharedDtor();
}

void CacheExpireRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CacheExpireRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheExpireRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheExpireRequest_descriptor_;
}

const CacheExpireRequest& CacheExpireRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

CacheExpireRequest* CacheExpireRequest::default_instance_ = NULL;

CacheExpireRequest* CacheExpireRequest::New() const {
  return new CacheExpireRequest;
}

void CacheExpireRequest::Clear() {
  account_.Clear();
  game_account_.Clear();
  email_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheExpireRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.CacheExpireRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Battlenet.account.AccountId account = 1;
      case 1: {
        if (tag == 10) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_account;
        if (input->ExpectTag(18)) goto parse_game_account;
        break;
      }

      // repeated .Battlenet.account.GameAccountHandle game_account = 2;
      case 2: {
        if (tag == 18) {
         parse_game_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_game_account;
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // repeated string email = 3;
      case 3: {
        if (tag == 26) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email(this->email_size() - 1).data(),
            this->email(this->email_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_email;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.CacheExpireRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.CacheExpireRequest)
  return false;
#undef DO_
}

void CacheExpireRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.CacheExpireRequest)
  // repeated .Battlenet.account.AccountId account = 1;
  for (int i = 0; i < this->account_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->account(i), output);
  }

  // repeated .Battlenet.account.GameAccountHandle game_account = 2;
  for (int i = 0; i < this->game_account_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->game_account(i), output);
  }

  // repeated string email = 3;
  for (int i = 0; i < this->email_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->email(i).data(), this->email(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "email");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->email(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.CacheExpireRequest)
}

::google::protobuf::uint8* CacheExpireRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.CacheExpireRequest)
  // repeated .Battlenet.account.AccountId account = 1;
  for (int i = 0; i < this->account_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account(i), target);
  }

  // repeated .Battlenet.account.GameAccountHandle game_account = 2;
  for (int i = 0; i < this->game_account_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->game_account(i), target);
  }

  // repeated string email = 3;
  for (int i = 0; i < this->email_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email(i).data(), this->email(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->email(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.CacheExpireRequest)
  return target;
}

int CacheExpireRequest::ByteSize() const {
  int total_size = 0;

  // repeated .Battlenet.account.AccountId account = 1;
  total_size += 1 * this->account_size();
  for (int i = 0; i < this->account_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->account(i));
  }

  // repeated .Battlenet.account.GameAccountHandle game_account = 2;
  total_size += 1 * this->game_account_size();
  for (int i = 0; i < this->game_account_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_account(i));
  }

  // repeated string email = 3;
  total_size += 1 * this->email_size();
  for (int i = 0; i < this->email_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->email(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheExpireRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheExpireRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheExpireRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheExpireRequest::MergeFrom(const CacheExpireRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_.MergeFrom(from.account_);
  game_account_.MergeFrom(from.game_account_);
  email_.MergeFrom(from.email_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheExpireRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheExpireRequest::CopyFrom(const CacheExpireRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheExpireRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->account())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->game_account())) return false;
  return true;
}

void CacheExpireRequest::Swap(CacheExpireRequest* other) {
  if (other != this) {
    account_.Swap(&other->account_);
    game_account_.Swap(&other->game_account_);
    email_.Swap(&other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheExpireRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheExpireRequest_descriptor_;
  metadata.reflection = CacheExpireRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CredentialUpdateRequest::kAccountFieldNumber;
const int CredentialUpdateRequest::kOldCredentialsFieldNumber;
const int CredentialUpdateRequest::kNewCredentialsFieldNumber;
const int CredentialUpdateRequest::kRegionFieldNumber;
#endif  // !_MSC_VER

CredentialUpdateRequest::CredentialUpdateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.CredentialUpdateRequest)
}

void CredentialUpdateRequest::InitAsDefaultInstance() {
  account_ = const_cast< ::Battlenet::account::AccountId*>(&::Battlenet::account::AccountId::default_instance());
}

CredentialUpdateRequest::CredentialUpdateRequest(const CredentialUpdateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.CredentialUpdateRequest)
}

void CredentialUpdateRequest::SharedCtor() {
  _cached_size_ = 0;
  account_ = NULL;
  region_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CredentialUpdateRequest::~CredentialUpdateRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.CredentialUpdateRequest)
  SharedDtor();
}

void CredentialUpdateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
  }
}

void CredentialUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CredentialUpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CredentialUpdateRequest_descriptor_;
}

const CredentialUpdateRequest& CredentialUpdateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

CredentialUpdateRequest* CredentialUpdateRequest::default_instance_ = NULL;

CredentialUpdateRequest* CredentialUpdateRequest::New() const {
  return new CredentialUpdateRequest;
}

void CredentialUpdateRequest::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    if (has_account()) {
      if (account_ != NULL) account_->::Battlenet::account::AccountId::Clear();
    }
    region_ = 0u;
  }
  old_credentials_.Clear();
  new_credentials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CredentialUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.CredentialUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Battlenet.account.AccountId account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_old_credentials;
        break;
      }

      // repeated .Battlenet.account.AccountCredential old_credentials = 2;
      case 2: {
        if (tag == 18) {
         parse_old_credentials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_old_credentials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_old_credentials;
        if (input->ExpectTag(26)) goto parse_new_credentials;
        break;
      }

      // repeated .Battlenet.account.AccountCredential new_credentials = 3;
      case 3: {
        if (tag == 26) {
         parse_new_credentials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_credentials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_new_credentials;
        if (input->ExpectTag(32)) goto parse_region;
        break;
      }

      // optional uint32 region = 4;
      case 4: {
        if (tag == 32) {
         parse_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.CredentialUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.CredentialUpdateRequest)
  return false;
#undef DO_
}

void CredentialUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.CredentialUpdateRequest)
  // required .Battlenet.account.AccountId account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->account(), output);
  }

  // repeated .Battlenet.account.AccountCredential old_credentials = 2;
  for (int i = 0; i < this->old_credentials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->old_credentials(i), output);
  }

  // repeated .Battlenet.account.AccountCredential new_credentials = 3;
  for (int i = 0; i < this->new_credentials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->new_credentials(i), output);
  }

  // optional uint32 region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->region(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.CredentialUpdateRequest)
}

::google::protobuf::uint8* CredentialUpdateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.CredentialUpdateRequest)
  // required .Battlenet.account.AccountId account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account(), target);
  }

  // repeated .Battlenet.account.AccountCredential old_credentials = 2;
  for (int i = 0; i < this->old_credentials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_credentials(i), target);
  }

  // repeated .Battlenet.account.AccountCredential new_credentials = 3;
  for (int i = 0; i < this->new_credentials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_credentials(i), target);
  }

  // optional uint32 region = 4;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->region(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.CredentialUpdateRequest)
  return target;
}

int CredentialUpdateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Battlenet.account.AccountId account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

    // optional uint32 region = 4;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

  }
  // repeated .Battlenet.account.AccountCredential old_credentials = 2;
  total_size += 1 * this->old_credentials_size();
  for (int i = 0; i < this->old_credentials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->old_credentials(i));
  }

  // repeated .Battlenet.account.AccountCredential new_credentials = 3;
  total_size += 1 * this->new_credentials_size();
  for (int i = 0; i < this->new_credentials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_credentials(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CredentialUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CredentialUpdateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CredentialUpdateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CredentialUpdateRequest::MergeFrom(const CredentialUpdateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  old_credentials_.MergeFrom(from.old_credentials_);
  new_credentials_.MergeFrom(from.new_credentials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      mutable_account()->::Battlenet::account::AccountId::MergeFrom(from.account());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CredentialUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CredentialUpdateRequest::CopyFrom(const CredentialUpdateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CredentialUpdateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_account()) {
    if (!this->account().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->old_credentials())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->new_credentials())) return false;
  return true;
}

void CredentialUpdateRequest::Swap(CredentialUpdateRequest* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    old_credentials_.Swap(&other->old_credentials_);
    new_credentials_.Swap(&other->new_credentials_);
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CredentialUpdateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CredentialUpdateRequest_descriptor_;
  metadata.reflection = CredentialUpdateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CredentialUpdateResponse::CredentialUpdateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.CredentialUpdateResponse)
}

void CredentialUpdateResponse::InitAsDefaultInstance() {
}

CredentialUpdateResponse::CredentialUpdateResponse(const CredentialUpdateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.CredentialUpdateResponse)
}

void CredentialUpdateResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CredentialUpdateResponse::~CredentialUpdateResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.account.CredentialUpdateResponse)
  SharedDtor();
}

void CredentialUpdateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CredentialUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CredentialUpdateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CredentialUpdateResponse_descriptor_;
}

const CredentialUpdateResponse& CredentialUpdateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

CredentialUpdateResponse* CredentialUpdateResponse::default_instance_ = NULL;

CredentialUpdateResponse* CredentialUpdateResponse::New() const {
  return new CredentialUpdateResponse;
}

void CredentialUpdateResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CredentialUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.CredentialUpdateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.CredentialUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.CredentialUpdateResponse)
  return false;
#undef DO_
}

void CredentialUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.CredentialUpdateResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.CredentialUpdateResponse)
}

::google::protobuf::uint8* CredentialUpdateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.CredentialUpdateResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.CredentialUpdateResponse)
  return target;
}

int CredentialUpdateResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CredentialUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CredentialUpdateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CredentialUpdateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CredentialUpdateResponse::MergeFrom(const CredentialUpdateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CredentialUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CredentialUpdateResponse::CopyFrom(const CredentialUpdateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CredentialUpdateResponse::IsInitialized() const {

  return true;
}

void CredentialUpdateResponse::Swap(CredentialUpdateResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CredentialUpdateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CredentialUpdateResponse_descriptor_;
  metadata.reflection = CredentialUpdateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountFlagUpdateRequest::kAccountFieldNumber;
const int AccountFlagUpdateRequest::kRegionFieldNumber;
const int AccountFlagUpdateRequest::kFlagFieldNumber;
const int AccountFlagUpdateRequest::kActiveFieldNumber;
#endif  // !_MSC_VER

AccountFlagUpdateRequest::AccountFlagUpdateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountFlagUpdateRequest)
}

void AccountFlagUpdateRequest::InitAsDefaultInstance() {
  account_ = const_cast< ::Battlenet::account::AccountId*>(&::Battlenet::account::AccountId::default_instance());
}

AccountFlagUpdateRequest::AccountFlagUpdateRequest(const AccountFlagUpdateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountFlagUpdateRequest)
}

void AccountFlagUpdateRequest::SharedCtor() {
  _cached_size_ = 0;
  account_ = NULL;
  region_ = 0u;
  flag_ = GOOGLE_ULONGLONG(0);
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountFlagUpdateRequest::~AccountFlagUpdateRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountFlagUpdateRequest)
  SharedDtor();
}

void AccountFlagUpdateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
  }
}

void AccountFlagUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountFlagUpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountFlagUpdateRequest_descriptor_;
}

const AccountFlagUpdateRequest& AccountFlagUpdateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

AccountFlagUpdateRequest* AccountFlagUpdateRequest::default_instance_ = NULL;

AccountFlagUpdateRequest* AccountFlagUpdateRequest::New() const {
  return new AccountFlagUpdateRequest;
}

void AccountFlagUpdateRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AccountFlagUpdateRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(flag_, active_);
    if (has_account()) {
      if (account_ != NULL) account_->::Battlenet::account::AccountId::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountFlagUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.AccountFlagUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.account.AccountId account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }

      // optional uint32 region = 2;
      case 2: {
        if (tag == 16) {
         parse_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional uint64 flag = 3;
      case 3: {
        if (tag == 24) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_active;
        break;
      }

      // optional bool active = 4;
      case 4: {
        if (tag == 32) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.AccountFlagUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.AccountFlagUpdateRequest)
  return false;
#undef DO_
}

void AccountFlagUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.AccountFlagUpdateRequest)
  // optional .Battlenet.account.AccountId account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->account(), output);
  }

  // optional uint32 region = 2;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->region(), output);
  }

  // optional uint64 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->flag(), output);
  }

  // optional bool active = 4;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.AccountFlagUpdateRequest)
}

::google::protobuf::uint8* AccountFlagUpdateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.AccountFlagUpdateRequest)
  // optional .Battlenet.account.AccountId account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account(), target);
  }

  // optional uint32 region = 2;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->region(), target);
  }

  // optional uint64 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->flag(), target);
  }

  // optional bool active = 4;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.AccountFlagUpdateRequest)
  return target;
}

int AccountFlagUpdateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.account.AccountId account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

    // optional uint32 region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // optional uint64 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flag());
    }

    // optional bool active = 4;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountFlagUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountFlagUpdateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountFlagUpdateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountFlagUpdateRequest::MergeFrom(const AccountFlagUpdateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      mutable_account()->::Battlenet::account::AccountId::MergeFrom(from.account());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountFlagUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountFlagUpdateRequest::CopyFrom(const AccountFlagUpdateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountFlagUpdateRequest::IsInitialized() const {

  if (has_account()) {
    if (!this->account().IsInitialized()) return false;
  }
  return true;
}

void AccountFlagUpdateRequest::Swap(AccountFlagUpdateRequest* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(region_, other->region_);
    std::swap(flag_, other->flag_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountFlagUpdateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountFlagUpdateRequest_descriptor_;
  metadata.reflection = AccountFlagUpdateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAccountFlagUpdateRequest::kGameAccountFieldNumber;
const int GameAccountFlagUpdateRequest::kFlagFieldNumber;
const int GameAccountFlagUpdateRequest::kActiveFieldNumber;
#endif  // !_MSC_VER

GameAccountFlagUpdateRequest::GameAccountFlagUpdateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameAccountFlagUpdateRequest)
}

void GameAccountFlagUpdateRequest::InitAsDefaultInstance() {
  game_account_ = const_cast< ::Battlenet::account::GameAccountHandle*>(&::Battlenet::account::GameAccountHandle::default_instance());
}

GameAccountFlagUpdateRequest::GameAccountFlagUpdateRequest(const GameAccountFlagUpdateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameAccountFlagUpdateRequest)
}

void GameAccountFlagUpdateRequest::SharedCtor() {
  _cached_size_ = 0;
  game_account_ = NULL;
  flag_ = GOOGLE_ULONGLONG(0);
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAccountFlagUpdateRequest::~GameAccountFlagUpdateRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameAccountFlagUpdateRequest)
  SharedDtor();
}

void GameAccountFlagUpdateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete game_account_;
  }
}

void GameAccountFlagUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAccountFlagUpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAccountFlagUpdateRequest_descriptor_;
}

const GameAccountFlagUpdateRequest& GameAccountFlagUpdateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GameAccountFlagUpdateRequest* GameAccountFlagUpdateRequest::default_instance_ = NULL;

GameAccountFlagUpdateRequest* GameAccountFlagUpdateRequest::New() const {
  return new GameAccountFlagUpdateRequest;
}

void GameAccountFlagUpdateRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameAccountFlagUpdateRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(flag_, active_);
    if (has_game_account()) {
      if (game_account_ != NULL) game_account_->::Battlenet::account::GameAccountHandle::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameAccountFlagUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GameAccountFlagUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.account.GameAccountHandle game_account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint64 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }

      // optional bool active = 3;
      case 3: {
        if (tag == 24) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GameAccountFlagUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GameAccountFlagUpdateRequest)
  return false;
#undef DO_
}

void GameAccountFlagUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GameAccountFlagUpdateRequest)
  // optional .Battlenet.account.GameAccountHandle game_account = 1;
  if (has_game_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->game_account(), output);
  }

  // optional uint64 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->flag(), output);
  }

  // optional bool active = 3;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GameAccountFlagUpdateRequest)
}

::google::protobuf::uint8* GameAccountFlagUpdateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GameAccountFlagUpdateRequest)
  // optional .Battlenet.account.GameAccountHandle game_account = 1;
  if (has_game_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_account(), target);
  }

  // optional uint64 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->flag(), target);
  }

  // optional bool active = 3;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GameAccountFlagUpdateRequest)
  return target;
}

int GameAccountFlagUpdateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.account.GameAccountHandle game_account = 1;
    if (has_game_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account());
    }

    // optional uint64 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flag());
    }

    // optional bool active = 3;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAccountFlagUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameAccountFlagUpdateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameAccountFlagUpdateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameAccountFlagUpdateRequest::MergeFrom(const GameAccountFlagUpdateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_account()) {
      mutable_game_account()->::Battlenet::account::GameAccountHandle::MergeFrom(from.game_account());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameAccountFlagUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountFlagUpdateRequest::CopyFrom(const GameAccountFlagUpdateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountFlagUpdateRequest::IsInitialized() const {

  if (has_game_account()) {
    if (!this->game_account().IsInitialized()) return false;
  }
  return true;
}

void GameAccountFlagUpdateRequest::Swap(GameAccountFlagUpdateRequest* other) {
  if (other != this) {
    std::swap(game_account_, other->game_account_);
    std::swap(flag_, other->flag_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameAccountFlagUpdateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAccountFlagUpdateRequest_descriptor_;
  metadata.reflection = GameAccountFlagUpdateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionUpdateRequest::kRefFieldNumber;
#endif  // !_MSC_VER

SubscriptionUpdateRequest::SubscriptionUpdateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.SubscriptionUpdateRequest)
}

void SubscriptionUpdateRequest::InitAsDefaultInstance() {
}

SubscriptionUpdateRequest::SubscriptionUpdateRequest(const SubscriptionUpdateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.SubscriptionUpdateRequest)
}

void SubscriptionUpdateRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionUpdateRequest::~SubscriptionUpdateRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.SubscriptionUpdateRequest)
  SharedDtor();
}

void SubscriptionUpdateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscriptionUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionUpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionUpdateRequest_descriptor_;
}

const SubscriptionUpdateRequest& SubscriptionUpdateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

SubscriptionUpdateRequest* SubscriptionUpdateRequest::default_instance_ = NULL;

SubscriptionUpdateRequest* SubscriptionUpdateRequest::New() const {
  return new SubscriptionUpdateRequest;
}

void SubscriptionUpdateRequest::Clear() {
  ref_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.SubscriptionUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Battlenet.account.SubscriberReference ref = 2;
      case 2: {
        if (tag == 18) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ref;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.SubscriptionUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.SubscriptionUpdateRequest)
  return false;
#undef DO_
}

void SubscriptionUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.SubscriptionUpdateRequest)
  // repeated .Battlenet.account.SubscriberReference ref = 2;
  for (int i = 0; i < this->ref_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->ref(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.SubscriptionUpdateRequest)
}

::google::protobuf::uint8* SubscriptionUpdateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.SubscriptionUpdateRequest)
  // repeated .Battlenet.account.SubscriberReference ref = 2;
  for (int i = 0; i < this->ref_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ref(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.SubscriptionUpdateRequest)
  return target;
}

int SubscriptionUpdateRequest::ByteSize() const {
  int total_size = 0;

  // repeated .Battlenet.account.SubscriberReference ref = 2;
  total_size += 1 * this->ref_size();
  for (int i = 0; i < this->ref_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionUpdateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionUpdateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionUpdateRequest::MergeFrom(const SubscriptionUpdateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  ref_.MergeFrom(from.ref_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionUpdateRequest::CopyFrom(const SubscriptionUpdateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionUpdateRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ref())) return false;
  return true;
}

void SubscriptionUpdateRequest::Swap(SubscriptionUpdateRequest* other) {
  if (other != this) {
    ref_.Swap(&other->ref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionUpdateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionUpdateRequest_descriptor_;
  metadata.reflection = SubscriptionUpdateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionUpdateResponse::kRefFieldNumber;
#endif  // !_MSC_VER

SubscriptionUpdateResponse::SubscriptionUpdateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.SubscriptionUpdateResponse)
}

void SubscriptionUpdateResponse::InitAsDefaultInstance() {
}

SubscriptionUpdateResponse::SubscriptionUpdateResponse(const SubscriptionUpdateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.SubscriptionUpdateResponse)
}

void SubscriptionUpdateResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionUpdateResponse::~SubscriptionUpdateResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.account.SubscriptionUpdateResponse)
  SharedDtor();
}

void SubscriptionUpdateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscriptionUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionUpdateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionUpdateResponse_descriptor_;
}

const SubscriptionUpdateResponse& SubscriptionUpdateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

SubscriptionUpdateResponse* SubscriptionUpdateResponse::default_instance_ = NULL;

SubscriptionUpdateResponse* SubscriptionUpdateResponse::New() const {
  return new SubscriptionUpdateResponse;
}

void SubscriptionUpdateResponse::Clear() {
  ref_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.SubscriptionUpdateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Battlenet.account.SubscriberReference ref = 1;
      case 1: {
        if (tag == 10) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ref;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.SubscriptionUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.SubscriptionUpdateResponse)
  return false;
#undef DO_
}

void SubscriptionUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.SubscriptionUpdateResponse)
  // repeated .Battlenet.account.SubscriberReference ref = 1;
  for (int i = 0; i < this->ref_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->ref(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.SubscriptionUpdateResponse)
}

::google::protobuf::uint8* SubscriptionUpdateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.SubscriptionUpdateResponse)
  // repeated .Battlenet.account.SubscriberReference ref = 1;
  for (int i = 0; i < this->ref_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ref(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.SubscriptionUpdateResponse)
  return target;
}

int SubscriptionUpdateResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Battlenet.account.SubscriberReference ref = 1;
  total_size += 1 * this->ref_size();
  for (int i = 0; i < this->ref_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionUpdateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionUpdateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionUpdateResponse::MergeFrom(const SubscriptionUpdateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ref_.MergeFrom(from.ref_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionUpdateResponse::CopyFrom(const SubscriptionUpdateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionUpdateResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ref())) return false;
  return true;
}

void SubscriptionUpdateResponse::Swap(SubscriptionUpdateResponse* other) {
  if (other != this) {
    ref_.Swap(&other->ref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionUpdateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionUpdateResponse_descriptor_;
  metadata.reflection = SubscriptionUpdateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsIgrAddressRequest::kClientAddressFieldNumber;
const int IsIgrAddressRequest::kRegionFieldNumber;
#endif  // !_MSC_VER

IsIgrAddressRequest::IsIgrAddressRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.IsIgrAddressRequest)
}

void IsIgrAddressRequest::InitAsDefaultInstance() {
}

IsIgrAddressRequest::IsIgrAddressRequest(const IsIgrAddressRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.IsIgrAddressRequest)
}

void IsIgrAddressRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsIgrAddressRequest::~IsIgrAddressRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.IsIgrAddressRequest)
  SharedDtor();
}

void IsIgrAddressRequest::SharedDtor() {
  if (client_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_address_;
  }
  if (this != default_instance_) {
  }
}

void IsIgrAddressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsIgrAddressRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsIgrAddressRequest_descriptor_;
}

const IsIgrAddressRequest& IsIgrAddressRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

IsIgrAddressRequest* IsIgrAddressRequest::default_instance_ = NULL;

IsIgrAddressRequest* IsIgrAddressRequest::New() const {
  return new IsIgrAddressRequest;
}

void IsIgrAddressRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_client_address()) {
      if (client_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_address_->clear();
      }
    }
    region_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsIgrAddressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.IsIgrAddressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string client_address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_address().data(), this->client_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }

      // optional uint32 region = 2;
      case 2: {
        if (tag == 16) {
         parse_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.IsIgrAddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.IsIgrAddressRequest)
  return false;
#undef DO_
}

void IsIgrAddressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.IsIgrAddressRequest)
  // optional string client_address = 1;
  if (has_client_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_address().data(), this->client_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_address(), output);
  }

  // optional uint32 region = 2;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->region(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.IsIgrAddressRequest)
}

::google::protobuf::uint8* IsIgrAddressRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.IsIgrAddressRequest)
  // optional string client_address = 1;
  if (has_client_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_address().data(), this->client_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_address(), target);
  }

  // optional uint32 region = 2;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->region(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.IsIgrAddressRequest)
  return target;
}

int IsIgrAddressRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string client_address = 1;
    if (has_client_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_address());
    }

    // optional uint32 region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsIgrAddressRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsIgrAddressRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsIgrAddressRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsIgrAddressRequest::MergeFrom(const IsIgrAddressRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_address()) {
      set_client_address(from.client_address());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsIgrAddressRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsIgrAddressRequest::CopyFrom(const IsIgrAddressRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsIgrAddressRequest::IsInitialized() const {

  return true;
}

void IsIgrAddressRequest::Swap(IsIgrAddressRequest* other) {
  if (other != this) {
    std::swap(client_address_, other->client_address_);
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsIgrAddressRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsIgrAddressRequest_descriptor_;
  metadata.reflection = IsIgrAddressRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountServiceRegion::kIdFieldNumber;
const int AccountServiceRegion::kShardFieldNumber;
#endif  // !_MSC_VER

AccountServiceRegion::AccountServiceRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountServiceRegion)
}

void AccountServiceRegion::InitAsDefaultInstance() {
}

AccountServiceRegion::AccountServiceRegion(const AccountServiceRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountServiceRegion)
}

void AccountServiceRegion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  shard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountServiceRegion::~AccountServiceRegion() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountServiceRegion)
  SharedDtor();
}

void AccountServiceRegion::SharedDtor() {
  if (shard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shard_;
  }
  if (this != default_instance_) {
  }
}

void AccountServiceRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountServiceRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountServiceRegion_descriptor_;
}

const AccountServiceRegion& AccountServiceRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

AccountServiceRegion* AccountServiceRegion::default_instance_ = NULL;

AccountServiceRegion* AccountServiceRegion::New() const {
  return new AccountServiceRegion;
}

void AccountServiceRegion::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_shard()) {
      if (shard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shard_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountServiceRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.AccountServiceRegion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shard;
        break;
      }

      // required string shard = 2;
      case 2: {
        if (tag == 18) {
         parse_shard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shard().data(), this->shard().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shard");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.AccountServiceRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.AccountServiceRegion)
  return false;
#undef DO_
}

void AccountServiceRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.AccountServiceRegion)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string shard = 2;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shard().data(), this->shard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->shard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.AccountServiceRegion)
}

::google::protobuf::uint8* AccountServiceRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.AccountServiceRegion)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string shard = 2;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shard().data(), this->shard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->shard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.AccountServiceRegion)
  return target;
}

int AccountServiceRegion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string shard = 2;
    if (has_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountServiceRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountServiceRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountServiceRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountServiceRegion::MergeFrom(const AccountServiceRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountServiceRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountServiceRegion::CopyFrom(const AccountServiceRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountServiceRegion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AccountServiceRegion::Swap(AccountServiceRegion* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(shard_, other->shard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountServiceRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountServiceRegion_descriptor_;
  metadata.reflection = AccountServiceRegion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountServiceConfig::kRegionFieldNumber;
#endif  // !_MSC_VER

AccountServiceConfig::AccountServiceConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountServiceConfig)
}

void AccountServiceConfig::InitAsDefaultInstance() {
}

AccountServiceConfig::AccountServiceConfig(const AccountServiceConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountServiceConfig)
}

void AccountServiceConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountServiceConfig::~AccountServiceConfig() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountServiceConfig)
  SharedDtor();
}

void AccountServiceConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountServiceConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountServiceConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountServiceConfig_descriptor_;
}

const AccountServiceConfig& AccountServiceConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

AccountServiceConfig* AccountServiceConfig::default_instance_ = NULL;

AccountServiceConfig* AccountServiceConfig::New() const {
  return new AccountServiceConfig;
}

void AccountServiceConfig::Clear() {
  region_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountServiceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.AccountServiceConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Battlenet.account.AccountServiceRegion region = 1;
      case 1: {
        if (tag == 10) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_region;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.AccountServiceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.AccountServiceConfig)
  return false;
#undef DO_
}

void AccountServiceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.AccountServiceConfig)
  // repeated .Battlenet.account.AccountServiceRegion region = 1;
  for (int i = 0; i < this->region_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.AccountServiceConfig)
}

::google::protobuf::uint8* AccountServiceConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.AccountServiceConfig)
  // repeated .Battlenet.account.AccountServiceRegion region = 1;
  for (int i = 0; i < this->region_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.AccountServiceConfig)
  return target;
}

int AccountServiceConfig::ByteSize() const {
  int total_size = 0;

  // repeated .Battlenet.account.AccountServiceRegion region = 1;
  total_size += 1 * this->region_size();
  for (int i = 0; i < this->region_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountServiceConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountServiceConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountServiceConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountServiceConfig::MergeFrom(const AccountServiceConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_.MergeFrom(from.region_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountServiceConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountServiceConfig::CopyFrom(const AccountServiceConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountServiceConfig::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->region())) return false;
  return true;
}

void AccountServiceConfig::Swap(AccountServiceConfig* other) {
  if (other != this) {
    region_.Swap(&other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountServiceConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountServiceConfig_descriptor_;
  metadata.reflection = AccountServiceConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccountStateRequest::kEntityIdFieldNumber;
const int GetAccountStateRequest::kProgramFieldNumber;
const int GetAccountStateRequest::kRegionFieldNumber;
const int GetAccountStateRequest::kOptionsFieldNumber;
const int GetAccountStateRequest::kTagsFieldNumber;
#endif  // !_MSC_VER

GetAccountStateRequest::GetAccountStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetAccountStateRequest)
}

void GetAccountStateRequest::InitAsDefaultInstance() {
  entity_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  options_ = const_cast< ::Battlenet::account::AccountFieldOptions*>(&::Battlenet::account::AccountFieldOptions::default_instance());
  tags_ = const_cast< ::Battlenet::account::AccountFieldTags*>(&::Battlenet::account::AccountFieldTags::default_instance());
}

GetAccountStateRequest::GetAccountStateRequest(const GetAccountStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetAccountStateRequest)
}

void GetAccountStateRequest::SharedCtor() {
  _cached_size_ = 0;
  entity_id_ = NULL;
  program_ = 0u;
  region_ = 0u;
  options_ = NULL;
  tags_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountStateRequest::~GetAccountStateRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetAccountStateRequest)
  SharedDtor();
}

void GetAccountStateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete entity_id_;
    delete options_;
    delete tags_;
  }
}

void GetAccountStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountStateRequest_descriptor_;
}

const GetAccountStateRequest& GetAccountStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetAccountStateRequest* GetAccountStateRequest::default_instance_ = NULL;

GetAccountStateRequest* GetAccountStateRequest::New() const {
  return new GetAccountStateRequest;
}

void GetAccountStateRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetAccountStateRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(program_, region_);
    if (has_entity_id()) {
      if (entity_id_ != NULL) entity_id_->::Battlenet::EntityId::Clear();
    }
    if (has_options()) {
      if (options_ != NULL) options_->::Battlenet::account::AccountFieldOptions::Clear();
    }
    if (has_tags()) {
      if (tags_ != NULL) tags_->::Battlenet::account::AccountFieldTags::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetAccountStateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.EntityId entity_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_program;
        break;
      }

      // optional uint32 program = 2;
      case 2: {
        if (tag == 16) {
         parse_program:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &program_)));
          set_has_program();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_region;
        break;
      }

      // optional uint32 region = 3;
      case 3: {
        if (tag == 24) {
         parse_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_options;
        break;
      }

      // optional .Battlenet.account.AccountFieldOptions options = 10;
      case 10: {
        if (tag == 82) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_tags;
        break;
      }

      // optional .Battlenet.account.AccountFieldTags tags = 11;
      case 11: {
        if (tag == 90) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetAccountStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetAccountStateRequest)
  return false;
#undef DO_
}

void GetAccountStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetAccountStateRequest)
  // optional .Battlenet.EntityId entity_id = 1;
  if (has_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entity_id(), output);
  }

  // optional uint32 program = 2;
  if (has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->program(), output);
  }

  // optional uint32 region = 3;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->region(), output);
  }

  // optional .Battlenet.account.AccountFieldOptions options = 10;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->options(), output);
  }

  // optional .Battlenet.account.AccountFieldTags tags = 11;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->tags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetAccountStateRequest)
}

::google::protobuf::uint8* GetAccountStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetAccountStateRequest)
  // optional .Battlenet.EntityId entity_id = 1;
  if (has_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entity_id(), target);
  }

  // optional uint32 program = 2;
  if (has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->program(), target);
  }

  // optional uint32 region = 3;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->region(), target);
  }

  // optional .Battlenet.account.AccountFieldOptions options = 10;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->options(), target);
  }

  // optional .Battlenet.account.AccountFieldTags tags = 11;
  if (has_tags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetAccountStateRequest)
  return target;
}

int GetAccountStateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.EntityId entity_id = 1;
    if (has_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity_id());
    }

    // optional uint32 program = 2;
    if (has_program()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->program());
    }

    // optional uint32 region = 3;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // optional .Battlenet.account.AccountFieldOptions options = 10;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

    // optional .Battlenet.account.AccountFieldTags tags = 11;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountStateRequest::MergeFrom(const GetAccountStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity_id()) {
      mutable_entity_id()->::Battlenet::EntityId::MergeFrom(from.entity_id());
    }
    if (from.has_program()) {
      set_program(from.program());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_options()) {
      mutable_options()->::Battlenet::account::AccountFieldOptions::MergeFrom(from.options());
    }
    if (from.has_tags()) {
      mutable_tags()->::Battlenet::account::AccountFieldTags::MergeFrom(from.tags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountStateRequest::CopyFrom(const GetAccountStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountStateRequest::IsInitialized() const {

  if (has_entity_id()) {
    if (!this->entity_id().IsInitialized()) return false;
  }
  return true;
}

void GetAccountStateRequest::Swap(GetAccountStateRequest* other) {
  if (other != this) {
    std::swap(entity_id_, other->entity_id_);
    std::swap(program_, other->program_);
    std::swap(region_, other->region_);
    std::swap(options_, other->options_);
    std::swap(tags_, other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountStateRequest_descriptor_;
  metadata.reflection = GetAccountStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccountStateResponse::kStateFieldNumber;
const int GetAccountStateResponse::kTagsFieldNumber;
#endif  // !_MSC_VER

GetAccountStateResponse::GetAccountStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetAccountStateResponse)
}

void GetAccountStateResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::Battlenet::account::AccountState*>(&::Battlenet::account::AccountState::default_instance());
  tags_ = const_cast< ::Battlenet::account::AccountFieldTags*>(&::Battlenet::account::AccountFieldTags::default_instance());
}

GetAccountStateResponse::GetAccountStateResponse(const GetAccountStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetAccountStateResponse)
}

void GetAccountStateResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  tags_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountStateResponse::~GetAccountStateResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetAccountStateResponse)
  SharedDtor();
}

void GetAccountStateResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete tags_;
  }
}

void GetAccountStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountStateResponse_descriptor_;
}

const GetAccountStateResponse& GetAccountStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetAccountStateResponse* GetAccountStateResponse::default_instance_ = NULL;

GetAccountStateResponse* GetAccountStateResponse::New() const {
  return new GetAccountStateResponse;
}

void GetAccountStateResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_state()) {
      if (state_ != NULL) state_->::Battlenet::account::AccountState::Clear();
    }
    if (has_tags()) {
      if (tags_ != NULL) tags_->::Battlenet::account::AccountFieldTags::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetAccountStateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.account.AccountState state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // optional .Battlenet.account.AccountFieldTags tags = 2;
      case 2: {
        if (tag == 18) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetAccountStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetAccountStateResponse)
  return false;
#undef DO_
}

void GetAccountStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetAccountStateResponse)
  // optional .Battlenet.account.AccountState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->state(), output);
  }

  // optional .Battlenet.account.AccountFieldTags tags = 2;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->tags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetAccountStateResponse)
}

::google::protobuf::uint8* GetAccountStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetAccountStateResponse)
  // optional .Battlenet.account.AccountState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .Battlenet.account.AccountFieldTags tags = 2;
  if (has_tags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetAccountStateResponse)
  return target;
}

int GetAccountStateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.account.AccountState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .Battlenet.account.AccountFieldTags tags = 2;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountStateResponse::MergeFrom(const GetAccountStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::Battlenet::account::AccountState::MergeFrom(from.state());
    }
    if (from.has_tags()) {
      mutable_tags()->::Battlenet::account::AccountFieldTags::MergeFrom(from.tags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountStateResponse::CopyFrom(const GetAccountStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountStateResponse::IsInitialized() const {

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void GetAccountStateResponse::Swap(GetAccountStateResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(tags_, other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountStateResponse_descriptor_;
  metadata.reflection = GetAccountStateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGameAccountStateRequest::kAccountIdFieldNumber;
const int GetGameAccountStateRequest::kGameAccountIdFieldNumber;
const int GetGameAccountStateRequest::kOptionsFieldNumber;
const int GetGameAccountStateRequest::kTagsFieldNumber;
#endif  // !_MSC_VER

GetGameAccountStateRequest::GetGameAccountStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetGameAccountStateRequest)
}

void GetGameAccountStateRequest::InitAsDefaultInstance() {
  account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  game_account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  options_ = const_cast< ::Battlenet::account::GameAccountFieldOptions*>(&::Battlenet::account::GameAccountFieldOptions::default_instance());
  tags_ = const_cast< ::Battlenet::account::GameAccountFieldTags*>(&::Battlenet::account::GameAccountFieldTags::default_instance());
}

GetGameAccountStateRequest::GetGameAccountStateRequest(const GetGameAccountStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetGameAccountStateRequest)
}

void GetGameAccountStateRequest::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = NULL;
  game_account_id_ = NULL;
  options_ = NULL;
  tags_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGameAccountStateRequest::~GetGameAccountStateRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetGameAccountStateRequest)
  SharedDtor();
}

void GetGameAccountStateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete account_id_;
    delete game_account_id_;
    delete options_;
    delete tags_;
  }
}

void GetGameAccountStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGameAccountStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGameAccountStateRequest_descriptor_;
}

const GetGameAccountStateRequest& GetGameAccountStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetGameAccountStateRequest* GetGameAccountStateRequest::default_instance_ = NULL;

GetGameAccountStateRequest* GetGameAccountStateRequest::New() const {
  return new GetGameAccountStateRequest;
}

void GetGameAccountStateRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::Battlenet::EntityId::Clear();
    }
    if (has_game_account_id()) {
      if (game_account_id_ != NULL) game_account_id_->::Battlenet::EntityId::Clear();
    }
    if (has_options()) {
      if (options_ != NULL) options_->::Battlenet::account::GameAccountFieldOptions::Clear();
    }
    if (has_tags()) {
      if (tags_ != NULL) tags_->::Battlenet::account::GameAccountFieldTags::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGameAccountStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetGameAccountStateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.EntityId account_id = 1 [deprecated = true];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_game_account_id;
        break;
      }

      // optional .Battlenet.EntityId game_account_id = 2;
      case 2: {
        if (tag == 18) {
         parse_game_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_options;
        break;
      }

      // optional .Battlenet.account.GameAccountFieldOptions options = 10;
      case 10: {
        if (tag == 82) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_tags;
        break;
      }

      // optional .Battlenet.account.GameAccountFieldTags tags = 11;
      case 11: {
        if (tag == 90) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetGameAccountStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetGameAccountStateRequest)
  return false;
#undef DO_
}

void GetGameAccountStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetGameAccountStateRequest)
  // optional .Battlenet.EntityId account_id = 1 [deprecated = true];
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->account_id(), output);
  }

  // optional .Battlenet.EntityId game_account_id = 2;
  if (has_game_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->game_account_id(), output);
  }

  // optional .Battlenet.account.GameAccountFieldOptions options = 10;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->options(), output);
  }

  // optional .Battlenet.account.GameAccountFieldTags tags = 11;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->tags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetGameAccountStateRequest)
}

::google::protobuf::uint8* GetGameAccountStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetGameAccountStateRequest)
  // optional .Battlenet.EntityId account_id = 1 [deprecated = true];
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account_id(), target);
  }

  // optional .Battlenet.EntityId game_account_id = 2;
  if (has_game_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->game_account_id(), target);
  }

  // optional .Battlenet.account.GameAccountFieldOptions options = 10;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->options(), target);
  }

  // optional .Battlenet.account.GameAccountFieldTags tags = 11;
  if (has_tags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetGameAccountStateRequest)
  return target;
}

int GetGameAccountStateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.EntityId account_id = 1 [deprecated = true];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

    // optional .Battlenet.EntityId game_account_id = 2;
    if (has_game_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account_id());
    }

    // optional .Battlenet.account.GameAccountFieldOptions options = 10;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

    // optional .Battlenet.account.GameAccountFieldTags tags = 11;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGameAccountStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGameAccountStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGameAccountStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGameAccountStateRequest::MergeFrom(const GetGameAccountStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      mutable_account_id()->::Battlenet::EntityId::MergeFrom(from.account_id());
    }
    if (from.has_game_account_id()) {
      mutable_game_account_id()->::Battlenet::EntityId::MergeFrom(from.game_account_id());
    }
    if (from.has_options()) {
      mutable_options()->::Battlenet::account::GameAccountFieldOptions::MergeFrom(from.options());
    }
    if (from.has_tags()) {
      mutable_tags()->::Battlenet::account::GameAccountFieldTags::MergeFrom(from.tags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGameAccountStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameAccountStateRequest::CopyFrom(const GetGameAccountStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameAccountStateRequest::IsInitialized() const {

  if (has_account_id()) {
    if (!this->account_id().IsInitialized()) return false;
  }
  if (has_game_account_id()) {
    if (!this->game_account_id().IsInitialized()) return false;
  }
  return true;
}

void GetGameAccountStateRequest::Swap(GetGameAccountStateRequest* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(game_account_id_, other->game_account_id_);
    std::swap(options_, other->options_);
    std::swap(tags_, other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGameAccountStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGameAccountStateRequest_descriptor_;
  metadata.reflection = GetGameAccountStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGameAccountStateResponse::kStateFieldNumber;
const int GetGameAccountStateResponse::kTagsFieldNumber;
#endif  // !_MSC_VER

GetGameAccountStateResponse::GetGameAccountStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetGameAccountStateResponse)
}

void GetGameAccountStateResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::Battlenet::account::GameAccountState*>(&::Battlenet::account::GameAccountState::default_instance());
  tags_ = const_cast< ::Battlenet::account::GameAccountFieldTags*>(&::Battlenet::account::GameAccountFieldTags::default_instance());
}

GetGameAccountStateResponse::GetGameAccountStateResponse(const GetGameAccountStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetGameAccountStateResponse)
}

void GetGameAccountStateResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  tags_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGameAccountStateResponse::~GetGameAccountStateResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetGameAccountStateResponse)
  SharedDtor();
}

void GetGameAccountStateResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete tags_;
  }
}

void GetGameAccountStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGameAccountStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGameAccountStateResponse_descriptor_;
}

const GetGameAccountStateResponse& GetGameAccountStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetGameAccountStateResponse* GetGameAccountStateResponse::default_instance_ = NULL;

GetGameAccountStateResponse* GetGameAccountStateResponse::New() const {
  return new GetGameAccountStateResponse;
}

void GetGameAccountStateResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_state()) {
      if (state_ != NULL) state_->::Battlenet::account::GameAccountState::Clear();
    }
    if (has_tags()) {
      if (tags_ != NULL) tags_->::Battlenet::account::GameAccountFieldTags::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGameAccountStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetGameAccountStateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.account.GameAccountState state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // optional .Battlenet.account.GameAccountFieldTags tags = 2;
      case 2: {
        if (tag == 18) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetGameAccountStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetGameAccountStateResponse)
  return false;
#undef DO_
}

void GetGameAccountStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetGameAccountStateResponse)
  // optional .Battlenet.account.GameAccountState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->state(), output);
  }

  // optional .Battlenet.account.GameAccountFieldTags tags = 2;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->tags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetGameAccountStateResponse)
}

::google::protobuf::uint8* GetGameAccountStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetGameAccountStateResponse)
  // optional .Battlenet.account.GameAccountState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional .Battlenet.account.GameAccountFieldTags tags = 2;
  if (has_tags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetGameAccountStateResponse)
  return target;
}

int GetGameAccountStateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.account.GameAccountState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .Battlenet.account.GameAccountFieldTags tags = 2;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGameAccountStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGameAccountStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGameAccountStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGameAccountStateResponse::MergeFrom(const GetGameAccountStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::Battlenet::account::GameAccountState::MergeFrom(from.state());
    }
    if (from.has_tags()) {
      mutable_tags()->::Battlenet::account::GameAccountFieldTags::MergeFrom(from.tags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGameAccountStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameAccountStateResponse::CopyFrom(const GetGameAccountStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameAccountStateResponse::IsInitialized() const {

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void GetGameAccountStateResponse::Swap(GetGameAccountStateResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(tags_, other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGameAccountStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGameAccountStateResponse_descriptor_;
  metadata.reflection = GetGameAccountStateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLicensesRequest::kTargetIdFieldNumber;
const int GetLicensesRequest::kFetchAccountLicensesFieldNumber;
const int GetLicensesRequest::kFetchGameAccountLicensesFieldNumber;
const int GetLicensesRequest::kFetchDynamicAccountLicensesFieldNumber;
const int GetLicensesRequest::kProgramFieldNumber;
const int GetLicensesRequest::kExcludeUnknownProgramFieldNumber;
#endif  // !_MSC_VER

GetLicensesRequest::GetLicensesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetLicensesRequest)
}

void GetLicensesRequest::InitAsDefaultInstance() {
  target_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

GetLicensesRequest::GetLicensesRequest(const GetLicensesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetLicensesRequest)
}

void GetLicensesRequest::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = NULL;
  fetch_account_licenses_ = false;
  fetch_game_account_licenses_ = false;
  fetch_dynamic_account_licenses_ = false;
  program_ = 0u;
  exclude_unknown_program_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLicensesRequest::~GetLicensesRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetLicensesRequest)
  SharedDtor();
}

void GetLicensesRequest::SharedDtor() {
  if (this != default_instance_) {
    delete target_id_;
  }
}

void GetLicensesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLicensesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLicensesRequest_descriptor_;
}

const GetLicensesRequest& GetLicensesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetLicensesRequest* GetLicensesRequest::default_instance_ = NULL;

GetLicensesRequest* GetLicensesRequest::New() const {
  return new GetLicensesRequest;
}

void GetLicensesRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetLicensesRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(fetch_account_licenses_, program_);
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::Battlenet::EntityId::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLicensesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetLicensesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.EntityId target_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fetch_account_licenses;
        break;
      }

      // optional bool fetch_account_licenses = 2;
      case 2: {
        if (tag == 16) {
         parse_fetch_account_licenses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_account_licenses_)));
          set_has_fetch_account_licenses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fetch_game_account_licenses;
        break;
      }

      // optional bool fetch_game_account_licenses = 3;
      case 3: {
        if (tag == 24) {
         parse_fetch_game_account_licenses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_game_account_licenses_)));
          set_has_fetch_game_account_licenses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fetch_dynamic_account_licenses;
        break;
      }

      // optional bool fetch_dynamic_account_licenses = 4;
      case 4: {
        if (tag == 32) {
         parse_fetch_dynamic_account_licenses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_dynamic_account_licenses_)));
          set_has_fetch_dynamic_account_licenses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_program;
        break;
      }

      // optional fixed32 program = 5;
      case 5: {
        if (tag == 45) {
         parse_program:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_)));
          set_has_program();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exclude_unknown_program;
        break;
      }

      // optional bool exclude_unknown_program = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_exclude_unknown_program:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_unknown_program_)));
          set_has_exclude_unknown_program();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetLicensesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetLicensesRequest)
  return false;
#undef DO_
}

void GetLicensesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetLicensesRequest)
  // optional .Battlenet.EntityId target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->target_id(), output);
  }

  // optional bool fetch_account_licenses = 2;
  if (has_fetch_account_licenses()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fetch_account_licenses(), output);
  }

  // optional bool fetch_game_account_licenses = 3;
  if (has_fetch_game_account_licenses()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fetch_game_account_licenses(), output);
  }

  // optional bool fetch_dynamic_account_licenses = 4;
  if (has_fetch_dynamic_account_licenses()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fetch_dynamic_account_licenses(), output);
  }

  // optional fixed32 program = 5;
  if (has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->program(), output);
  }

  // optional bool exclude_unknown_program = 6 [default = false];
  if (has_exclude_unknown_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->exclude_unknown_program(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetLicensesRequest)
}

::google::protobuf::uint8* GetLicensesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetLicensesRequest)
  // optional .Battlenet.EntityId target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target_id(), target);
  }

  // optional bool fetch_account_licenses = 2;
  if (has_fetch_account_licenses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fetch_account_licenses(), target);
  }

  // optional bool fetch_game_account_licenses = 3;
  if (has_fetch_game_account_licenses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fetch_game_account_licenses(), target);
  }

  // optional bool fetch_dynamic_account_licenses = 4;
  if (has_fetch_dynamic_account_licenses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fetch_dynamic_account_licenses(), target);
  }

  // optional fixed32 program = 5;
  if (has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->program(), target);
  }

  // optional bool exclude_unknown_program = 6 [default = false];
  if (has_exclude_unknown_program()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->exclude_unknown_program(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetLicensesRequest)
  return target;
}

int GetLicensesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.EntityId target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }

    // optional bool fetch_account_licenses = 2;
    if (has_fetch_account_licenses()) {
      total_size += 1 + 1;
    }

    // optional bool fetch_game_account_licenses = 3;
    if (has_fetch_game_account_licenses()) {
      total_size += 1 + 1;
    }

    // optional bool fetch_dynamic_account_licenses = 4;
    if (has_fetch_dynamic_account_licenses()) {
      total_size += 1 + 1;
    }

    // optional fixed32 program = 5;
    if (has_program()) {
      total_size += 1 + 4;
    }

    // optional bool exclude_unknown_program = 6 [default = false];
    if (has_exclude_unknown_program()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLicensesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLicensesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLicensesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLicensesRequest::MergeFrom(const GetLicensesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      mutable_target_id()->::Battlenet::EntityId::MergeFrom(from.target_id());
    }
    if (from.has_fetch_account_licenses()) {
      set_fetch_account_licenses(from.fetch_account_licenses());
    }
    if (from.has_fetch_game_account_licenses()) {
      set_fetch_game_account_licenses(from.fetch_game_account_licenses());
    }
    if (from.has_fetch_dynamic_account_licenses()) {
      set_fetch_dynamic_account_licenses(from.fetch_dynamic_account_licenses());
    }
    if (from.has_program()) {
      set_program(from.program());
    }
    if (from.has_exclude_unknown_program()) {
      set_exclude_unknown_program(from.exclude_unknown_program());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLicensesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLicensesRequest::CopyFrom(const GetLicensesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLicensesRequest::IsInitialized() const {

  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  return true;
}

void GetLicensesRequest::Swap(GetLicensesRequest* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(fetch_account_licenses_, other->fetch_account_licenses_);
    std::swap(fetch_game_account_licenses_, other->fetch_game_account_licenses_);
    std::swap(fetch_dynamic_account_licenses_, other->fetch_dynamic_account_licenses_);
    std::swap(program_, other->program_);
    std::swap(exclude_unknown_program_, other->exclude_unknown_program_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLicensesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLicensesRequest_descriptor_;
  metadata.reflection = GetLicensesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLicensesResponse::kLicensesFieldNumber;
#endif  // !_MSC_VER

GetLicensesResponse::GetLicensesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetLicensesResponse)
}

void GetLicensesResponse::InitAsDefaultInstance() {
}

GetLicensesResponse::GetLicensesResponse(const GetLicensesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetLicensesResponse)
}

void GetLicensesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLicensesResponse::~GetLicensesResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetLicensesResponse)
  SharedDtor();
}

void GetLicensesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLicensesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLicensesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLicensesResponse_descriptor_;
}

const GetLicensesResponse& GetLicensesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetLicensesResponse* GetLicensesResponse::default_instance_ = NULL;

GetLicensesResponse* GetLicensesResponse::New() const {
  return new GetLicensesResponse;
}

void GetLicensesResponse::Clear() {
  licenses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLicensesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetLicensesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Battlenet.account.AccountLicense licenses = 1;
      case 1: {
        if (tag == 10) {
         parse_licenses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_licenses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_licenses;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetLicensesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetLicensesResponse)
  return false;
#undef DO_
}

void GetLicensesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetLicensesResponse)
  // repeated .Battlenet.account.AccountLicense licenses = 1;
  for (int i = 0; i < this->licenses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->licenses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetLicensesResponse)
}

::google::protobuf::uint8* GetLicensesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetLicensesResponse)
  // repeated .Battlenet.account.AccountLicense licenses = 1;
  for (int i = 0; i < this->licenses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->licenses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetLicensesResponse)
  return target;
}

int GetLicensesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Battlenet.account.AccountLicense licenses = 1;
  total_size += 1 * this->licenses_size();
  for (int i = 0; i < this->licenses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->licenses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLicensesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLicensesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLicensesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLicensesResponse::MergeFrom(const GetLicensesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  licenses_.MergeFrom(from.licenses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLicensesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLicensesResponse::CopyFrom(const GetLicensesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLicensesResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->licenses())) return false;
  return true;
}

void GetLicensesResponse::Swap(GetLicensesResponse* other) {
  if (other != this) {
    licenses_.Swap(&other->licenses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLicensesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLicensesResponse_descriptor_;
  metadata.reflection = GetLicensesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGameSessionInfoRequest::kEntityIdFieldNumber;
#endif  // !_MSC_VER

GetGameSessionInfoRequest::GetGameSessionInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetGameSessionInfoRequest)
}

void GetGameSessionInfoRequest::InitAsDefaultInstance() {
  entity_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

GetGameSessionInfoRequest::GetGameSessionInfoRequest(const GetGameSessionInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetGameSessionInfoRequest)
}

void GetGameSessionInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  entity_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGameSessionInfoRequest::~GetGameSessionInfoRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetGameSessionInfoRequest)
  SharedDtor();
}

void GetGameSessionInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete entity_id_;
  }
}

void GetGameSessionInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGameSessionInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGameSessionInfoRequest_descriptor_;
}

const GetGameSessionInfoRequest& GetGameSessionInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetGameSessionInfoRequest* GetGameSessionInfoRequest::default_instance_ = NULL;

GetGameSessionInfoRequest* GetGameSessionInfoRequest::New() const {
  return new GetGameSessionInfoRequest;
}

void GetGameSessionInfoRequest::Clear() {
  if (has_entity_id()) {
    if (entity_id_ != NULL) entity_id_->::Battlenet::EntityId::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGameSessionInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetGameSessionInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.EntityId entity_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetGameSessionInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetGameSessionInfoRequest)
  return false;
#undef DO_
}

void GetGameSessionInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetGameSessionInfoRequest)
  // optional .Battlenet.EntityId entity_id = 1;
  if (has_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entity_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetGameSessionInfoRequest)
}

::google::protobuf::uint8* GetGameSessionInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetGameSessionInfoRequest)
  // optional .Battlenet.EntityId entity_id = 1;
  if (has_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entity_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetGameSessionInfoRequest)
  return target;
}

int GetGameSessionInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.EntityId entity_id = 1;
    if (has_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGameSessionInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGameSessionInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGameSessionInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGameSessionInfoRequest::MergeFrom(const GetGameSessionInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity_id()) {
      mutable_entity_id()->::Battlenet::EntityId::MergeFrom(from.entity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGameSessionInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameSessionInfoRequest::CopyFrom(const GetGameSessionInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameSessionInfoRequest::IsInitialized() const {

  if (has_entity_id()) {
    if (!this->entity_id().IsInitialized()) return false;
  }
  return true;
}

void GetGameSessionInfoRequest::Swap(GetGameSessionInfoRequest* other) {
  if (other != this) {
    std::swap(entity_id_, other->entity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGameSessionInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGameSessionInfoRequest_descriptor_;
  metadata.reflection = GetGameSessionInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGameSessionInfoResponse::kSessionInfoFieldNumber;
#endif  // !_MSC_VER

GetGameSessionInfoResponse::GetGameSessionInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetGameSessionInfoResponse)
}

void GetGameSessionInfoResponse::InitAsDefaultInstance() {
  session_info_ = const_cast< ::Battlenet::account::GameSessionInfo*>(&::Battlenet::account::GameSessionInfo::default_instance());
}

GetGameSessionInfoResponse::GetGameSessionInfoResponse(const GetGameSessionInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetGameSessionInfoResponse)
}

void GetGameSessionInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  session_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGameSessionInfoResponse::~GetGameSessionInfoResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetGameSessionInfoResponse)
  SharedDtor();
}

void GetGameSessionInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete session_info_;
  }
}

void GetGameSessionInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGameSessionInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGameSessionInfoResponse_descriptor_;
}

const GetGameSessionInfoResponse& GetGameSessionInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetGameSessionInfoResponse* GetGameSessionInfoResponse::default_instance_ = NULL;

GetGameSessionInfoResponse* GetGameSessionInfoResponse::New() const {
  return new GetGameSessionInfoResponse;
}

void GetGameSessionInfoResponse::Clear() {
  if (has_session_info()) {
    if (session_info_ != NULL) session_info_->::Battlenet::account::GameSessionInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGameSessionInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetGameSessionInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.account.GameSessionInfo session_info = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetGameSessionInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetGameSessionInfoResponse)
  return false;
#undef DO_
}

void GetGameSessionInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetGameSessionInfoResponse)
  // optional .Battlenet.account.GameSessionInfo session_info = 2;
  if (has_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->session_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetGameSessionInfoResponse)
}

::google::protobuf::uint8* GetGameSessionInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetGameSessionInfoResponse)
  // optional .Battlenet.account.GameSessionInfo session_info = 2;
  if (has_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->session_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetGameSessionInfoResponse)
  return target;
}

int GetGameSessionInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.account.GameSessionInfo session_info = 2;
    if (has_session_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGameSessionInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGameSessionInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGameSessionInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGameSessionInfoResponse::MergeFrom(const GetGameSessionInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_info()) {
      mutable_session_info()->::Battlenet::account::GameSessionInfo::MergeFrom(from.session_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGameSessionInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameSessionInfoResponse::CopyFrom(const GetGameSessionInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameSessionInfoResponse::IsInitialized() const {

  return true;
}

void GetGameSessionInfoResponse::Swap(GetGameSessionInfoResponse* other) {
  if (other != this) {
    std::swap(session_info_, other->session_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGameSessionInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGameSessionInfoResponse_descriptor_;
  metadata.reflection = GetGameSessionInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGameTimeRemainingInfoRequest::kGameAccountIdFieldNumber;
const int GetGameTimeRemainingInfoRequest::kAccountIdFieldNumber;
#endif  // !_MSC_VER

GetGameTimeRemainingInfoRequest::GetGameTimeRemainingInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetGameTimeRemainingInfoRequest)
}

void GetGameTimeRemainingInfoRequest::InitAsDefaultInstance() {
  game_account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

GetGameTimeRemainingInfoRequest::GetGameTimeRemainingInfoRequest(const GetGameTimeRemainingInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetGameTimeRemainingInfoRequest)
}

void GetGameTimeRemainingInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  game_account_id_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGameTimeRemainingInfoRequest::~GetGameTimeRemainingInfoRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetGameTimeRemainingInfoRequest)
  SharedDtor();
}

void GetGameTimeRemainingInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete game_account_id_;
    delete account_id_;
  }
}

void GetGameTimeRemainingInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGameTimeRemainingInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGameTimeRemainingInfoRequest_descriptor_;
}

const GetGameTimeRemainingInfoRequest& GetGameTimeRemainingInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetGameTimeRemainingInfoRequest* GetGameTimeRemainingInfoRequest::default_instance_ = NULL;

GetGameTimeRemainingInfoRequest* GetGameTimeRemainingInfoRequest::New() const {
  return new GetGameTimeRemainingInfoRequest;
}

void GetGameTimeRemainingInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_game_account_id()) {
      if (game_account_id_ != NULL) game_account_id_->::Battlenet::EntityId::Clear();
    }
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::Battlenet::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGameTimeRemainingInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetGameTimeRemainingInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.EntityId game_account_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account_id;
        break;
      }

      // optional .Battlenet.EntityId account_id = 2;
      case 2: {
        if (tag == 18) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetGameTimeRemainingInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetGameTimeRemainingInfoRequest)
  return false;
#undef DO_
}

void GetGameTimeRemainingInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetGameTimeRemainingInfoRequest)
  // optional .Battlenet.EntityId game_account_id = 1;
  if (has_game_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->game_account_id(), output);
  }

  // optional .Battlenet.EntityId account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetGameTimeRemainingInfoRequest)
}

::google::protobuf::uint8* GetGameTimeRemainingInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetGameTimeRemainingInfoRequest)
  // optional .Battlenet.EntityId game_account_id = 1;
  if (has_game_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_account_id(), target);
  }

  // optional .Battlenet.EntityId account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetGameTimeRemainingInfoRequest)
  return target;
}

int GetGameTimeRemainingInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.EntityId game_account_id = 1;
    if (has_game_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account_id());
    }

    // optional .Battlenet.EntityId account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGameTimeRemainingInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGameTimeRemainingInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGameTimeRemainingInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGameTimeRemainingInfoRequest::MergeFrom(const GetGameTimeRemainingInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_account_id()) {
      mutable_game_account_id()->::Battlenet::EntityId::MergeFrom(from.game_account_id());
    }
    if (from.has_account_id()) {
      mutable_account_id()->::Battlenet::EntityId::MergeFrom(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGameTimeRemainingInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameTimeRemainingInfoRequest::CopyFrom(const GetGameTimeRemainingInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameTimeRemainingInfoRequest::IsInitialized() const {

  if (has_game_account_id()) {
    if (!this->game_account_id().IsInitialized()) return false;
  }
  if (has_account_id()) {
    if (!this->account_id().IsInitialized()) return false;
  }
  return true;
}

void GetGameTimeRemainingInfoRequest::Swap(GetGameTimeRemainingInfoRequest* other) {
  if (other != this) {
    std::swap(game_account_id_, other->game_account_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGameTimeRemainingInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGameTimeRemainingInfoRequest_descriptor_;
  metadata.reflection = GetGameTimeRemainingInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGameTimeRemainingInfoResponse::kGameTimeRemainingInfoFieldNumber;
#endif  // !_MSC_VER

GetGameTimeRemainingInfoResponse::GetGameTimeRemainingInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetGameTimeRemainingInfoResponse)
}

void GetGameTimeRemainingInfoResponse::InitAsDefaultInstance() {
  game_time_remaining_info_ = const_cast< ::Battlenet::account::GameTimeRemainingInfo*>(&::Battlenet::account::GameTimeRemainingInfo::default_instance());
}

GetGameTimeRemainingInfoResponse::GetGameTimeRemainingInfoResponse(const GetGameTimeRemainingInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetGameTimeRemainingInfoResponse)
}

void GetGameTimeRemainingInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  game_time_remaining_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGameTimeRemainingInfoResponse::~GetGameTimeRemainingInfoResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetGameTimeRemainingInfoResponse)
  SharedDtor();
}

void GetGameTimeRemainingInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete game_time_remaining_info_;
  }
}

void GetGameTimeRemainingInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGameTimeRemainingInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGameTimeRemainingInfoResponse_descriptor_;
}

const GetGameTimeRemainingInfoResponse& GetGameTimeRemainingInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetGameTimeRemainingInfoResponse* GetGameTimeRemainingInfoResponse::default_instance_ = NULL;

GetGameTimeRemainingInfoResponse* GetGameTimeRemainingInfoResponse::New() const {
  return new GetGameTimeRemainingInfoResponse;
}

void GetGameTimeRemainingInfoResponse::Clear() {
  if (has_game_time_remaining_info()) {
    if (game_time_remaining_info_ != NULL) game_time_remaining_info_->::Battlenet::account::GameTimeRemainingInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGameTimeRemainingInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetGameTimeRemainingInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.account.GameTimeRemainingInfo game_time_remaining_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_time_remaining_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetGameTimeRemainingInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetGameTimeRemainingInfoResponse)
  return false;
#undef DO_
}

void GetGameTimeRemainingInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetGameTimeRemainingInfoResponse)
  // optional .Battlenet.account.GameTimeRemainingInfo game_time_remaining_info = 1;
  if (has_game_time_remaining_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->game_time_remaining_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetGameTimeRemainingInfoResponse)
}

::google::protobuf::uint8* GetGameTimeRemainingInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetGameTimeRemainingInfoResponse)
  // optional .Battlenet.account.GameTimeRemainingInfo game_time_remaining_info = 1;
  if (has_game_time_remaining_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_time_remaining_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetGameTimeRemainingInfoResponse)
  return target;
}

int GetGameTimeRemainingInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.account.GameTimeRemainingInfo game_time_remaining_info = 1;
    if (has_game_time_remaining_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_time_remaining_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGameTimeRemainingInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGameTimeRemainingInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGameTimeRemainingInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGameTimeRemainingInfoResponse::MergeFrom(const GetGameTimeRemainingInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_time_remaining_info()) {
      mutable_game_time_remaining_info()->::Battlenet::account::GameTimeRemainingInfo::MergeFrom(from.game_time_remaining_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGameTimeRemainingInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameTimeRemainingInfoResponse::CopyFrom(const GetGameTimeRemainingInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameTimeRemainingInfoResponse::IsInitialized() const {

  return true;
}

void GetGameTimeRemainingInfoResponse::Swap(GetGameTimeRemainingInfoResponse* other) {
  if (other != this) {
    std::swap(game_time_remaining_info_, other->game_time_remaining_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGameTimeRemainingInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGameTimeRemainingInfoResponse_descriptor_;
  metadata.reflection = GetGameTimeRemainingInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCAISInfoRequest::kEntityIdFieldNumber;
#endif  // !_MSC_VER

GetCAISInfoRequest::GetCAISInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetCAISInfoRequest)
}

void GetCAISInfoRequest::InitAsDefaultInstance() {
  entity_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

GetCAISInfoRequest::GetCAISInfoRequest(const GetCAISInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetCAISInfoRequest)
}

void GetCAISInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  entity_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCAISInfoRequest::~GetCAISInfoRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetCAISInfoRequest)
  SharedDtor();
}

void GetCAISInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete entity_id_;
  }
}

void GetCAISInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCAISInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCAISInfoRequest_descriptor_;
}

const GetCAISInfoRequest& GetCAISInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetCAISInfoRequest* GetCAISInfoRequest::default_instance_ = NULL;

GetCAISInfoRequest* GetCAISInfoRequest::New() const {
  return new GetCAISInfoRequest;
}

void GetCAISInfoRequest::Clear() {
  if (has_entity_id()) {
    if (entity_id_ != NULL) entity_id_->::Battlenet::EntityId::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCAISInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetCAISInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.EntityId entity_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetCAISInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetCAISInfoRequest)
  return false;
#undef DO_
}

void GetCAISInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetCAISInfoRequest)
  // optional .Battlenet.EntityId entity_id = 1;
  if (has_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entity_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetCAISInfoRequest)
}

::google::protobuf::uint8* GetCAISInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetCAISInfoRequest)
  // optional .Battlenet.EntityId entity_id = 1;
  if (has_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entity_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetCAISInfoRequest)
  return target;
}

int GetCAISInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.EntityId entity_id = 1;
    if (has_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCAISInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCAISInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCAISInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCAISInfoRequest::MergeFrom(const GetCAISInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity_id()) {
      mutable_entity_id()->::Battlenet::EntityId::MergeFrom(from.entity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCAISInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCAISInfoRequest::CopyFrom(const GetCAISInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCAISInfoRequest::IsInitialized() const {

  if (has_entity_id()) {
    if (!this->entity_id().IsInitialized()) return false;
  }
  return true;
}

void GetCAISInfoRequest::Swap(GetCAISInfoRequest* other) {
  if (other != this) {
    std::swap(entity_id_, other->entity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCAISInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCAISInfoRequest_descriptor_;
  metadata.reflection = GetCAISInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCAISInfoResponse::kCaisInfoFieldNumber;
#endif  // !_MSC_VER

GetCAISInfoResponse::GetCAISInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetCAISInfoResponse)
}

void GetCAISInfoResponse::InitAsDefaultInstance() {
  cais_info_ = const_cast< ::Battlenet::account::CAIS*>(&::Battlenet::account::CAIS::default_instance());
}

GetCAISInfoResponse::GetCAISInfoResponse(const GetCAISInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetCAISInfoResponse)
}

void GetCAISInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  cais_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCAISInfoResponse::~GetCAISInfoResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetCAISInfoResponse)
  SharedDtor();
}

void GetCAISInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete cais_info_;
  }
}

void GetCAISInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCAISInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCAISInfoResponse_descriptor_;
}

const GetCAISInfoResponse& GetCAISInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetCAISInfoResponse* GetCAISInfoResponse::default_instance_ = NULL;

GetCAISInfoResponse* GetCAISInfoResponse::New() const {
  return new GetCAISInfoResponse;
}

void GetCAISInfoResponse::Clear() {
  if (has_cais_info()) {
    if (cais_info_ != NULL) cais_info_->::Battlenet::account::CAIS::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCAISInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetCAISInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.account.CAIS cais_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cais_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetCAISInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetCAISInfoResponse)
  return false;
#undef DO_
}

void GetCAISInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetCAISInfoResponse)
  // optional .Battlenet.account.CAIS cais_info = 1;
  if (has_cais_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->cais_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetCAISInfoResponse)
}

::google::protobuf::uint8* GetCAISInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetCAISInfoResponse)
  // optional .Battlenet.account.CAIS cais_info = 1;
  if (has_cais_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cais_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetCAISInfoResponse)
  return target;
}

int GetCAISInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.account.CAIS cais_info = 1;
    if (has_cais_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cais_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCAISInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCAISInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCAISInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCAISInfoResponse::MergeFrom(const GetCAISInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cais_info()) {
      mutable_cais_info()->::Battlenet::account::CAIS::MergeFrom(from.cais_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCAISInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCAISInfoResponse::CopyFrom(const GetCAISInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCAISInfoResponse::IsInitialized() const {

  return true;
}

void GetCAISInfoResponse::Swap(GetCAISInfoResponse* other) {
  if (other != this) {
    std::swap(cais_info_, other->cais_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCAISInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCAISInfoResponse_descriptor_;
  metadata.reflection = GetCAISInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardCacheExpireRequest::kEntityIdFieldNumber;
#endif  // !_MSC_VER

ForwardCacheExpireRequest::ForwardCacheExpireRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.ForwardCacheExpireRequest)
}

void ForwardCacheExpireRequest::InitAsDefaultInstance() {
  entity_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

ForwardCacheExpireRequest::ForwardCacheExpireRequest(const ForwardCacheExpireRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.ForwardCacheExpireRequest)
}

void ForwardCacheExpireRequest::SharedCtor() {
  _cached_size_ = 0;
  entity_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardCacheExpireRequest::~ForwardCacheExpireRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.ForwardCacheExpireRequest)
  SharedDtor();
}

void ForwardCacheExpireRequest::SharedDtor() {
  if (this != default_instance_) {
    delete entity_id_;
  }
}

void ForwardCacheExpireRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardCacheExpireRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardCacheExpireRequest_descriptor_;
}

const ForwardCacheExpireRequest& ForwardCacheExpireRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

ForwardCacheExpireRequest* ForwardCacheExpireRequest::default_instance_ = NULL;

ForwardCacheExpireRequest* ForwardCacheExpireRequest::New() const {
  return new ForwardCacheExpireRequest;
}

void ForwardCacheExpireRequest::Clear() {
  if (has_entity_id()) {
    if (entity_id_ != NULL) entity_id_->::Battlenet::EntityId::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardCacheExpireRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.ForwardCacheExpireRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.EntityId entity_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.ForwardCacheExpireRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.ForwardCacheExpireRequest)
  return false;
#undef DO_
}

void ForwardCacheExpireRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.ForwardCacheExpireRequest)
  // optional .Battlenet.EntityId entity_id = 1;
  if (has_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entity_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.ForwardCacheExpireRequest)
}

::google::protobuf::uint8* ForwardCacheExpireRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.ForwardCacheExpireRequest)
  // optional .Battlenet.EntityId entity_id = 1;
  if (has_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entity_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.ForwardCacheExpireRequest)
  return target;
}

int ForwardCacheExpireRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.EntityId entity_id = 1;
    if (has_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardCacheExpireRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardCacheExpireRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardCacheExpireRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardCacheExpireRequest::MergeFrom(const ForwardCacheExpireRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity_id()) {
      mutable_entity_id()->::Battlenet::EntityId::MergeFrom(from.entity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardCacheExpireRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardCacheExpireRequest::CopyFrom(const ForwardCacheExpireRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardCacheExpireRequest::IsInitialized() const {

  if (has_entity_id()) {
    if (!this->entity_id().IsInitialized()) return false;
  }
  return true;
}

void ForwardCacheExpireRequest::Swap(ForwardCacheExpireRequest* other) {
  if (other != this) {
    std::swap(entity_id_, other->entity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardCacheExpireRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardCacheExpireRequest_descriptor_;
  metadata.reflection = ForwardCacheExpireRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAuthorizedDataRequest::kEntityIdFieldNumber;
const int GetAuthorizedDataRequest::kTagFieldNumber;
const int GetAuthorizedDataRequest::kPrivilegedNetworkFieldNumber;
#endif  // !_MSC_VER

GetAuthorizedDataRequest::GetAuthorizedDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetAuthorizedDataRequest)
}

void GetAuthorizedDataRequest::InitAsDefaultInstance() {
  entity_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

GetAuthorizedDataRequest::GetAuthorizedDataRequest(const GetAuthorizedDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetAuthorizedDataRequest)
}

void GetAuthorizedDataRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entity_id_ = NULL;
  privileged_network_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAuthorizedDataRequest::~GetAuthorizedDataRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetAuthorizedDataRequest)
  SharedDtor();
}

void GetAuthorizedDataRequest::SharedDtor() {
  if (this != default_instance_) {
    delete entity_id_;
  }
}

void GetAuthorizedDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAuthorizedDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAuthorizedDataRequest_descriptor_;
}

const GetAuthorizedDataRequest& GetAuthorizedDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetAuthorizedDataRequest* GetAuthorizedDataRequest::default_instance_ = NULL;

GetAuthorizedDataRequest* GetAuthorizedDataRequest::New() const {
  return new GetAuthorizedDataRequest;
}

void GetAuthorizedDataRequest::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_entity_id()) {
      if (entity_id_ != NULL) entity_id_->::Battlenet::EntityId::Clear();
    }
    privileged_network_ = false;
  }
  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAuthorizedDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetAuthorizedDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.EntityId entity_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }

      // repeated string tag = 2;
      case 2: {
        if (tag == 18) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag(this->tag_size() - 1).data(),
            this->tag(this->tag_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        if (input->ExpectTag(24)) goto parse_privileged_network;
        break;
      }

      // optional bool privileged_network = 3;
      case 3: {
        if (tag == 24) {
         parse_privileged_network:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &privileged_network_)));
          set_has_privileged_network();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetAuthorizedDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetAuthorizedDataRequest)
  return false;
#undef DO_
}

void GetAuthorizedDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetAuthorizedDataRequest)
  // optional .Battlenet.EntityId entity_id = 1;
  if (has_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entity_id(), output);
  }

  // repeated string tag = 2;
  for (int i = 0; i < this->tag_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tag(i).data(), this->tag(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tag");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tag(i), output);
  }

  // optional bool privileged_network = 3;
  if (has_privileged_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->privileged_network(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetAuthorizedDataRequest)
}

::google::protobuf::uint8* GetAuthorizedDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetAuthorizedDataRequest)
  // optional .Battlenet.EntityId entity_id = 1;
  if (has_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entity_id(), target);
  }

  // repeated string tag = 2;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag(i).data(), this->tag(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->tag(i), target);
  }

  // optional bool privileged_network = 3;
  if (has_privileged_network()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->privileged_network(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetAuthorizedDataRequest)
  return target;
}

int GetAuthorizedDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.EntityId entity_id = 1;
    if (has_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity_id());
    }

    // optional bool privileged_network = 3;
    if (has_privileged_network()) {
      total_size += 1 + 1;
    }

  }
  // repeated string tag = 2;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAuthorizedDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAuthorizedDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAuthorizedDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAuthorizedDataRequest::MergeFrom(const GetAuthorizedDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity_id()) {
      mutable_entity_id()->::Battlenet::EntityId::MergeFrom(from.entity_id());
    }
    if (from.has_privileged_network()) {
      set_privileged_network(from.privileged_network());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAuthorizedDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthorizedDataRequest::CopyFrom(const GetAuthorizedDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthorizedDataRequest::IsInitialized() const {

  if (has_entity_id()) {
    if (!this->entity_id().IsInitialized()) return false;
  }
  return true;
}

void GetAuthorizedDataRequest::Swap(GetAuthorizedDataRequest* other) {
  if (other != this) {
    std::swap(entity_id_, other->entity_id_);
    tag_.Swap(&other->tag_);
    std::swap(privileged_network_, other->privileged_network_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAuthorizedDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAuthorizedDataRequest_descriptor_;
  metadata.reflection = GetAuthorizedDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAuthorizedDataResponse::kDataFieldNumber;
#endif  // !_MSC_VER

GetAuthorizedDataResponse::GetAuthorizedDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GetAuthorizedDataResponse)
}

void GetAuthorizedDataResponse::InitAsDefaultInstance() {
}

GetAuthorizedDataResponse::GetAuthorizedDataResponse(const GetAuthorizedDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GetAuthorizedDataResponse)
}

void GetAuthorizedDataResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAuthorizedDataResponse::~GetAuthorizedDataResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GetAuthorizedDataResponse)
  SharedDtor();
}

void GetAuthorizedDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAuthorizedDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAuthorizedDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAuthorizedDataResponse_descriptor_;
}

const GetAuthorizedDataResponse& GetAuthorizedDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GetAuthorizedDataResponse* GetAuthorizedDataResponse::default_instance_ = NULL;

GetAuthorizedDataResponse* GetAuthorizedDataResponse::New() const {
  return new GetAuthorizedDataResponse;
}

void GetAuthorizedDataResponse::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAuthorizedDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GetAuthorizedDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Battlenet.account.AuthorizedData data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GetAuthorizedDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GetAuthorizedDataResponse)
  return false;
#undef DO_
}

void GetAuthorizedDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GetAuthorizedDataResponse)
  // repeated .Battlenet.account.AuthorizedData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GetAuthorizedDataResponse)
}

::google::protobuf::uint8* GetAuthorizedDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GetAuthorizedDataResponse)
  // repeated .Battlenet.account.AuthorizedData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GetAuthorizedDataResponse)
  return target;
}

int GetAuthorizedDataResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Battlenet.account.AuthorizedData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAuthorizedDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAuthorizedDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAuthorizedDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAuthorizedDataResponse::MergeFrom(const GetAuthorizedDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAuthorizedDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthorizedDataResponse::CopyFrom(const GetAuthorizedDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthorizedDataResponse::IsInitialized() const {

  return true;
}

void GetAuthorizedDataResponse::Swap(GetAuthorizedDataResponse* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAuthorizedDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAuthorizedDataResponse_descriptor_;
  metadata.reflection = GetAuthorizedDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountStateNotification::kAccountStateFieldNumber;
const int AccountStateNotification::kSubscriberIdFieldNumber;
const int AccountStateNotification::kAccountTagsFieldNumber;
const int AccountStateNotification::kSubscriptionCompletedFieldNumber;
#endif  // !_MSC_VER

AccountStateNotification::AccountStateNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountStateNotification)
}

void AccountStateNotification::InitAsDefaultInstance() {
  account_state_ = const_cast< ::Battlenet::account::AccountState*>(&::Battlenet::account::AccountState::default_instance());
  account_tags_ = const_cast< ::Battlenet::account::AccountFieldTags*>(&::Battlenet::account::AccountFieldTags::default_instance());
}

AccountStateNotification::AccountStateNotification(const AccountStateNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountStateNotification)
}

void AccountStateNotification::SharedCtor() {
  _cached_size_ = 0;
  account_state_ = NULL;
  subscriber_id_ = GOOGLE_ULONGLONG(0);
  account_tags_ = NULL;
  subscription_completed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountStateNotification::~AccountStateNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountStateNotification)
  SharedDtor();
}

void AccountStateNotification::SharedDtor() {
  if (this != default_instance_) {
    delete account_state_;
    delete account_tags_;
  }
}

void AccountStateNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountStateNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountStateNotification_descriptor_;
}

const AccountStateNotification& AccountStateNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

AccountStateNotification* AccountStateNotification::default_instance_ = NULL;

AccountStateNotification* AccountStateNotification::New() const {
  return new AccountStateNotification;
}

void AccountStateNotification::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_account_state()) {
      if (account_state_ != NULL) account_state_->::Battlenet::account::AccountState::Clear();
    }
    subscriber_id_ = GOOGLE_ULONGLONG(0);
    if (has_account_tags()) {
      if (account_tags_ != NULL) account_tags_->::Battlenet::account::AccountFieldTags::Clear();
    }
    subscription_completed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountStateNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.AccountStateNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.account.AccountState account_state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_subscriber_id;
        break;
      }

      // optional uint64 subscriber_id = 2;
      case 2: {
        if (tag == 16) {
         parse_subscriber_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subscriber_id_)));
          set_has_subscriber_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_account_tags;
        break;
      }

      // optional .Battlenet.account.AccountFieldTags account_tags = 3;
      case 3: {
        if (tag == 26) {
         parse_account_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_subscription_completed;
        break;
      }

      // optional bool subscription_completed = 4;
      case 4: {
        if (tag == 32) {
         parse_subscription_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscription_completed_)));
          set_has_subscription_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.AccountStateNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.AccountStateNotification)
  return false;
#undef DO_
}

void AccountStateNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.AccountStateNotification)
  // optional .Battlenet.account.AccountState account_state = 1;
  if (has_account_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->account_state(), output);
  }

  // optional uint64 subscriber_id = 2;
  if (has_subscriber_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->subscriber_id(), output);
  }

  // optional .Battlenet.account.AccountFieldTags account_tags = 3;
  if (has_account_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->account_tags(), output);
  }

  // optional bool subscription_completed = 4;
  if (has_subscription_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->subscription_completed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.AccountStateNotification)
}

::google::protobuf::uint8* AccountStateNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.AccountStateNotification)
  // optional .Battlenet.account.AccountState account_state = 1;
  if (has_account_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account_state(), target);
  }

  // optional uint64 subscriber_id = 2;
  if (has_subscriber_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->subscriber_id(), target);
  }

  // optional .Battlenet.account.AccountFieldTags account_tags = 3;
  if (has_account_tags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->account_tags(), target);
  }

  // optional bool subscription_completed = 4;
  if (has_subscription_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->subscription_completed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.AccountStateNotification)
  return target;
}

int AccountStateNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.account.AccountState account_state = 1;
    if (has_account_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_state());
    }

    // optional uint64 subscriber_id = 2;
    if (has_subscriber_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subscriber_id());
    }

    // optional .Battlenet.account.AccountFieldTags account_tags = 3;
    if (has_account_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_tags());
    }

    // optional bool subscription_completed = 4;
    if (has_subscription_completed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountStateNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountStateNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountStateNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountStateNotification::MergeFrom(const AccountStateNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_state()) {
      mutable_account_state()->::Battlenet::account::AccountState::MergeFrom(from.account_state());
    }
    if (from.has_subscriber_id()) {
      set_subscriber_id(from.subscriber_id());
    }
    if (from.has_account_tags()) {
      mutable_account_tags()->::Battlenet::account::AccountFieldTags::MergeFrom(from.account_tags());
    }
    if (from.has_subscription_completed()) {
      set_subscription_completed(from.subscription_completed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountStateNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountStateNotification::CopyFrom(const AccountStateNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountStateNotification::IsInitialized() const {

  if (has_account_state()) {
    if (!this->account_state().IsInitialized()) return false;
  }
  return true;
}

void AccountStateNotification::Swap(AccountStateNotification* other) {
  if (other != this) {
    std::swap(account_state_, other->account_state_);
    std::swap(subscriber_id_, other->subscriber_id_);
    std::swap(account_tags_, other->account_tags_);
    std::swap(subscription_completed_, other->subscription_completed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountStateNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountStateNotification_descriptor_;
  metadata.reflection = AccountStateNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAccountStateNotification::kGameAccountStateFieldNumber;
const int GameAccountStateNotification::kSubscriberIdFieldNumber;
const int GameAccountStateNotification::kGameAccountTagsFieldNumber;
const int GameAccountStateNotification::kSubscriptionCompletedFieldNumber;
#endif  // !_MSC_VER

GameAccountStateNotification::GameAccountStateNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameAccountStateNotification)
}

void GameAccountStateNotification::InitAsDefaultInstance() {
  game_account_state_ = const_cast< ::Battlenet::account::GameAccountState*>(&::Battlenet::account::GameAccountState::default_instance());
  game_account_tags_ = const_cast< ::Battlenet::account::GameAccountFieldTags*>(&::Battlenet::account::GameAccountFieldTags::default_instance());
}

GameAccountStateNotification::GameAccountStateNotification(const GameAccountStateNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameAccountStateNotification)
}

void GameAccountStateNotification::SharedCtor() {
  _cached_size_ = 0;
  game_account_state_ = NULL;
  subscriber_id_ = GOOGLE_ULONGLONG(0);
  game_account_tags_ = NULL;
  subscription_completed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAccountStateNotification::~GameAccountStateNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameAccountStateNotification)
  SharedDtor();
}

void GameAccountStateNotification::SharedDtor() {
  if (this != default_instance_) {
    delete game_account_state_;
    delete game_account_tags_;
  }
}

void GameAccountStateNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAccountStateNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAccountStateNotification_descriptor_;
}

const GameAccountStateNotification& GameAccountStateNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GameAccountStateNotification* GameAccountStateNotification::default_instance_ = NULL;

GameAccountStateNotification* GameAccountStateNotification::New() const {
  return new GameAccountStateNotification;
}

void GameAccountStateNotification::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_game_account_state()) {
      if (game_account_state_ != NULL) game_account_state_->::Battlenet::account::GameAccountState::Clear();
    }
    subscriber_id_ = GOOGLE_ULONGLONG(0);
    if (has_game_account_tags()) {
      if (game_account_tags_ != NULL) game_account_tags_->::Battlenet::account::GameAccountFieldTags::Clear();
    }
    subscription_completed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameAccountStateNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GameAccountStateNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.account.GameAccountState game_account_state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_subscriber_id;
        break;
      }

      // optional uint64 subscriber_id = 2;
      case 2: {
        if (tag == 16) {
         parse_subscriber_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subscriber_id_)));
          set_has_subscriber_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_game_account_tags;
        break;
      }

      // optional .Battlenet.account.GameAccountFieldTags game_account_tags = 3;
      case 3: {
        if (tag == 26) {
         parse_game_account_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_subscription_completed;
        break;
      }

      // optional bool subscription_completed = 4;
      case 4: {
        if (tag == 32) {
         parse_subscription_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscription_completed_)));
          set_has_subscription_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GameAccountStateNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GameAccountStateNotification)
  return false;
#undef DO_
}

void GameAccountStateNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GameAccountStateNotification)
  // optional .Battlenet.account.GameAccountState game_account_state = 1;
  if (has_game_account_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->game_account_state(), output);
  }

  // optional uint64 subscriber_id = 2;
  if (has_subscriber_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->subscriber_id(), output);
  }

  // optional .Battlenet.account.GameAccountFieldTags game_account_tags = 3;
  if (has_game_account_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->game_account_tags(), output);
  }

  // optional bool subscription_completed = 4;
  if (has_subscription_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->subscription_completed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GameAccountStateNotification)
}

::google::protobuf::uint8* GameAccountStateNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GameAccountStateNotification)
  // optional .Battlenet.account.GameAccountState game_account_state = 1;
  if (has_game_account_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_account_state(), target);
  }

  // optional uint64 subscriber_id = 2;
  if (has_subscriber_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->subscriber_id(), target);
  }

  // optional .Battlenet.account.GameAccountFieldTags game_account_tags = 3;
  if (has_game_account_tags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->game_account_tags(), target);
  }

  // optional bool subscription_completed = 4;
  if (has_subscription_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->subscription_completed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GameAccountStateNotification)
  return target;
}

int GameAccountStateNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.account.GameAccountState game_account_state = 1;
    if (has_game_account_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account_state());
    }

    // optional uint64 subscriber_id = 2;
    if (has_subscriber_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subscriber_id());
    }

    // optional .Battlenet.account.GameAccountFieldTags game_account_tags = 3;
    if (has_game_account_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account_tags());
    }

    // optional bool subscription_completed = 4;
    if (has_subscription_completed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAccountStateNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameAccountStateNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameAccountStateNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameAccountStateNotification::MergeFrom(const GameAccountStateNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_account_state()) {
      mutable_game_account_state()->::Battlenet::account::GameAccountState::MergeFrom(from.game_account_state());
    }
    if (from.has_subscriber_id()) {
      set_subscriber_id(from.subscriber_id());
    }
    if (from.has_game_account_tags()) {
      mutable_game_account_tags()->::Battlenet::account::GameAccountFieldTags::MergeFrom(from.game_account_tags());
    }
    if (from.has_subscription_completed()) {
      set_subscription_completed(from.subscription_completed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameAccountStateNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountStateNotification::CopyFrom(const GameAccountStateNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountStateNotification::IsInitialized() const {

  if (has_game_account_state()) {
    if (!this->game_account_state().IsInitialized()) return false;
  }
  return true;
}

void GameAccountStateNotification::Swap(GameAccountStateNotification* other) {
  if (other != this) {
    std::swap(game_account_state_, other->game_account_state_);
    std::swap(subscriber_id_, other->subscriber_id_);
    std::swap(game_account_tags_, other->game_account_tags_);
    std::swap(subscription_completed_, other->subscription_completed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameAccountStateNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAccountStateNotification_descriptor_;
  metadata.reflection = GameAccountStateNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAccountNotification::kGameAccountsFieldNumber;
const int GameAccountNotification::kSubscriberIdFieldNumber;
const int GameAccountNotification::kAccountTagsFieldNumber;
#endif  // !_MSC_VER

GameAccountNotification::GameAccountNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameAccountNotification)
}

void GameAccountNotification::InitAsDefaultInstance() {
  account_tags_ = const_cast< ::Battlenet::account::AccountFieldTags*>(&::Battlenet::account::AccountFieldTags::default_instance());
}

GameAccountNotification::GameAccountNotification(const GameAccountNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameAccountNotification)
}

void GameAccountNotification::SharedCtor() {
  _cached_size_ = 0;
  subscriber_id_ = GOOGLE_ULONGLONG(0);
  account_tags_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAccountNotification::~GameAccountNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameAccountNotification)
  SharedDtor();
}

void GameAccountNotification::SharedDtor() {
  if (this != default_instance_) {
    delete account_tags_;
  }
}

void GameAccountNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAccountNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAccountNotification_descriptor_;
}

const GameAccountNotification& GameAccountNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GameAccountNotification* GameAccountNotification::default_instance_ = NULL;

GameAccountNotification* GameAccountNotification::New() const {
  return new GameAccountNotification;
}

void GameAccountNotification::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    subscriber_id_ = GOOGLE_ULONGLONG(0);
    if (has_account_tags()) {
      if (account_tags_ != NULL) account_tags_->::Battlenet::account::AccountFieldTags::Clear();
    }
  }
  game_accounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameAccountNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GameAccountNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Battlenet.account.GameAccountList game_accounts = 1;
      case 1: {
        if (tag == 10) {
         parse_game_accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_accounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_game_accounts;
        if (input->ExpectTag(16)) goto parse_subscriber_id;
        break;
      }

      // optional uint64 subscriber_id = 2;
      case 2: {
        if (tag == 16) {
         parse_subscriber_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subscriber_id_)));
          set_has_subscriber_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_account_tags;
        break;
      }

      // optional .Battlenet.account.AccountFieldTags account_tags = 3;
      case 3: {
        if (tag == 26) {
         parse_account_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GameAccountNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GameAccountNotification)
  return false;
#undef DO_
}

void GameAccountNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GameAccountNotification)
  // repeated .Battlenet.account.GameAccountList game_accounts = 1;
  for (int i = 0; i < this->game_accounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->game_accounts(i), output);
  }

  // optional uint64 subscriber_id = 2;
  if (has_subscriber_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->subscriber_id(), output);
  }

  // optional .Battlenet.account.AccountFieldTags account_tags = 3;
  if (has_account_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->account_tags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GameAccountNotification)
}

::google::protobuf::uint8* GameAccountNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GameAccountNotification)
  // repeated .Battlenet.account.GameAccountList game_accounts = 1;
  for (int i = 0; i < this->game_accounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_accounts(i), target);
  }

  // optional uint64 subscriber_id = 2;
  if (has_subscriber_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->subscriber_id(), target);
  }

  // optional .Battlenet.account.AccountFieldTags account_tags = 3;
  if (has_account_tags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->account_tags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GameAccountNotification)
  return target;
}

int GameAccountNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 subscriber_id = 2;
    if (has_subscriber_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subscriber_id());
    }

    // optional .Battlenet.account.AccountFieldTags account_tags = 3;
    if (has_account_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_tags());
    }

  }
  // repeated .Battlenet.account.GameAccountList game_accounts = 1;
  total_size += 1 * this->game_accounts_size();
  for (int i = 0; i < this->game_accounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_accounts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAccountNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameAccountNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameAccountNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameAccountNotification::MergeFrom(const GameAccountNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_accounts_.MergeFrom(from.game_accounts_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_subscriber_id()) {
      set_subscriber_id(from.subscriber_id());
    }
    if (from.has_account_tags()) {
      mutable_account_tags()->::Battlenet::account::AccountFieldTags::MergeFrom(from.account_tags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameAccountNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountNotification::CopyFrom(const GameAccountNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountNotification::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->game_accounts())) return false;
  return true;
}

void GameAccountNotification::Swap(GameAccountNotification* other) {
  if (other != this) {
    game_accounts_.Swap(&other->game_accounts_);
    std::swap(subscriber_id_, other->subscriber_id_);
    std::swap(account_tags_, other->account_tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameAccountNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAccountNotification_descriptor_;
  metadata.reflection = GameAccountNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAccountSessionNotification::kGameAccountFieldNumber;
const int GameAccountSessionNotification::kSessionInfoFieldNumber;
#endif  // !_MSC_VER

GameAccountSessionNotification::GameAccountSessionNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameAccountSessionNotification)
}

void GameAccountSessionNotification::InitAsDefaultInstance() {
  game_account_ = const_cast< ::Battlenet::account::GameAccountHandle*>(&::Battlenet::account::GameAccountHandle::default_instance());
  session_info_ = const_cast< ::Battlenet::account::GameSessionUpdateInfo*>(&::Battlenet::account::GameSessionUpdateInfo::default_instance());
}

GameAccountSessionNotification::GameAccountSessionNotification(const GameAccountSessionNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameAccountSessionNotification)
}

void GameAccountSessionNotification::SharedCtor() {
  _cached_size_ = 0;
  game_account_ = NULL;
  session_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAccountSessionNotification::~GameAccountSessionNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameAccountSessionNotification)
  SharedDtor();
}

void GameAccountSessionNotification::SharedDtor() {
  if (this != default_instance_) {
    delete game_account_;
    delete session_info_;
  }
}

void GameAccountSessionNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAccountSessionNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAccountSessionNotification_descriptor_;
}

const GameAccountSessionNotification& GameAccountSessionNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5fservice_2eproto();
  return *default_instance_;
}

GameAccountSessionNotification* GameAccountSessionNotification::default_instance_ = NULL;

GameAccountSessionNotification* GameAccountSessionNotification::New() const {
  return new GameAccountSessionNotification;
}

void GameAccountSessionNotification::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_game_account()) {
      if (game_account_ != NULL) game_account_->::Battlenet::account::GameAccountHandle::Clear();
    }
    if (has_session_info()) {
      if (session_info_ != NULL) session_info_->::Battlenet::account::GameSessionUpdateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameAccountSessionNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Battlenet.account.GameAccountSessionNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Battlenet.account.GameAccountHandle game_account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_info;
        break;
      }

      // optional .Battlenet.account.GameSessionUpdateInfo session_info = 2;
      case 2: {
        if (tag == 18) {
         parse_session_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Battlenet.account.GameAccountSessionNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Battlenet.account.GameAccountSessionNotification)
  return false;
#undef DO_
}

void GameAccountSessionNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Battlenet.account.GameAccountSessionNotification)
  // optional .Battlenet.account.GameAccountHandle game_account = 1;
  if (has_game_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->game_account(), output);
  }

  // optional .Battlenet.account.GameSessionUpdateInfo session_info = 2;
  if (has_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->session_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Battlenet.account.GameAccountSessionNotification)
}

::google::protobuf::uint8* GameAccountSessionNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Battlenet.account.GameAccountSessionNotification)
  // optional .Battlenet.account.GameAccountHandle game_account = 1;
  if (has_game_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_account(), target);
  }

  // optional .Battlenet.account.GameSessionUpdateInfo session_info = 2;
  if (has_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->session_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Battlenet.account.GameAccountSessionNotification)
  return target;
}

int GameAccountSessionNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Battlenet.account.GameAccountHandle game_account = 1;
    if (has_game_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account());
    }

    // optional .Battlenet.account.GameSessionUpdateInfo session_info = 2;
    if (has_session_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAccountSessionNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameAccountSessionNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameAccountSessionNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameAccountSessionNotification::MergeFrom(const GameAccountSessionNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_account()) {
      mutable_game_account()->::Battlenet::account::GameAccountHandle::MergeFrom(from.game_account());
    }
    if (from.has_session_info()) {
      mutable_session_info()->::Battlenet::account::GameSessionUpdateInfo::MergeFrom(from.session_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameAccountSessionNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAccountSessionNotification::CopyFrom(const GameAccountSessionNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAccountSessionNotification::IsInitialized() const {

  if (has_game_account()) {
    if (!this->game_account().IsInitialized()) return false;
  }
  return true;
}

void GameAccountSessionNotification::Swap(GameAccountSessionNotification* other) {
  if (other != this) {
    std::swap(game_account_, other->game_account_);
    std::swap(session_info_, other->session_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameAccountSessionNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAccountSessionNotification_descriptor_;
  metadata.reflection = GameAccountSessionNotification_reflection_;
  return metadata;
}


// ===================================================================

AccountService::~AccountService() {}

const ::google::protobuf::ServiceDescriptor* AccountService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* AccountService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountService_descriptor_;
}

void AccountService::GetGameAccount(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::GameAccountHandle*,
                         ::Battlenet::account::GameAccountBlob*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGameAccount() not implemented.");
  done->Run();
}

void AccountService::GetAccount(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::GetAccountRequest*,
                         ::Battlenet::account::GetAccountResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAccount() not implemented.");
  done->Run();
}

void AccountService::CreateGameAccount(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::CreateGameAccountRequest*,
                         ::Battlenet::account::GameAccountHandle*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateGameAccount() not implemented.");
  done->Run();
}

void AccountService::IsIgrAddress(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::IsIgrAddressRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IsIgrAddress() not implemented.");
  done->Run();
}

void AccountService::CacheExpire(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::CacheExpireRequest*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CacheExpire() not implemented.");
  done->Run();
}

void AccountService::CredentialUpdate(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::CredentialUpdateRequest*,
                         ::Battlenet::account::CredentialUpdateResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CredentialUpdate() not implemented.");
  done->Run();
}

void AccountService::Subscribe(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::SubscriptionUpdateRequest*,
                         ::Battlenet::account::SubscriptionUpdateResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Subscribe() not implemented.");
  done->Run();
}

void AccountService::Unsubscribe(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::SubscriptionUpdateRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Unsubscribe() not implemented.");
  done->Run();
}

void AccountService::GetAccountState(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::GetAccountStateRequest*,
                         ::Battlenet::account::GetAccountStateResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAccountState() not implemented.");
  done->Run();
}

void AccountService::GetGameAccountState(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::GetGameAccountStateRequest*,
                         ::Battlenet::account::GetGameAccountStateResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGameAccountState() not implemented.");
  done->Run();
}

void AccountService::GetLicenses(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::GetLicensesRequest*,
                         ::Battlenet::account::GetLicensesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLicenses() not implemented.");
  done->Run();
}

void AccountService::GetGameTimeRemainingInfo(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::GetGameTimeRemainingInfoRequest*,
                         ::Battlenet::account::GetGameTimeRemainingInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGameTimeRemainingInfo() not implemented.");
  done->Run();
}

void AccountService::GetGameSessionInfo(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::GetGameSessionInfoRequest*,
                         ::Battlenet::account::GetGameSessionInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGameSessionInfo() not implemented.");
  done->Run();
}

void AccountService::GetCAISInfo(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::GetCAISInfoRequest*,
                         ::Battlenet::account::GetCAISInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetCAISInfo() not implemented.");
  done->Run();
}

void AccountService::ForwardCacheExpire(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::ForwardCacheExpireRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ForwardCacheExpire() not implemented.");
  done->Run();
}

void AccountService::GetAuthorizedData(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::GetAuthorizedDataRequest*,
                         ::Battlenet::account::GetAuthorizedDataResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAuthorizedData() not implemented.");
  done->Run();
}

void AccountService::AccountFlagUpdate(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::AccountFlagUpdateRequest*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AccountFlagUpdate() not implemented.");
  done->Run();
}

void AccountService::GameAccountFlagUpdate(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::GameAccountFlagUpdateRequest*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GameAccountFlagUpdate() not implemented.");
  done->Run();
}

void AccountService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), AccountService_descriptor_);
  switch(method->index()) {
    case 0:
      GetGameAccount(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::GameAccountHandle*>(request),
             ::google::protobuf::down_cast< ::Battlenet::account::GameAccountBlob*>(response),
             done);
      break;
    case 1:
      GetAccount(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::GetAccountRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::account::GetAccountResponse*>(response),
             done);
      break;
    case 2:
      CreateGameAccount(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::CreateGameAccountRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::account::GameAccountHandle*>(response),
             done);
      break;
    case 3:
      IsIgrAddress(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::IsIgrAddressRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 4:
      CacheExpire(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::CacheExpireRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 5:
      CredentialUpdate(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::CredentialUpdateRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::account::CredentialUpdateResponse*>(response),
             done);
      break;
    case 6:
      Subscribe(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::SubscriptionUpdateRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::account::SubscriptionUpdateResponse*>(response),
             done);
      break;
    case 7:
      Unsubscribe(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::SubscriptionUpdateRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 8:
      GetAccountState(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::GetAccountStateRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::account::GetAccountStateResponse*>(response),
             done);
      break;
    case 9:
      GetGameAccountState(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::GetGameAccountStateRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::account::GetGameAccountStateResponse*>(response),
             done);
      break;
    case 10:
      GetLicenses(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::GetLicensesRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::account::GetLicensesResponse*>(response),
             done);
      break;
    case 11:
      GetGameTimeRemainingInfo(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::GetGameTimeRemainingInfoRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::account::GetGameTimeRemainingInfoResponse*>(response),
             done);
      break;
    case 12:
      GetGameSessionInfo(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::GetGameSessionInfoRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::account::GetGameSessionInfoResponse*>(response),
             done);
      break;
    case 13:
      GetCAISInfo(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::GetCAISInfoRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::account::GetCAISInfoResponse*>(response),
             done);
      break;
    case 14:
      ForwardCacheExpire(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::ForwardCacheExpireRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 15:
      GetAuthorizedData(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::GetAuthorizedDataRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::account::GetAuthorizedDataResponse*>(response),
             done);
      break;
    case 16:
      AccountFlagUpdate(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::AccountFlagUpdateRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 17:
      GameAccountFlagUpdate(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::GameAccountFlagUpdateRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& AccountService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::account::GameAccountHandle::default_instance();
    case 1:
      return ::Battlenet::account::GetAccountRequest::default_instance();
    case 2:
      return ::Battlenet::account::CreateGameAccountRequest::default_instance();
    case 3:
      return ::Battlenet::account::IsIgrAddressRequest::default_instance();
    case 4:
      return ::Battlenet::account::CacheExpireRequest::default_instance();
    case 5:
      return ::Battlenet::account::CredentialUpdateRequest::default_instance();
    case 6:
      return ::Battlenet::account::SubscriptionUpdateRequest::default_instance();
    case 7:
      return ::Battlenet::account::SubscriptionUpdateRequest::default_instance();
    case 8:
      return ::Battlenet::account::GetAccountStateRequest::default_instance();
    case 9:
      return ::Battlenet::account::GetGameAccountStateRequest::default_instance();
    case 10:
      return ::Battlenet::account::GetLicensesRequest::default_instance();
    case 11:
      return ::Battlenet::account::GetGameTimeRemainingInfoRequest::default_instance();
    case 12:
      return ::Battlenet::account::GetGameSessionInfoRequest::default_instance();
    case 13:
      return ::Battlenet::account::GetCAISInfoRequest::default_instance();
    case 14:
      return ::Battlenet::account::ForwardCacheExpireRequest::default_instance();
    case 15:
      return ::Battlenet::account::GetAuthorizedDataRequest::default_instance();
    case 16:
      return ::Battlenet::account::AccountFlagUpdateRequest::default_instance();
    case 17:
      return ::Battlenet::account::GameAccountFlagUpdateRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& AccountService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::account::GameAccountBlob::default_instance();
    case 1:
      return ::Battlenet::account::GetAccountResponse::default_instance();
    case 2:
      return ::Battlenet::account::GameAccountHandle::default_instance();
    case 3:
      return ::Battlenet::NoData::default_instance();
    case 4:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 5:
      return ::Battlenet::account::CredentialUpdateResponse::default_instance();
    case 6:
      return ::Battlenet::account::SubscriptionUpdateResponse::default_instance();
    case 7:
      return ::Battlenet::NoData::default_instance();
    case 8:
      return ::Battlenet::account::GetAccountStateResponse::default_instance();
    case 9:
      return ::Battlenet::account::GetGameAccountStateResponse::default_instance();
    case 10:
      return ::Battlenet::account::GetLicensesResponse::default_instance();
    case 11:
      return ::Battlenet::account::GetGameTimeRemainingInfoResponse::default_instance();
    case 12:
      return ::Battlenet::account::GetGameSessionInfoResponse::default_instance();
    case 13:
      return ::Battlenet::account::GetCAISInfoResponse::default_instance();
    case 14:
      return ::Battlenet::NoData::default_instance();
    case 15:
      return ::Battlenet::account::GetAuthorizedDataResponse::default_instance();
    case 16:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 17:
      return ::Battlenet::NO_RESPONSE::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

AccountService_Stub::AccountService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
AccountService_Stub::AccountService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
AccountService_Stub::~AccountService_Stub() {
  if (owns_channel_) delete channel_;
}

void AccountService_Stub::GetGameAccount(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::GameAccountHandle* request,
                              ::Battlenet::account::GameAccountBlob* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void AccountService_Stub::GetAccount(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::GetAccountRequest* request,
                              ::Battlenet::account::GetAccountResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void AccountService_Stub::CreateGameAccount(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::CreateGameAccountRequest* request,
                              ::Battlenet::account::GameAccountHandle* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void AccountService_Stub::IsIgrAddress(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::IsIgrAddressRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void AccountService_Stub::CacheExpire(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::CacheExpireRequest* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void AccountService_Stub::CredentialUpdate(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::CredentialUpdateRequest* request,
                              ::Battlenet::account::CredentialUpdateResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void AccountService_Stub::Subscribe(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::SubscriptionUpdateRequest* request,
                              ::Battlenet::account::SubscriptionUpdateResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void AccountService_Stub::Unsubscribe(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::SubscriptionUpdateRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void AccountService_Stub::GetAccountState(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::GetAccountStateRequest* request,
                              ::Battlenet::account::GetAccountStateResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void AccountService_Stub::GetGameAccountState(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::GetGameAccountStateRequest* request,
                              ::Battlenet::account::GetGameAccountStateResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void AccountService_Stub::GetLicenses(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::GetLicensesRequest* request,
                              ::Battlenet::account::GetLicensesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void AccountService_Stub::GetGameTimeRemainingInfo(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::GetGameTimeRemainingInfoRequest* request,
                              ::Battlenet::account::GetGameTimeRemainingInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void AccountService_Stub::GetGameSessionInfo(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::GetGameSessionInfoRequest* request,
                              ::Battlenet::account::GetGameSessionInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void AccountService_Stub::GetCAISInfo(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::GetCAISInfoRequest* request,
                              ::Battlenet::account::GetCAISInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void AccountService_Stub::ForwardCacheExpire(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::ForwardCacheExpireRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void AccountService_Stub::GetAuthorizedData(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::GetAuthorizedDataRequest* request,
                              ::Battlenet::account::GetAuthorizedDataResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void AccountService_Stub::AccountFlagUpdate(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::AccountFlagUpdateRequest* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void AccountService_Stub::GameAccountFlagUpdate(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::GameAccountFlagUpdateRequest* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
// ===================================================================

AccountListener::~AccountListener() {}

const ::google::protobuf::ServiceDescriptor* AccountListener::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountListener_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* AccountListener::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountListener_descriptor_;
}

void AccountListener::OnAccountStateUpdated(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::AccountStateNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnAccountStateUpdated() not implemented.");
  done->Run();
}

void AccountListener::OnGameAccountStateUpdated(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::GameAccountStateNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnGameAccountStateUpdated() not implemented.");
  done->Run();
}

void AccountListener::OnGameAccountsUpdated(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::GameAccountNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnGameAccountsUpdated() not implemented.");
  done->Run();
}

void AccountListener::OnGameSessionUpdated(::google::protobuf::RpcController* controller,
                         const ::Battlenet::account::GameAccountSessionNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnGameSessionUpdated() not implemented.");
  done->Run();
}

void AccountListener::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), AccountListener_descriptor_);
  switch(method->index()) {
    case 0:
      OnAccountStateUpdated(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::AccountStateNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 1:
      OnGameAccountStateUpdated(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::GameAccountStateNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 2:
      OnGameAccountsUpdated(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::GameAccountNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 3:
      OnGameSessionUpdated(controller,
             ::google::protobuf::down_cast<const ::Battlenet::account::GameAccountSessionNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& AccountListener::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::account::AccountStateNotification::default_instance();
    case 1:
      return ::Battlenet::account::GameAccountStateNotification::default_instance();
    case 2:
      return ::Battlenet::account::GameAccountNotification::default_instance();
    case 3:
      return ::Battlenet::account::GameAccountSessionNotification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& AccountListener::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 1:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 2:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 3:
      return ::Battlenet::NO_RESPONSE::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

AccountListener_Stub::AccountListener_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
AccountListener_Stub::AccountListener_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
AccountListener_Stub::~AccountListener_Stub() {
  if (owns_channel_) delete channel_;
}

void AccountListener_Stub::OnAccountStateUpdated(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::AccountStateNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void AccountListener_Stub::OnGameAccountStateUpdated(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::GameAccountStateNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void AccountListener_Stub::OnGameAccountsUpdated(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::GameAccountNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void AccountListener_Stub::OnGameSessionUpdated(::google::protobuf::RpcController* controller,
                              const ::Battlenet::account::GameAccountSessionNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace account
}  // namespace Battlenet

// @@protoc_insertion_point(global_scope)
