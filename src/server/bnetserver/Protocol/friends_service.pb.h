// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friends_service.proto

#ifndef PROTOBUF_friends_5fservice_2eproto__INCLUDED
#define PROTOBUF_friends_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "attribute_types.pb.h"
#include "entity_types.pb.h"
#include "friends_types.pb.h"
#include "invitation_types.pb.h"
#include "role_types.pb.h"
#include "rpc_types.pb.h"
#include "ServiceBase.h"
#include "Session.h"
#include "MessageBuffer.h"
#include <type_traits>
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace friends {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_friends_5fservice_2eproto();
void protobuf_AssignDesc_friends_5fservice_2eproto();
void protobuf_ShutdownFile_friends_5fservice_2eproto();

class SubscribeRequest;
class SubscribeResponse;
class UnsubscribeRequest;
class GenericFriendRequest;
class GenericFriendResponse;
class AssignRoleRequest;
class ViewFriendsRequest;
class ViewFriendsResponse;
class UpdateFriendStateRequest;
class FriendNotification;
class UpdateFriendStateNotification;
class InvitationNotification;

// ===================================================================

class SubscribeRequest : public ::google::protobuf::Message {
 public:
  SubscribeRequest();
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeRequest& default_instance();

  void Swap(SubscribeRequest* other);

  // implements Message ----------------------------------------------

  SubscribeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeRequest& from);
  void MergeFrom(const SubscribeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // required uint64 object_id = 2;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Battlenet.friends.SubscribeRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_object_id();
  inline void clear_has_object_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* agent_id_;
  ::google::protobuf::uint64 object_id_;
  friend void  protobuf_AddDesc_friends_5fservice_2eproto();
  friend void protobuf_AssignDesc_friends_5fservice_2eproto();
  friend void protobuf_ShutdownFile_friends_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SubscribeRequest* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeResponse : public ::google::protobuf::Message {
 public:
  SubscribeResponse();
  virtual ~SubscribeResponse();

  SubscribeResponse(const SubscribeResponse& from);

  inline SubscribeResponse& operator=(const SubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeResponse& default_instance();

  void Swap(SubscribeResponse* other);

  // implements Message ----------------------------------------------

  SubscribeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeResponse& from);
  void MergeFrom(const SubscribeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 max_friends = 1;
  inline bool has_max_friends() const;
  inline void clear_max_friends();
  static const int kMaxFriendsFieldNumber = 1;
  inline ::google::protobuf::uint32 max_friends() const;
  inline void set_max_friends(::google::protobuf::uint32 value);

  // optional uint32 max_received_invitations = 2;
  inline bool has_max_received_invitations() const;
  inline void clear_max_received_invitations();
  static const int kMaxReceivedInvitationsFieldNumber = 2;
  inline ::google::protobuf::uint32 max_received_invitations() const;
  inline void set_max_received_invitations(::google::protobuf::uint32 value);

  // optional uint32 max_sent_invitations = 3;
  inline bool has_max_sent_invitations() const;
  inline void clear_max_sent_invitations();
  static const int kMaxSentInvitationsFieldNumber = 3;
  inline ::google::protobuf::uint32 max_sent_invitations() const;
  inline void set_max_sent_invitations(::google::protobuf::uint32 value);

  // repeated .Battlenet.Role role = 4;
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 4;
  inline const ::Battlenet::Role& role(int index) const;
  inline ::Battlenet::Role* mutable_role(int index);
  inline ::Battlenet::Role* add_role();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Role >&
      role() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Role >*
      mutable_role();

  // repeated .Battlenet.friends.Friend friends = 5;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 5;
  inline const ::Battlenet::friends::Friend& friends(int index) const;
  inline ::Battlenet::friends::Friend* mutable_friends(int index);
  inline ::Battlenet::friends::Friend* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::friends::Friend >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::friends::Friend >*
      mutable_friends();

  // repeated .Battlenet.Invitation sent_invitations = 6;
  inline int sent_invitations_size() const;
  inline void clear_sent_invitations();
  static const int kSentInvitationsFieldNumber = 6;
  inline const ::Battlenet::Invitation& sent_invitations(int index) const;
  inline ::Battlenet::Invitation* mutable_sent_invitations(int index);
  inline ::Battlenet::Invitation* add_sent_invitations();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Invitation >&
      sent_invitations() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Invitation >*
      mutable_sent_invitations();

  // repeated .Battlenet.Invitation received_invitations = 7;
  inline int received_invitations_size() const;
  inline void clear_received_invitations();
  static const int kReceivedInvitationsFieldNumber = 7;
  inline const ::Battlenet::Invitation& received_invitations(int index) const;
  inline ::Battlenet::Invitation* mutable_received_invitations(int index);
  inline ::Battlenet::Invitation* add_received_invitations();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Invitation >&
      received_invitations() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Invitation >*
      mutable_received_invitations();

  // @@protoc_insertion_point(class_scope:Battlenet.friends.SubscribeResponse)
 private:
  inline void set_has_max_friends();
  inline void clear_has_max_friends();
  inline void set_has_max_received_invitations();
  inline void clear_has_max_received_invitations();
  inline void set_has_max_sent_invitations();
  inline void clear_has_max_sent_invitations();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 max_friends_;
  ::google::protobuf::uint32 max_received_invitations_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::Role > role_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::friends::Friend > friends_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::Invitation > sent_invitations_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::Invitation > received_invitations_;
  ::google::protobuf::uint32 max_sent_invitations_;
  friend void  protobuf_AddDesc_friends_5fservice_2eproto();
  friend void protobuf_AssignDesc_friends_5fservice_2eproto();
  friend void protobuf_ShutdownFile_friends_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SubscribeResponse* default_instance_;
};
// -------------------------------------------------------------------

class UnsubscribeRequest : public ::google::protobuf::Message {
 public:
  UnsubscribeRequest();
  virtual ~UnsubscribeRequest();

  UnsubscribeRequest(const UnsubscribeRequest& from);

  inline UnsubscribeRequest& operator=(const UnsubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnsubscribeRequest& default_instance();

  void Swap(UnsubscribeRequest* other);

  // implements Message ----------------------------------------------

  UnsubscribeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnsubscribeRequest& from);
  void MergeFrom(const UnsubscribeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // optional uint64 object_id = 2;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Battlenet.friends.UnsubscribeRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_object_id();
  inline void clear_has_object_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* agent_id_;
  ::google::protobuf::uint64 object_id_;
  friend void  protobuf_AddDesc_friends_5fservice_2eproto();
  friend void protobuf_AssignDesc_friends_5fservice_2eproto();
  friend void protobuf_ShutdownFile_friends_5fservice_2eproto();

  void InitAsDefaultInstance();
  static UnsubscribeRequest* default_instance_;
};
// -------------------------------------------------------------------

class GenericFriendRequest : public ::google::protobuf::Message {
 public:
  GenericFriendRequest();
  virtual ~GenericFriendRequest();

  GenericFriendRequest(const GenericFriendRequest& from);

  inline GenericFriendRequest& operator=(const GenericFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericFriendRequest& default_instance();

  void Swap(GenericFriendRequest* other);

  // implements Message ----------------------------------------------

  GenericFriendRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenericFriendRequest& from);
  void MergeFrom(const GenericFriendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // required .Battlenet.EntityId target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& target_id() const;
  inline ::Battlenet::EntityId* mutable_target_id();
  inline ::Battlenet::EntityId* release_target_id();
  inline void set_allocated_target_id(::Battlenet::EntityId* target_id);

  // @@protoc_insertion_point(class_scope:Battlenet.friends.GenericFriendRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* agent_id_;
  ::Battlenet::EntityId* target_id_;
  friend void  protobuf_AddDesc_friends_5fservice_2eproto();
  friend void protobuf_AssignDesc_friends_5fservice_2eproto();
  friend void protobuf_ShutdownFile_friends_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GenericFriendRequest* default_instance_;
};
// -------------------------------------------------------------------

class GenericFriendResponse : public ::google::protobuf::Message {
 public:
  GenericFriendResponse();
  virtual ~GenericFriendResponse();

  GenericFriendResponse(const GenericFriendResponse& from);

  inline GenericFriendResponse& operator=(const GenericFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericFriendResponse& default_instance();

  void Swap(GenericFriendResponse* other);

  // implements Message ----------------------------------------------

  GenericFriendResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenericFriendResponse& from);
  void MergeFrom(const GenericFriendResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.friends.Friend target_friend = 1;
  inline bool has_target_friend() const;
  inline void clear_target_friend();
  static const int kTargetFriendFieldNumber = 1;
  inline const ::Battlenet::friends::Friend& target_friend() const;
  inline ::Battlenet::friends::Friend* mutable_target_friend();
  inline ::Battlenet::friends::Friend* release_target_friend();
  inline void set_allocated_target_friend(::Battlenet::friends::Friend* target_friend);

  // @@protoc_insertion_point(class_scope:Battlenet.friends.GenericFriendResponse)
 private:
  inline void set_has_target_friend();
  inline void clear_has_target_friend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::friends::Friend* target_friend_;
  friend void  protobuf_AddDesc_friends_5fservice_2eproto();
  friend void protobuf_AssignDesc_friends_5fservice_2eproto();
  friend void protobuf_ShutdownFile_friends_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GenericFriendResponse* default_instance_;
};
// -------------------------------------------------------------------

class AssignRoleRequest : public ::google::protobuf::Message {
 public:
  AssignRoleRequest();
  virtual ~AssignRoleRequest();

  AssignRoleRequest(const AssignRoleRequest& from);

  inline AssignRoleRequest& operator=(const AssignRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AssignRoleRequest& default_instance();

  void Swap(AssignRoleRequest* other);

  // implements Message ----------------------------------------------

  AssignRoleRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AssignRoleRequest& from);
  void MergeFrom(const AssignRoleRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // required .Battlenet.EntityId target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& target_id() const;
  inline ::Battlenet::EntityId* mutable_target_id();
  inline ::Battlenet::EntityId* release_target_id();
  inline void set_allocated_target_id(::Battlenet::EntityId* target_id);

  // repeated int32 role = 3;
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 3;
  inline ::google::protobuf::int32 role(int index) const;
  inline void set_role(int index, ::google::protobuf::int32 value);
  inline void add_role(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      role() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_role();

  // @@protoc_insertion_point(class_scope:Battlenet.friends.AssignRoleRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* agent_id_;
  ::Battlenet::EntityId* target_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > role_;
  friend void  protobuf_AddDesc_friends_5fservice_2eproto();
  friend void protobuf_AssignDesc_friends_5fservice_2eproto();
  friend void protobuf_ShutdownFile_friends_5fservice_2eproto();

  void InitAsDefaultInstance();
  static AssignRoleRequest* default_instance_;
};
// -------------------------------------------------------------------

class ViewFriendsRequest : public ::google::protobuf::Message {
 public:
  ViewFriendsRequest();
  virtual ~ViewFriendsRequest();

  ViewFriendsRequest(const ViewFriendsRequest& from);

  inline ViewFriendsRequest& operator=(const ViewFriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewFriendsRequest& default_instance();

  void Swap(ViewFriendsRequest* other);

  // implements Message ----------------------------------------------

  ViewFriendsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ViewFriendsRequest& from);
  void MergeFrom(const ViewFriendsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // required .Battlenet.EntityId target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& target_id() const;
  inline ::Battlenet::EntityId* mutable_target_id();
  inline ::Battlenet::EntityId* release_target_id();
  inline void set_allocated_target_id(::Battlenet::EntityId* target_id);

  // repeated uint32 role = 3 [packed = true];
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 3;
  inline ::google::protobuf::uint32 role(int index) const;
  inline void set_role(int index, ::google::protobuf::uint32 value);
  inline void add_role(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      role() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_role();

  // @@protoc_insertion_point(class_scope:Battlenet.friends.ViewFriendsRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* agent_id_;
  ::Battlenet::EntityId* target_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > role_;
  mutable int _role_cached_byte_size_;
  friend void  protobuf_AddDesc_friends_5fservice_2eproto();
  friend void protobuf_AssignDesc_friends_5fservice_2eproto();
  friend void protobuf_ShutdownFile_friends_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ViewFriendsRequest* default_instance_;
};
// -------------------------------------------------------------------

class ViewFriendsResponse : public ::google::protobuf::Message {
 public:
  ViewFriendsResponse();
  virtual ~ViewFriendsResponse();

  ViewFriendsResponse(const ViewFriendsResponse& from);

  inline ViewFriendsResponse& operator=(const ViewFriendsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewFriendsResponse& default_instance();

  void Swap(ViewFriendsResponse* other);

  // implements Message ----------------------------------------------

  ViewFriendsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ViewFriendsResponse& from);
  void MergeFrom(const ViewFriendsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.friends.Friend friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::Battlenet::friends::Friend& friends(int index) const;
  inline ::Battlenet::friends::Friend* mutable_friends(int index);
  inline ::Battlenet::friends::Friend* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::friends::Friend >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::friends::Friend >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:Battlenet.friends.ViewFriendsResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::friends::Friend > friends_;
  friend void  protobuf_AddDesc_friends_5fservice_2eproto();
  friend void protobuf_AssignDesc_friends_5fservice_2eproto();
  friend void protobuf_ShutdownFile_friends_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ViewFriendsResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateFriendStateRequest : public ::google::protobuf::Message {
 public:
  UpdateFriendStateRequest();
  virtual ~UpdateFriendStateRequest();

  UpdateFriendStateRequest(const UpdateFriendStateRequest& from);

  inline UpdateFriendStateRequest& operator=(const UpdateFriendStateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFriendStateRequest& default_instance();

  void Swap(UpdateFriendStateRequest* other);

  // implements Message ----------------------------------------------

  UpdateFriendStateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateFriendStateRequest& from);
  void MergeFrom(const UpdateFriendStateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // required .Battlenet.EntityId target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& target_id() const;
  inline ::Battlenet::EntityId* mutable_target_id();
  inline ::Battlenet::EntityId* release_target_id();
  inline void set_allocated_target_id(::Battlenet::EntityId* target_id);

  // repeated .Battlenet.Attribute attribute = 3;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 3;
  inline const ::Battlenet::Attribute& attribute(int index) const;
  inline ::Battlenet::Attribute* mutable_attribute(int index);
  inline ::Battlenet::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >*
      mutable_attribute();

  // optional uint64 attributes_epoch = 4;
  inline bool has_attributes_epoch() const;
  inline void clear_attributes_epoch();
  static const int kAttributesEpochFieldNumber = 4;
  inline ::google::protobuf::uint64 attributes_epoch() const;
  inline void set_attributes_epoch(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Battlenet.friends.UpdateFriendStateRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_attributes_epoch();
  inline void clear_has_attributes_epoch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* agent_id_;
  ::Battlenet::EntityId* target_id_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute > attribute_;
  ::google::protobuf::uint64 attributes_epoch_;
  friend void  protobuf_AddDesc_friends_5fservice_2eproto();
  friend void protobuf_AssignDesc_friends_5fservice_2eproto();
  friend void protobuf_ShutdownFile_friends_5fservice_2eproto();

  void InitAsDefaultInstance();
  static UpdateFriendStateRequest* default_instance_;
};
// -------------------------------------------------------------------

class FriendNotification : public ::google::protobuf::Message {
 public:
  FriendNotification();
  virtual ~FriendNotification();

  FriendNotification(const FriendNotification& from);

  inline FriendNotification& operator=(const FriendNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendNotification& default_instance();

  void Swap(FriendNotification* other);

  // implements Message ----------------------------------------------

  FriendNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendNotification& from);
  void MergeFrom(const FriendNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Battlenet.friends.Friend target = 1;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 1;
  inline const ::Battlenet::friends::Friend& target() const;
  inline ::Battlenet::friends::Friend* mutable_target();
  inline ::Battlenet::friends::Friend* release_target();
  inline void set_allocated_target(::Battlenet::friends::Friend* target);

  // optional .Battlenet.EntityId game_account_id = 2;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& game_account_id() const;
  inline ::Battlenet::EntityId* mutable_game_account_id();
  inline ::Battlenet::EntityId* release_game_account_id();
  inline void set_allocated_game_account_id(::Battlenet::EntityId* game_account_id);

  // optional .Battlenet.ProcessId peer = 4;
  inline bool has_peer() const;
  inline void clear_peer();
  static const int kPeerFieldNumber = 4;
  inline const ::Battlenet::ProcessId& peer() const;
  inline ::Battlenet::ProcessId* mutable_peer();
  inline ::Battlenet::ProcessId* release_peer();
  inline void set_allocated_peer(::Battlenet::ProcessId* peer);

  // optional .Battlenet.EntityId account_id = 5;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 5;
  inline const ::Battlenet::EntityId& account_id() const;
  inline ::Battlenet::EntityId* mutable_account_id();
  inline ::Battlenet::EntityId* release_account_id();
  inline void set_allocated_account_id(::Battlenet::EntityId* account_id);

  // @@protoc_insertion_point(class_scope:Battlenet.friends.FriendNotification)
 private:
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_peer();
  inline void clear_has_peer();
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::friends::Friend* target_;
  ::Battlenet::EntityId* game_account_id_;
  ::Battlenet::ProcessId* peer_;
  ::Battlenet::EntityId* account_id_;
  friend void  protobuf_AddDesc_friends_5fservice_2eproto();
  friend void protobuf_AssignDesc_friends_5fservice_2eproto();
  friend void protobuf_ShutdownFile_friends_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FriendNotification* default_instance_;
};
// -------------------------------------------------------------------

class UpdateFriendStateNotification : public ::google::protobuf::Message {
 public:
  UpdateFriendStateNotification();
  virtual ~UpdateFriendStateNotification();

  UpdateFriendStateNotification(const UpdateFriendStateNotification& from);

  inline UpdateFriendStateNotification& operator=(const UpdateFriendStateNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFriendStateNotification& default_instance();

  void Swap(UpdateFriendStateNotification* other);

  // implements Message ----------------------------------------------

  UpdateFriendStateNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateFriendStateNotification& from);
  void MergeFrom(const UpdateFriendStateNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Battlenet.friends.Friend changed_friend = 1;
  inline bool has_changed_friend() const;
  inline void clear_changed_friend();
  static const int kChangedFriendFieldNumber = 1;
  inline const ::Battlenet::friends::Friend& changed_friend() const;
  inline ::Battlenet::friends::Friend* mutable_changed_friend();
  inline ::Battlenet::friends::Friend* release_changed_friend();
  inline void set_allocated_changed_friend(::Battlenet::friends::Friend* changed_friend);

  // optional .Battlenet.EntityId game_account_id = 2;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& game_account_id() const;
  inline ::Battlenet::EntityId* mutable_game_account_id();
  inline ::Battlenet::EntityId* release_game_account_id();
  inline void set_allocated_game_account_id(::Battlenet::EntityId* game_account_id);

  // optional .Battlenet.ProcessId peer = 4;
  inline bool has_peer() const;
  inline void clear_peer();
  static const int kPeerFieldNumber = 4;
  inline const ::Battlenet::ProcessId& peer() const;
  inline ::Battlenet::ProcessId* mutable_peer();
  inline ::Battlenet::ProcessId* release_peer();
  inline void set_allocated_peer(::Battlenet::ProcessId* peer);

  // optional .Battlenet.EntityId account_id = 5;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 5;
  inline const ::Battlenet::EntityId& account_id() const;
  inline ::Battlenet::EntityId* mutable_account_id();
  inline ::Battlenet::EntityId* release_account_id();
  inline void set_allocated_account_id(::Battlenet::EntityId* account_id);

  // @@protoc_insertion_point(class_scope:Battlenet.friends.UpdateFriendStateNotification)
 private:
  inline void set_has_changed_friend();
  inline void clear_has_changed_friend();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_peer();
  inline void clear_has_peer();
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::friends::Friend* changed_friend_;
  ::Battlenet::EntityId* game_account_id_;
  ::Battlenet::ProcessId* peer_;
  ::Battlenet::EntityId* account_id_;
  friend void  protobuf_AddDesc_friends_5fservice_2eproto();
  friend void protobuf_AssignDesc_friends_5fservice_2eproto();
  friend void protobuf_ShutdownFile_friends_5fservice_2eproto();

  void InitAsDefaultInstance();
  static UpdateFriendStateNotification* default_instance_;
};
// -------------------------------------------------------------------

class InvitationNotification : public ::google::protobuf::Message {
 public:
  InvitationNotification();
  virtual ~InvitationNotification();

  InvitationNotification(const InvitationNotification& from);

  inline InvitationNotification& operator=(const InvitationNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvitationNotification& default_instance();

  void Swap(InvitationNotification* other);

  // implements Message ----------------------------------------------

  InvitationNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvitationNotification& from);
  void MergeFrom(const InvitationNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Battlenet.Invitation invitation = 1;
  inline bool has_invitation() const;
  inline void clear_invitation();
  static const int kInvitationFieldNumber = 1;
  inline const ::Battlenet::Invitation& invitation() const;
  inline ::Battlenet::Invitation* mutable_invitation();
  inline ::Battlenet::Invitation* release_invitation();
  inline void set_allocated_invitation(::Battlenet::Invitation* invitation);

  // optional .Battlenet.EntityId game_account_id = 2;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& game_account_id() const;
  inline ::Battlenet::EntityId* mutable_game_account_id();
  inline ::Battlenet::EntityId* release_game_account_id();
  inline void set_allocated_game_account_id(::Battlenet::EntityId* game_account_id);

  // optional uint32 reason = 3 [default = 0];
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // optional .Battlenet.ProcessId peer = 4;
  inline bool has_peer() const;
  inline void clear_peer();
  static const int kPeerFieldNumber = 4;
  inline const ::Battlenet::ProcessId& peer() const;
  inline ::Battlenet::ProcessId* mutable_peer();
  inline ::Battlenet::ProcessId* release_peer();
  inline void set_allocated_peer(::Battlenet::ProcessId* peer);

  // optional .Battlenet.EntityId account_id = 5;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 5;
  inline const ::Battlenet::EntityId& account_id() const;
  inline ::Battlenet::EntityId* mutable_account_id();
  inline ::Battlenet::EntityId* release_account_id();
  inline void set_allocated_account_id(::Battlenet::EntityId* account_id);

  // @@protoc_insertion_point(class_scope:Battlenet.friends.InvitationNotification)
 private:
  inline void set_has_invitation();
  inline void clear_has_invitation();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_peer();
  inline void clear_has_peer();
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::Invitation* invitation_;
  ::Battlenet::EntityId* game_account_id_;
  ::Battlenet::ProcessId* peer_;
  ::Battlenet::EntityId* account_id_;
  ::google::protobuf::uint32 reason_;
  friend void  protobuf_AddDesc_friends_5fservice_2eproto();
  friend void protobuf_AssignDesc_friends_5fservice_2eproto();
  friend void protobuf_ShutdownFile_friends_5fservice_2eproto();

  void InitAsDefaultInstance();
  static InvitationNotification* default_instance_;
};
// ===================================================================

class FriendsService : public ServiceBase
{
 public:
  explicit FriendsService(Battlenet::Session* session) : _session(session) { }
  ~FriendsService() { }

  typedef std::integral_constant<uint32, 0xA3DDB1BDu> Hash;

  static google::protobuf::ServiceDescriptor const* descriptor();

  // client methods --------------------------------------------------

  template<void(Battlenet::Session::*Handler)(::Battlenet::friends::SubscribeResponse const*)>
  inline void Subscribe(::Battlenet::friends::SubscribeRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsService.Subscribe(Battlenet.friends.SubscribeRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::friends::SubscribeResponse, Handler>(Hash::value, 1, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void SendInvitation(::Battlenet::SendInvitationRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsService.SendInvitation(Battlenet.SendInvitationRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 2, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void AcceptInvitation(::Battlenet::GenericInvitationRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsService.AcceptInvitation(Battlenet.GenericInvitationRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 3, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void RevokeInvitation(::Battlenet::GenericInvitationRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsService.RevokeInvitation(Battlenet.GenericInvitationRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 4, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void DeclineInvitation(::Battlenet::GenericInvitationRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsService.DeclineInvitation(Battlenet.GenericInvitationRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 5, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void IgnoreInvitation(::Battlenet::GenericInvitationRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsService.IgnoreInvitation(Battlenet.GenericInvitationRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 6, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void AssignRole(::Battlenet::friends::AssignRoleRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsService.AssignRole(Battlenet.friends.AssignRoleRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 7, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::friends::GenericFriendResponse const*)>
  inline void RemoveFriend(::Battlenet::friends::GenericFriendRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsService.RemoveFriend(Battlenet.friends.GenericFriendRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::friends::GenericFriendResponse, Handler>(Hash::value, 8, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::friends::ViewFriendsResponse const*)>
  inline void ViewFriends(::Battlenet::friends::ViewFriendsRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsService.ViewFriends(Battlenet.friends.ViewFriendsRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::friends::ViewFriendsResponse, Handler>(Hash::value, 9, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void UpdateFriendState(::Battlenet::friends::UpdateFriendStateRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsService.UpdateFriendState(Battlenet.friends.UpdateFriendStateRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 10, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void Unsubscribe(::Battlenet::friends::UnsubscribeRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsService.Unsubscribe(Battlenet.friends.UnsubscribeRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 11, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void RevokeAllInvitations(::Battlenet::friends::GenericFriendRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsService.RevokeAllInvitations(Battlenet.friends.GenericFriendRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 12, request);
  }

  // server methods --------------------------------------------------

  void CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) override final;

 protected:
  virtual uint32 HandleSubscribe(::Battlenet::friends::SubscribeRequest const* request, ::Battlenet::friends::SubscribeResponse* response);
  virtual uint32 HandleSendInvitation(::Battlenet::SendInvitationRequest const* request, ::Battlenet::NoData* response);
  virtual uint32 HandleAcceptInvitation(::Battlenet::GenericInvitationRequest const* request, ::Battlenet::NoData* response);
  virtual uint32 HandleRevokeInvitation(::Battlenet::GenericInvitationRequest const* request, ::Battlenet::NoData* response);
  virtual uint32 HandleDeclineInvitation(::Battlenet::GenericInvitationRequest const* request, ::Battlenet::NoData* response);
  virtual uint32 HandleIgnoreInvitation(::Battlenet::GenericInvitationRequest const* request, ::Battlenet::NoData* response);
  virtual uint32 HandleAssignRole(::Battlenet::friends::AssignRoleRequest const* request, ::Battlenet::NoData* response);
  virtual uint32 HandleRemoveFriend(::Battlenet::friends::GenericFriendRequest const* request, ::Battlenet::friends::GenericFriendResponse* response);
  virtual uint32 HandleViewFriends(::Battlenet::friends::ViewFriendsRequest const* request, ::Battlenet::friends::ViewFriendsResponse* response);
  virtual uint32 HandleUpdateFriendState(::Battlenet::friends::UpdateFriendStateRequest const* request, ::Battlenet::NoData* response);
  virtual uint32 HandleUnsubscribe(::Battlenet::friends::UnsubscribeRequest const* request, ::Battlenet::NoData* response);
  virtual uint32 HandleRevokeAllInvitations(::Battlenet::friends::GenericFriendRequest const* request, ::Battlenet::NoData* response);

  Battlenet::Session* _session;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendsService);
};

// -------------------------------------------------------------------

class FriendsListener : public ServiceBase
{
 public:
  explicit FriendsListener(Battlenet::Session* session) : _session(session) { }
  ~FriendsListener() { }

  typedef std::integral_constant<uint32, 0x6F259A13u> Hash;

  static google::protobuf::ServiceDescriptor const* descriptor();

  // client methods --------------------------------------------------

  inline void OnFriendAdded(::Battlenet::friends::FriendNotification const* request) {
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsListener.OnFriendAdded(Battlenet.friends.FriendNotification{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequest(Hash::value, 1, request);
  }

  inline void OnFriendRemoved(::Battlenet::friends::FriendNotification const* request) {
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsListener.OnFriendRemoved(Battlenet.friends.FriendNotification{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequest(Hash::value, 2, request);
  }

  inline void OnReceivedInvitationAdded(::Battlenet::friends::InvitationNotification const* request) {
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsListener.OnReceivedInvitationAdded(Battlenet.friends.InvitationNotification{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequest(Hash::value, 3, request);
  }

  inline void OnReceivedInvitationRemoved(::Battlenet::friends::InvitationNotification const* request) {
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsListener.OnReceivedInvitationRemoved(Battlenet.friends.InvitationNotification{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequest(Hash::value, 4, request);
  }

  inline void OnSentInvitationAdded(::Battlenet::friends::InvitationNotification const* request) {
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsListener.OnSentInvitationAdded(Battlenet.friends.InvitationNotification{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequest(Hash::value, 5, request);
  }

  inline void OnSentInvitationRemoved(::Battlenet::friends::InvitationNotification const* request) {
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsListener.OnSentInvitationRemoved(Battlenet.friends.InvitationNotification{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequest(Hash::value, 6, request);
  }

  inline void OnUpdateFriendState(::Battlenet::friends::UpdateFriendStateNotification const* request) {
    TC_LOG_DEBUG("session.rpc", "%s Server called client method FriendsListener.OnUpdateFriendState(Battlenet.friends.UpdateFriendStateNotification{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequest(Hash::value, 7, request);
  }

  // server methods --------------------------------------------------

  void CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) override final;

 protected:
  virtual uint32 HandleOnFriendAdded(::Battlenet::friends::FriendNotification const* request);
  virtual uint32 HandleOnFriendRemoved(::Battlenet::friends::FriendNotification const* request);
  virtual uint32 HandleOnReceivedInvitationAdded(::Battlenet::friends::InvitationNotification const* request);
  virtual uint32 HandleOnReceivedInvitationRemoved(::Battlenet::friends::InvitationNotification const* request);
  virtual uint32 HandleOnSentInvitationAdded(::Battlenet::friends::InvitationNotification const* request);
  virtual uint32 HandleOnSentInvitationRemoved(::Battlenet::friends::InvitationNotification const* request);
  virtual uint32 HandleOnUpdateFriendState(::Battlenet::friends::UpdateFriendStateNotification const* request);

  Battlenet::Session* _session;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendsListener);
};

// ===================================================================


// ===================================================================

// SubscribeRequest

// optional .Battlenet.EntityId agent_id = 1;
inline bool SubscribeRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& SubscribeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.SubscribeRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* SubscribeRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.SubscribeRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* SubscribeRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void SubscribeRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.SubscribeRequest.agent_id)
}

// required uint64 object_id = 2;
inline bool SubscribeRequest::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeRequest::set_has_object_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscribeRequest::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscribeRequest::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::uint64 SubscribeRequest::object_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.SubscribeRequest.object_id)
  return object_id_;
}
inline void SubscribeRequest::set_object_id(::google::protobuf::uint64 value) {
  set_has_object_id();
  object_id_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.friends.SubscribeRequest.object_id)
}

// -------------------------------------------------------------------

// SubscribeResponse

// optional uint32 max_friends = 1;
inline bool SubscribeResponse::has_max_friends() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeResponse::set_has_max_friends() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeResponse::clear_has_max_friends() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeResponse::clear_max_friends() {
  max_friends_ = 0u;
  clear_has_max_friends();
}
inline ::google::protobuf::uint32 SubscribeResponse::max_friends() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.SubscribeResponse.max_friends)
  return max_friends_;
}
inline void SubscribeResponse::set_max_friends(::google::protobuf::uint32 value) {
  set_has_max_friends();
  max_friends_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.friends.SubscribeResponse.max_friends)
}

// optional uint32 max_received_invitations = 2;
inline bool SubscribeResponse::has_max_received_invitations() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeResponse::set_has_max_received_invitations() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscribeResponse::clear_has_max_received_invitations() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscribeResponse::clear_max_received_invitations() {
  max_received_invitations_ = 0u;
  clear_has_max_received_invitations();
}
inline ::google::protobuf::uint32 SubscribeResponse::max_received_invitations() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.SubscribeResponse.max_received_invitations)
  return max_received_invitations_;
}
inline void SubscribeResponse::set_max_received_invitations(::google::protobuf::uint32 value) {
  set_has_max_received_invitations();
  max_received_invitations_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.friends.SubscribeResponse.max_received_invitations)
}

// optional uint32 max_sent_invitations = 3;
inline bool SubscribeResponse::has_max_sent_invitations() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubscribeResponse::set_has_max_sent_invitations() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubscribeResponse::clear_has_max_sent_invitations() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubscribeResponse::clear_max_sent_invitations() {
  max_sent_invitations_ = 0u;
  clear_has_max_sent_invitations();
}
inline ::google::protobuf::uint32 SubscribeResponse::max_sent_invitations() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.SubscribeResponse.max_sent_invitations)
  return max_sent_invitations_;
}
inline void SubscribeResponse::set_max_sent_invitations(::google::protobuf::uint32 value) {
  set_has_max_sent_invitations();
  max_sent_invitations_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.friends.SubscribeResponse.max_sent_invitations)
}

// repeated .Battlenet.Role role = 4;
inline int SubscribeResponse::role_size() const {
  return role_.size();
}
inline void SubscribeResponse::clear_role() {
  role_.Clear();
}
inline const ::Battlenet::Role& SubscribeResponse::role(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.SubscribeResponse.role)
  return role_.Get(index);
}
inline ::Battlenet::Role* SubscribeResponse::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.SubscribeResponse.role)
  return role_.Mutable(index);
}
inline ::Battlenet::Role* SubscribeResponse::add_role() {
  // @@protoc_insertion_point(field_add:Battlenet.friends.SubscribeResponse.role)
  return role_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Role >&
SubscribeResponse::role() const {
  // @@protoc_insertion_point(field_list:Battlenet.friends.SubscribeResponse.role)
  return role_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Role >*
SubscribeResponse::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.friends.SubscribeResponse.role)
  return &role_;
}

// repeated .Battlenet.friends.Friend friends = 5;
inline int SubscribeResponse::friends_size() const {
  return friends_.size();
}
inline void SubscribeResponse::clear_friends() {
  friends_.Clear();
}
inline const ::Battlenet::friends::Friend& SubscribeResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.SubscribeResponse.friends)
  return friends_.Get(index);
}
inline ::Battlenet::friends::Friend* SubscribeResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.SubscribeResponse.friends)
  return friends_.Mutable(index);
}
inline ::Battlenet::friends::Friend* SubscribeResponse::add_friends() {
  // @@protoc_insertion_point(field_add:Battlenet.friends.SubscribeResponse.friends)
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::friends::Friend >&
SubscribeResponse::friends() const {
  // @@protoc_insertion_point(field_list:Battlenet.friends.SubscribeResponse.friends)
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::friends::Friend >*
SubscribeResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.friends.SubscribeResponse.friends)
  return &friends_;
}

// repeated .Battlenet.Invitation sent_invitations = 6;
inline int SubscribeResponse::sent_invitations_size() const {
  return sent_invitations_.size();
}
inline void SubscribeResponse::clear_sent_invitations() {
  sent_invitations_.Clear();
}
inline const ::Battlenet::Invitation& SubscribeResponse::sent_invitations(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.SubscribeResponse.sent_invitations)
  return sent_invitations_.Get(index);
}
inline ::Battlenet::Invitation* SubscribeResponse::mutable_sent_invitations(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.SubscribeResponse.sent_invitations)
  return sent_invitations_.Mutable(index);
}
inline ::Battlenet::Invitation* SubscribeResponse::add_sent_invitations() {
  // @@protoc_insertion_point(field_add:Battlenet.friends.SubscribeResponse.sent_invitations)
  return sent_invitations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Invitation >&
SubscribeResponse::sent_invitations() const {
  // @@protoc_insertion_point(field_list:Battlenet.friends.SubscribeResponse.sent_invitations)
  return sent_invitations_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Invitation >*
SubscribeResponse::mutable_sent_invitations() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.friends.SubscribeResponse.sent_invitations)
  return &sent_invitations_;
}

// repeated .Battlenet.Invitation received_invitations = 7;
inline int SubscribeResponse::received_invitations_size() const {
  return received_invitations_.size();
}
inline void SubscribeResponse::clear_received_invitations() {
  received_invitations_.Clear();
}
inline const ::Battlenet::Invitation& SubscribeResponse::received_invitations(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.SubscribeResponse.received_invitations)
  return received_invitations_.Get(index);
}
inline ::Battlenet::Invitation* SubscribeResponse::mutable_received_invitations(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.SubscribeResponse.received_invitations)
  return received_invitations_.Mutable(index);
}
inline ::Battlenet::Invitation* SubscribeResponse::add_received_invitations() {
  // @@protoc_insertion_point(field_add:Battlenet.friends.SubscribeResponse.received_invitations)
  return received_invitations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Invitation >&
SubscribeResponse::received_invitations() const {
  // @@protoc_insertion_point(field_list:Battlenet.friends.SubscribeResponse.received_invitations)
  return received_invitations_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Invitation >*
SubscribeResponse::mutable_received_invitations() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.friends.SubscribeResponse.received_invitations)
  return &received_invitations_;
}

// -------------------------------------------------------------------

// UnsubscribeRequest

// optional .Battlenet.EntityId agent_id = 1;
inline bool UnsubscribeRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnsubscribeRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnsubscribeRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnsubscribeRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& UnsubscribeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.UnsubscribeRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* UnsubscribeRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.UnsubscribeRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* UnsubscribeRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void UnsubscribeRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.UnsubscribeRequest.agent_id)
}

// optional uint64 object_id = 2;
inline bool UnsubscribeRequest::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnsubscribeRequest::set_has_object_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnsubscribeRequest::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnsubscribeRequest::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::uint64 UnsubscribeRequest::object_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.UnsubscribeRequest.object_id)
  return object_id_;
}
inline void UnsubscribeRequest::set_object_id(::google::protobuf::uint64 value) {
  set_has_object_id();
  object_id_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.friends.UnsubscribeRequest.object_id)
}

// -------------------------------------------------------------------

// GenericFriendRequest

// optional .Battlenet.EntityId agent_id = 1;
inline bool GenericFriendRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenericFriendRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GenericFriendRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GenericFriendRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& GenericFriendRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.GenericFriendRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* GenericFriendRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.GenericFriendRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* GenericFriendRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void GenericFriendRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.GenericFriendRequest.agent_id)
}

// required .Battlenet.EntityId target_id = 2;
inline bool GenericFriendRequest::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenericFriendRequest::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GenericFriendRequest::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GenericFriendRequest::clear_target_id() {
  if (target_id_ != NULL) target_id_->::Battlenet::EntityId::Clear();
  clear_has_target_id();
}
inline const ::Battlenet::EntityId& GenericFriendRequest::target_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.GenericFriendRequest.target_id)
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::Battlenet::EntityId* GenericFriendRequest::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) target_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.GenericFriendRequest.target_id)
  return target_id_;
}
inline ::Battlenet::EntityId* GenericFriendRequest::release_target_id() {
  clear_has_target_id();
  ::Battlenet::EntityId* temp = target_id_;
  target_id_ = NULL;
  return temp;
}
inline void GenericFriendRequest::set_allocated_target_id(::Battlenet::EntityId* target_id) {
  delete target_id_;
  target_id_ = target_id;
  if (target_id) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.GenericFriendRequest.target_id)
}

// -------------------------------------------------------------------

// GenericFriendResponse

// optional .Battlenet.friends.Friend target_friend = 1;
inline bool GenericFriendResponse::has_target_friend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenericFriendResponse::set_has_target_friend() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GenericFriendResponse::clear_has_target_friend() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GenericFriendResponse::clear_target_friend() {
  if (target_friend_ != NULL) target_friend_->::Battlenet::friends::Friend::Clear();
  clear_has_target_friend();
}
inline const ::Battlenet::friends::Friend& GenericFriendResponse::target_friend() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.GenericFriendResponse.target_friend)
  return target_friend_ != NULL ? *target_friend_ : *default_instance_->target_friend_;
}
inline ::Battlenet::friends::Friend* GenericFriendResponse::mutable_target_friend() {
  set_has_target_friend();
  if (target_friend_ == NULL) target_friend_ = new ::Battlenet::friends::Friend;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.GenericFriendResponse.target_friend)
  return target_friend_;
}
inline ::Battlenet::friends::Friend* GenericFriendResponse::release_target_friend() {
  clear_has_target_friend();
  ::Battlenet::friends::Friend* temp = target_friend_;
  target_friend_ = NULL;
  return temp;
}
inline void GenericFriendResponse::set_allocated_target_friend(::Battlenet::friends::Friend* target_friend) {
  delete target_friend_;
  target_friend_ = target_friend;
  if (target_friend) {
    set_has_target_friend();
  } else {
    clear_has_target_friend();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.GenericFriendResponse.target_friend)
}

// -------------------------------------------------------------------

// AssignRoleRequest

// optional .Battlenet.EntityId agent_id = 1;
inline bool AssignRoleRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AssignRoleRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AssignRoleRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AssignRoleRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& AssignRoleRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.AssignRoleRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* AssignRoleRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.AssignRoleRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* AssignRoleRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void AssignRoleRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.AssignRoleRequest.agent_id)
}

// required .Battlenet.EntityId target_id = 2;
inline bool AssignRoleRequest::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AssignRoleRequest::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AssignRoleRequest::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AssignRoleRequest::clear_target_id() {
  if (target_id_ != NULL) target_id_->::Battlenet::EntityId::Clear();
  clear_has_target_id();
}
inline const ::Battlenet::EntityId& AssignRoleRequest::target_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.AssignRoleRequest.target_id)
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::Battlenet::EntityId* AssignRoleRequest::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) target_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.AssignRoleRequest.target_id)
  return target_id_;
}
inline ::Battlenet::EntityId* AssignRoleRequest::release_target_id() {
  clear_has_target_id();
  ::Battlenet::EntityId* temp = target_id_;
  target_id_ = NULL;
  return temp;
}
inline void AssignRoleRequest::set_allocated_target_id(::Battlenet::EntityId* target_id) {
  delete target_id_;
  target_id_ = target_id;
  if (target_id) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.AssignRoleRequest.target_id)
}

// repeated int32 role = 3;
inline int AssignRoleRequest::role_size() const {
  return role_.size();
}
inline void AssignRoleRequest::clear_role() {
  role_.Clear();
}
inline ::google::protobuf::int32 AssignRoleRequest::role(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.AssignRoleRequest.role)
  return role_.Get(index);
}
inline void AssignRoleRequest::set_role(int index, ::google::protobuf::int32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:Battlenet.friends.AssignRoleRequest.role)
}
inline void AssignRoleRequest::add_role(::google::protobuf::int32 value) {
  role_.Add(value);
  // @@protoc_insertion_point(field_add:Battlenet.friends.AssignRoleRequest.role)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AssignRoleRequest::role() const {
  // @@protoc_insertion_point(field_list:Battlenet.friends.AssignRoleRequest.role)
  return role_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AssignRoleRequest::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.friends.AssignRoleRequest.role)
  return &role_;
}

// -------------------------------------------------------------------

// ViewFriendsRequest

// optional .Battlenet.EntityId agent_id = 1;
inline bool ViewFriendsRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewFriendsRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewFriendsRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewFriendsRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& ViewFriendsRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.ViewFriendsRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* ViewFriendsRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.ViewFriendsRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* ViewFriendsRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void ViewFriendsRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.ViewFriendsRequest.agent_id)
}

// required .Battlenet.EntityId target_id = 2;
inline bool ViewFriendsRequest::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ViewFriendsRequest::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ViewFriendsRequest::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ViewFriendsRequest::clear_target_id() {
  if (target_id_ != NULL) target_id_->::Battlenet::EntityId::Clear();
  clear_has_target_id();
}
inline const ::Battlenet::EntityId& ViewFriendsRequest::target_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.ViewFriendsRequest.target_id)
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::Battlenet::EntityId* ViewFriendsRequest::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) target_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.ViewFriendsRequest.target_id)
  return target_id_;
}
inline ::Battlenet::EntityId* ViewFriendsRequest::release_target_id() {
  clear_has_target_id();
  ::Battlenet::EntityId* temp = target_id_;
  target_id_ = NULL;
  return temp;
}
inline void ViewFriendsRequest::set_allocated_target_id(::Battlenet::EntityId* target_id) {
  delete target_id_;
  target_id_ = target_id;
  if (target_id) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.ViewFriendsRequest.target_id)
}

// repeated uint32 role = 3 [packed = true];
inline int ViewFriendsRequest::role_size() const {
  return role_.size();
}
inline void ViewFriendsRequest::clear_role() {
  role_.Clear();
}
inline ::google::protobuf::uint32 ViewFriendsRequest::role(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.ViewFriendsRequest.role)
  return role_.Get(index);
}
inline void ViewFriendsRequest::set_role(int index, ::google::protobuf::uint32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:Battlenet.friends.ViewFriendsRequest.role)
}
inline void ViewFriendsRequest::add_role(::google::protobuf::uint32 value) {
  role_.Add(value);
  // @@protoc_insertion_point(field_add:Battlenet.friends.ViewFriendsRequest.role)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ViewFriendsRequest::role() const {
  // @@protoc_insertion_point(field_list:Battlenet.friends.ViewFriendsRequest.role)
  return role_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ViewFriendsRequest::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.friends.ViewFriendsRequest.role)
  return &role_;
}

// -------------------------------------------------------------------

// ViewFriendsResponse

// repeated .Battlenet.friends.Friend friends = 1;
inline int ViewFriendsResponse::friends_size() const {
  return friends_.size();
}
inline void ViewFriendsResponse::clear_friends() {
  friends_.Clear();
}
inline const ::Battlenet::friends::Friend& ViewFriendsResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.ViewFriendsResponse.friends)
  return friends_.Get(index);
}
inline ::Battlenet::friends::Friend* ViewFriendsResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.ViewFriendsResponse.friends)
  return friends_.Mutable(index);
}
inline ::Battlenet::friends::Friend* ViewFriendsResponse::add_friends() {
  // @@protoc_insertion_point(field_add:Battlenet.friends.ViewFriendsResponse.friends)
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::friends::Friend >&
ViewFriendsResponse::friends() const {
  // @@protoc_insertion_point(field_list:Battlenet.friends.ViewFriendsResponse.friends)
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::friends::Friend >*
ViewFriendsResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.friends.ViewFriendsResponse.friends)
  return &friends_;
}

// -------------------------------------------------------------------

// UpdateFriendStateRequest

// optional .Battlenet.EntityId agent_id = 1;
inline bool UpdateFriendStateRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateFriendStateRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateFriendStateRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateFriendStateRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& UpdateFriendStateRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.UpdateFriendStateRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* UpdateFriendStateRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.UpdateFriendStateRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* UpdateFriendStateRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void UpdateFriendStateRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.UpdateFriendStateRequest.agent_id)
}

// required .Battlenet.EntityId target_id = 2;
inline bool UpdateFriendStateRequest::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateFriendStateRequest::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateFriendStateRequest::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateFriendStateRequest::clear_target_id() {
  if (target_id_ != NULL) target_id_->::Battlenet::EntityId::Clear();
  clear_has_target_id();
}
inline const ::Battlenet::EntityId& UpdateFriendStateRequest::target_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.UpdateFriendStateRequest.target_id)
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::Battlenet::EntityId* UpdateFriendStateRequest::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) target_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.UpdateFriendStateRequest.target_id)
  return target_id_;
}
inline ::Battlenet::EntityId* UpdateFriendStateRequest::release_target_id() {
  clear_has_target_id();
  ::Battlenet::EntityId* temp = target_id_;
  target_id_ = NULL;
  return temp;
}
inline void UpdateFriendStateRequest::set_allocated_target_id(::Battlenet::EntityId* target_id) {
  delete target_id_;
  target_id_ = target_id;
  if (target_id) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.UpdateFriendStateRequest.target_id)
}

// repeated .Battlenet.Attribute attribute = 3;
inline int UpdateFriendStateRequest::attribute_size() const {
  return attribute_.size();
}
inline void UpdateFriendStateRequest::clear_attribute() {
  attribute_.Clear();
}
inline const ::Battlenet::Attribute& UpdateFriendStateRequest::attribute(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.UpdateFriendStateRequest.attribute)
  return attribute_.Get(index);
}
inline ::Battlenet::Attribute* UpdateFriendStateRequest::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.UpdateFriendStateRequest.attribute)
  return attribute_.Mutable(index);
}
inline ::Battlenet::Attribute* UpdateFriendStateRequest::add_attribute() {
  // @@protoc_insertion_point(field_add:Battlenet.friends.UpdateFriendStateRequest.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >&
UpdateFriendStateRequest::attribute() const {
  // @@protoc_insertion_point(field_list:Battlenet.friends.UpdateFriendStateRequest.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >*
UpdateFriendStateRequest::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.friends.UpdateFriendStateRequest.attribute)
  return &attribute_;
}

// optional uint64 attributes_epoch = 4;
inline bool UpdateFriendStateRequest::has_attributes_epoch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateFriendStateRequest::set_has_attributes_epoch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateFriendStateRequest::clear_has_attributes_epoch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateFriendStateRequest::clear_attributes_epoch() {
  attributes_epoch_ = GOOGLE_ULONGLONG(0);
  clear_has_attributes_epoch();
}
inline ::google::protobuf::uint64 UpdateFriendStateRequest::attributes_epoch() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.UpdateFriendStateRequest.attributes_epoch)
  return attributes_epoch_;
}
inline void UpdateFriendStateRequest::set_attributes_epoch(::google::protobuf::uint64 value) {
  set_has_attributes_epoch();
  attributes_epoch_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.friends.UpdateFriendStateRequest.attributes_epoch)
}

// -------------------------------------------------------------------

// FriendNotification

// required .Battlenet.friends.Friend target = 1;
inline bool FriendNotification::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendNotification::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendNotification::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendNotification::clear_target() {
  if (target_ != NULL) target_->::Battlenet::friends::Friend::Clear();
  clear_has_target();
}
inline const ::Battlenet::friends::Friend& FriendNotification::target() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.FriendNotification.target)
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::Battlenet::friends::Friend* FriendNotification::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::Battlenet::friends::Friend;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.FriendNotification.target)
  return target_;
}
inline ::Battlenet::friends::Friend* FriendNotification::release_target() {
  clear_has_target();
  ::Battlenet::friends::Friend* temp = target_;
  target_ = NULL;
  return temp;
}
inline void FriendNotification::set_allocated_target(::Battlenet::friends::Friend* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.FriendNotification.target)
}

// optional .Battlenet.EntityId game_account_id = 2;
inline bool FriendNotification::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendNotification::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendNotification::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendNotification::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::Battlenet::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::Battlenet::EntityId& FriendNotification::game_account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.FriendNotification.game_account_id)
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::Battlenet::EntityId* FriendNotification::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.FriendNotification.game_account_id)
  return game_account_id_;
}
inline ::Battlenet::EntityId* FriendNotification::release_game_account_id() {
  clear_has_game_account_id();
  ::Battlenet::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}
inline void FriendNotification::set_allocated_game_account_id(::Battlenet::EntityId* game_account_id) {
  delete game_account_id_;
  game_account_id_ = game_account_id;
  if (game_account_id) {
    set_has_game_account_id();
  } else {
    clear_has_game_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.FriendNotification.game_account_id)
}

// optional .Battlenet.ProcessId peer = 4;
inline bool FriendNotification::has_peer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendNotification::set_has_peer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendNotification::clear_has_peer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendNotification::clear_peer() {
  if (peer_ != NULL) peer_->::Battlenet::ProcessId::Clear();
  clear_has_peer();
}
inline const ::Battlenet::ProcessId& FriendNotification::peer() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.FriendNotification.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
inline ::Battlenet::ProcessId* FriendNotification::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) peer_ = new ::Battlenet::ProcessId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.FriendNotification.peer)
  return peer_;
}
inline ::Battlenet::ProcessId* FriendNotification::release_peer() {
  clear_has_peer();
  ::Battlenet::ProcessId* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void FriendNotification::set_allocated_peer(::Battlenet::ProcessId* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    set_has_peer();
  } else {
    clear_has_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.FriendNotification.peer)
}

// optional .Battlenet.EntityId account_id = 5;
inline bool FriendNotification::has_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendNotification::set_has_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendNotification::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendNotification::clear_account_id() {
  if (account_id_ != NULL) account_id_->::Battlenet::EntityId::Clear();
  clear_has_account_id();
}
inline const ::Battlenet::EntityId& FriendNotification::account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.FriendNotification.account_id)
  return account_id_ != NULL ? *account_id_ : *default_instance_->account_id_;
}
inline ::Battlenet::EntityId* FriendNotification::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == NULL) account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.FriendNotification.account_id)
  return account_id_;
}
inline ::Battlenet::EntityId* FriendNotification::release_account_id() {
  clear_has_account_id();
  ::Battlenet::EntityId* temp = account_id_;
  account_id_ = NULL;
  return temp;
}
inline void FriendNotification::set_allocated_account_id(::Battlenet::EntityId* account_id) {
  delete account_id_;
  account_id_ = account_id;
  if (account_id) {
    set_has_account_id();
  } else {
    clear_has_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.FriendNotification.account_id)
}

// -------------------------------------------------------------------

// UpdateFriendStateNotification

// required .Battlenet.friends.Friend changed_friend = 1;
inline bool UpdateFriendStateNotification::has_changed_friend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateFriendStateNotification::set_has_changed_friend() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateFriendStateNotification::clear_has_changed_friend() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateFriendStateNotification::clear_changed_friend() {
  if (changed_friend_ != NULL) changed_friend_->::Battlenet::friends::Friend::Clear();
  clear_has_changed_friend();
}
inline const ::Battlenet::friends::Friend& UpdateFriendStateNotification::changed_friend() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.UpdateFriendStateNotification.changed_friend)
  return changed_friend_ != NULL ? *changed_friend_ : *default_instance_->changed_friend_;
}
inline ::Battlenet::friends::Friend* UpdateFriendStateNotification::mutable_changed_friend() {
  set_has_changed_friend();
  if (changed_friend_ == NULL) changed_friend_ = new ::Battlenet::friends::Friend;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.UpdateFriendStateNotification.changed_friend)
  return changed_friend_;
}
inline ::Battlenet::friends::Friend* UpdateFriendStateNotification::release_changed_friend() {
  clear_has_changed_friend();
  ::Battlenet::friends::Friend* temp = changed_friend_;
  changed_friend_ = NULL;
  return temp;
}
inline void UpdateFriendStateNotification::set_allocated_changed_friend(::Battlenet::friends::Friend* changed_friend) {
  delete changed_friend_;
  changed_friend_ = changed_friend;
  if (changed_friend) {
    set_has_changed_friend();
  } else {
    clear_has_changed_friend();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.UpdateFriendStateNotification.changed_friend)
}

// optional .Battlenet.EntityId game_account_id = 2;
inline bool UpdateFriendStateNotification::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateFriendStateNotification::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateFriendStateNotification::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateFriendStateNotification::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::Battlenet::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::Battlenet::EntityId& UpdateFriendStateNotification::game_account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.UpdateFriendStateNotification.game_account_id)
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::Battlenet::EntityId* UpdateFriendStateNotification::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.UpdateFriendStateNotification.game_account_id)
  return game_account_id_;
}
inline ::Battlenet::EntityId* UpdateFriendStateNotification::release_game_account_id() {
  clear_has_game_account_id();
  ::Battlenet::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}
inline void UpdateFriendStateNotification::set_allocated_game_account_id(::Battlenet::EntityId* game_account_id) {
  delete game_account_id_;
  game_account_id_ = game_account_id;
  if (game_account_id) {
    set_has_game_account_id();
  } else {
    clear_has_game_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.UpdateFriendStateNotification.game_account_id)
}

// optional .Battlenet.ProcessId peer = 4;
inline bool UpdateFriendStateNotification::has_peer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateFriendStateNotification::set_has_peer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateFriendStateNotification::clear_has_peer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateFriendStateNotification::clear_peer() {
  if (peer_ != NULL) peer_->::Battlenet::ProcessId::Clear();
  clear_has_peer();
}
inline const ::Battlenet::ProcessId& UpdateFriendStateNotification::peer() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.UpdateFriendStateNotification.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
inline ::Battlenet::ProcessId* UpdateFriendStateNotification::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) peer_ = new ::Battlenet::ProcessId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.UpdateFriendStateNotification.peer)
  return peer_;
}
inline ::Battlenet::ProcessId* UpdateFriendStateNotification::release_peer() {
  clear_has_peer();
  ::Battlenet::ProcessId* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void UpdateFriendStateNotification::set_allocated_peer(::Battlenet::ProcessId* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    set_has_peer();
  } else {
    clear_has_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.UpdateFriendStateNotification.peer)
}

// optional .Battlenet.EntityId account_id = 5;
inline bool UpdateFriendStateNotification::has_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateFriendStateNotification::set_has_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateFriendStateNotification::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateFriendStateNotification::clear_account_id() {
  if (account_id_ != NULL) account_id_->::Battlenet::EntityId::Clear();
  clear_has_account_id();
}
inline const ::Battlenet::EntityId& UpdateFriendStateNotification::account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.UpdateFriendStateNotification.account_id)
  return account_id_ != NULL ? *account_id_ : *default_instance_->account_id_;
}
inline ::Battlenet::EntityId* UpdateFriendStateNotification::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == NULL) account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.UpdateFriendStateNotification.account_id)
  return account_id_;
}
inline ::Battlenet::EntityId* UpdateFriendStateNotification::release_account_id() {
  clear_has_account_id();
  ::Battlenet::EntityId* temp = account_id_;
  account_id_ = NULL;
  return temp;
}
inline void UpdateFriendStateNotification::set_allocated_account_id(::Battlenet::EntityId* account_id) {
  delete account_id_;
  account_id_ = account_id;
  if (account_id) {
    set_has_account_id();
  } else {
    clear_has_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.UpdateFriendStateNotification.account_id)
}

// -------------------------------------------------------------------

// InvitationNotification

// required .Battlenet.Invitation invitation = 1;
inline bool InvitationNotification::has_invitation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvitationNotification::set_has_invitation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvitationNotification::clear_has_invitation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvitationNotification::clear_invitation() {
  if (invitation_ != NULL) invitation_->::Battlenet::Invitation::Clear();
  clear_has_invitation();
}
inline const ::Battlenet::Invitation& InvitationNotification::invitation() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.InvitationNotification.invitation)
  return invitation_ != NULL ? *invitation_ : *default_instance_->invitation_;
}
inline ::Battlenet::Invitation* InvitationNotification::mutable_invitation() {
  set_has_invitation();
  if (invitation_ == NULL) invitation_ = new ::Battlenet::Invitation;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.InvitationNotification.invitation)
  return invitation_;
}
inline ::Battlenet::Invitation* InvitationNotification::release_invitation() {
  clear_has_invitation();
  ::Battlenet::Invitation* temp = invitation_;
  invitation_ = NULL;
  return temp;
}
inline void InvitationNotification::set_allocated_invitation(::Battlenet::Invitation* invitation) {
  delete invitation_;
  invitation_ = invitation;
  if (invitation) {
    set_has_invitation();
  } else {
    clear_has_invitation();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.InvitationNotification.invitation)
}

// optional .Battlenet.EntityId game_account_id = 2;
inline bool InvitationNotification::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvitationNotification::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvitationNotification::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvitationNotification::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::Battlenet::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::Battlenet::EntityId& InvitationNotification::game_account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.InvitationNotification.game_account_id)
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::Battlenet::EntityId* InvitationNotification::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.InvitationNotification.game_account_id)
  return game_account_id_;
}
inline ::Battlenet::EntityId* InvitationNotification::release_game_account_id() {
  clear_has_game_account_id();
  ::Battlenet::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}
inline void InvitationNotification::set_allocated_game_account_id(::Battlenet::EntityId* game_account_id) {
  delete game_account_id_;
  game_account_id_ = game_account_id;
  if (game_account_id) {
    set_has_game_account_id();
  } else {
    clear_has_game_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.InvitationNotification.game_account_id)
}

// optional uint32 reason = 3 [default = 0];
inline bool InvitationNotification::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvitationNotification::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvitationNotification::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvitationNotification::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 InvitationNotification::reason() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.InvitationNotification.reason)
  return reason_;
}
inline void InvitationNotification::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.friends.InvitationNotification.reason)
}

// optional .Battlenet.ProcessId peer = 4;
inline bool InvitationNotification::has_peer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InvitationNotification::set_has_peer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InvitationNotification::clear_has_peer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InvitationNotification::clear_peer() {
  if (peer_ != NULL) peer_->::Battlenet::ProcessId::Clear();
  clear_has_peer();
}
inline const ::Battlenet::ProcessId& InvitationNotification::peer() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.InvitationNotification.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
inline ::Battlenet::ProcessId* InvitationNotification::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) peer_ = new ::Battlenet::ProcessId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.InvitationNotification.peer)
  return peer_;
}
inline ::Battlenet::ProcessId* InvitationNotification::release_peer() {
  clear_has_peer();
  ::Battlenet::ProcessId* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void InvitationNotification::set_allocated_peer(::Battlenet::ProcessId* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    set_has_peer();
  } else {
    clear_has_peer();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.InvitationNotification.peer)
}

// optional .Battlenet.EntityId account_id = 5;
inline bool InvitationNotification::has_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InvitationNotification::set_has_account_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InvitationNotification::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InvitationNotification::clear_account_id() {
  if (account_id_ != NULL) account_id_->::Battlenet::EntityId::Clear();
  clear_has_account_id();
}
inline const ::Battlenet::EntityId& InvitationNotification::account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.friends.InvitationNotification.account_id)
  return account_id_ != NULL ? *account_id_ : *default_instance_->account_id_;
}
inline ::Battlenet::EntityId* InvitationNotification::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == NULL) account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.friends.InvitationNotification.account_id)
  return account_id_;
}
inline ::Battlenet::EntityId* InvitationNotification::release_account_id() {
  clear_has_account_id();
  ::Battlenet::EntityId* temp = account_id_;
  account_id_ = NULL;
  return temp;
}
inline void InvitationNotification::set_allocated_account_id(::Battlenet::EntityId* account_id) {
  delete account_id_;
  account_id_ = account_id;
  if (account_id) {
    set_has_account_id();
  } else {
    clear_has_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.friends.InvitationNotification.account_id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace friends
}  // namespace Battlenet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friends_5fservice_2eproto__INCLUDED
