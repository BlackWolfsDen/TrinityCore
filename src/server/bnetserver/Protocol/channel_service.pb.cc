// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "channel_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace channel {

namespace {

const ::google::protobuf::Descriptor* AddMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsubscribeMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsubscribeMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateChannelStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateChannelStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateMemberStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateMemberStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DissolveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DissolveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRolesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRolesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberAddedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberAddedNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberRemovedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberRemovedNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateChannelStateNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateChannelStateNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateMemberStateNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateMemberStateNotification_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* ChannelService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* ChannelListener_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_channel_5fservice_2eproto() {
  protobuf_AddDesc_channel_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "channel_service.proto");
  GOOGLE_CHECK(file != NULL);
  AddMemberRequest_descriptor_ = file->message_type(0);
  static const int AddMemberRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, member_identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, member_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, subscribe_),
  };
  AddMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMemberRequest_descriptor_,
      AddMemberRequest::default_instance_,
      AddMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMemberRequest));
  RemoveMemberRequest_descriptor_ = file->message_type(1);
  static const int RemoveMemberRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, reason_),
  };
  RemoveMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveMemberRequest_descriptor_,
      RemoveMemberRequest::default_instance_,
      RemoveMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveMemberRequest));
  UnsubscribeMemberRequest_descriptor_ = file->message_type(2);
  static const int UnsubscribeMemberRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeMemberRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeMemberRequest, member_id_),
  };
  UnsubscribeMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsubscribeMemberRequest_descriptor_,
      UnsubscribeMemberRequest::default_instance_,
      UnsubscribeMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsubscribeMemberRequest));
  SendMessageRequest_descriptor_ = file->message_type(3);
  static const int SendMessageRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, required_privileges_),
  };
  SendMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMessageRequest_descriptor_,
      SendMessageRequest::default_instance_,
      SendMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMessageRequest));
  UpdateChannelStateRequest_descriptor_ = file->message_type(4);
  static const int UpdateChannelStateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateRequest, state_change_),
  };
  UpdateChannelStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateChannelStateRequest_descriptor_,
      UpdateChannelStateRequest::default_instance_,
      UpdateChannelStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateChannelStateRequest));
  UpdateMemberStateRequest_descriptor_ = file->message_type(5);
  static const int UpdateMemberStateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateRequest, state_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateRequest, removed_role_),
  };
  UpdateMemberStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateMemberStateRequest_descriptor_,
      UpdateMemberStateRequest::default_instance_,
      UpdateMemberStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateMemberStateRequest));
  DissolveRequest_descriptor_ = file->message_type(6);
  static const int DissolveRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DissolveRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DissolveRequest, reason_),
  };
  DissolveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DissolveRequest_descriptor_,
      DissolveRequest::default_instance_,
      DissolveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DissolveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DissolveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DissolveRequest));
  SetRolesRequest_descriptor_ = file->message_type(7);
  static const int SetRolesRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRolesRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRolesRequest, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRolesRequest, member_id_),
  };
  SetRolesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetRolesRequest_descriptor_,
      SetRolesRequest::default_instance_,
      SetRolesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRolesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRolesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetRolesRequest));
  JoinNotification_descriptor_ = file->message_type(8);
  static const int JoinNotification_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNotification, self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNotification, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNotification, channel_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNotification, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNotification, subscriber_),
  };
  JoinNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinNotification_descriptor_,
      JoinNotification::default_instance_,
      JoinNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinNotification));
  MemberAddedNotification_descriptor_ = file->message_type(9);
  static const int MemberAddedNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAddedNotification, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAddedNotification, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAddedNotification, subscriber_),
  };
  MemberAddedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberAddedNotification_descriptor_,
      MemberAddedNotification::default_instance_,
      MemberAddedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAddedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAddedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberAddedNotification));
  LeaveNotification_descriptor_ = file->message_type(10);
  static const int LeaveNotification_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveNotification, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveNotification, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveNotification, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveNotification, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveNotification, subscriber_),
  };
  LeaveNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveNotification_descriptor_,
      LeaveNotification::default_instance_,
      LeaveNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveNotification));
  MemberRemovedNotification_descriptor_ = file->message_type(11);
  static const int MemberRemovedNotification_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemovedNotification, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemovedNotification, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemovedNotification, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemovedNotification, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemovedNotification, subscriber_),
  };
  MemberRemovedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberRemovedNotification_descriptor_,
      MemberRemovedNotification::default_instance_,
      MemberRemovedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemovedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemovedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberRemovedNotification));
  SendMessageNotification_descriptor_ = file->message_type(12);
  static const int SendMessageNotification_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageNotification, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageNotification, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageNotification, required_privileges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageNotification, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageNotification, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageNotification, subscriber_),
  };
  SendMessageNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMessageNotification_descriptor_,
      SendMessageNotification::default_instance_,
      SendMessageNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMessageNotification));
  UpdateChannelStateNotification_descriptor_ = file->message_type(13);
  static const int UpdateChannelStateNotification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateNotification, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateNotification, state_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateNotification, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateNotification, subscriber_),
  };
  UpdateChannelStateNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateChannelStateNotification_descriptor_,
      UpdateChannelStateNotification::default_instance_,
      UpdateChannelStateNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateChannelStateNotification));
  UpdateMemberStateNotification_descriptor_ = file->message_type(14);
  static const int UpdateMemberStateNotification_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateNotification, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateNotification, state_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateNotification, removed_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateNotification, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateNotification, subscriber_),
  };
  UpdateMemberStateNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateMemberStateNotification_descriptor_,
      UpdateMemberStateNotification::default_instance_,
      UpdateMemberStateNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateMemberStateNotification));
  ChannelService_descriptor_ = file->service(0);
  ChannelListener_descriptor_ = file->service(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_channel_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMemberRequest_descriptor_, &AddMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveMemberRequest_descriptor_, &RemoveMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsubscribeMemberRequest_descriptor_, &UnsubscribeMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMessageRequest_descriptor_, &SendMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateChannelStateRequest_descriptor_, &UpdateChannelStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateMemberStateRequest_descriptor_, &UpdateMemberStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DissolveRequest_descriptor_, &DissolveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetRolesRequest_descriptor_, &SetRolesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinNotification_descriptor_, &JoinNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberAddedNotification_descriptor_, &MemberAddedNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveNotification_descriptor_, &LeaveNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberRemovedNotification_descriptor_, &MemberRemovedNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMessageNotification_descriptor_, &SendMessageNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateChannelStateNotification_descriptor_, &UpdateChannelStateNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateMemberStateNotification_descriptor_, &UpdateMemberStateNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_channel_5fservice_2eproto() {
  delete AddMemberRequest::default_instance_;
  delete AddMemberRequest_reflection_;
  delete RemoveMemberRequest::default_instance_;
  delete RemoveMemberRequest_reflection_;
  delete UnsubscribeMemberRequest::default_instance_;
  delete UnsubscribeMemberRequest_reflection_;
  delete SendMessageRequest::default_instance_;
  delete SendMessageRequest_reflection_;
  delete UpdateChannelStateRequest::default_instance_;
  delete UpdateChannelStateRequest_reflection_;
  delete UpdateMemberStateRequest::default_instance_;
  delete UpdateMemberStateRequest_reflection_;
  delete DissolveRequest::default_instance_;
  delete DissolveRequest_reflection_;
  delete SetRolesRequest::default_instance_;
  delete SetRolesRequest_reflection_;
  delete JoinNotification::default_instance_;
  delete JoinNotification_reflection_;
  delete MemberAddedNotification::default_instance_;
  delete MemberAddedNotification_reflection_;
  delete LeaveNotification::default_instance_;
  delete LeaveNotification_reflection_;
  delete MemberRemovedNotification::default_instance_;
  delete MemberRemovedNotification_reflection_;
  delete SendMessageNotification::default_instance_;
  delete SendMessageNotification_reflection_;
  delete UpdateChannelStateNotification::default_instance_;
  delete UpdateChannelStateNotification_reflection_;
  delete UpdateMemberStateNotification::default_instance_;
  delete UpdateMemberStateNotification_reflection_;
}

void protobuf_AddDesc_channel_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Battlenet::account::protobuf_AddDesc_account_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_entity_5ftypes_2eproto();
  ::Battlenet::channel::protobuf_AddDesc_channel_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025channel_service.proto\022\021Battlenet.chann"
    "el\032\023account_types.proto\032\022entity_types.pr"
    "oto\032\023channel_types.proto\032\017rpc_types.prot"
    "o\"\311\001\n\020AddMemberRequest\022%\n\010agent_id\030\001 \001(\013"
    "2\023.Battlenet.EntityId\022,\n\017member_identity"
    "\030\002 \002(\0132\023.Battlenet.Identity\0224\n\014member_st"
    "ate\030\003 \002(\0132\036.Battlenet.channel.MemberStat"
    "e\022\021\n\tobject_id\030\004 \002(\004\022\027\n\tsubscribe\030\005 \001(\010:"
    "\004true\"t\n\023RemoveMemberRequest\022%\n\010agent_id"
    "\030\001 \001(\0132\023.Battlenet.EntityId\022&\n\tmember_id"
    "\030\002 \002(\0132\023.Battlenet.EntityId\022\016\n\006reason\030\003 "
    "\001(\r\"i\n\030UnsubscribeMemberRequest\022%\n\010agent"
    "_id\030\001 \001(\0132\023.Battlenet.EntityId\022&\n\tmember"
    "_id\030\002 \002(\0132\023.Battlenet.EntityId\"\210\001\n\022SendM"
    "essageRequest\022%\n\010agent_id\030\001 \001(\0132\023.Battle"
    "net.EntityId\022+\n\007message\030\002 \002(\0132\032.Battlene"
    "t.channel.Message\022\036\n\023required_privileges"
    "\030\003 \001(\004:\0010\"y\n\031UpdateChannelStateRequest\022%"
    "\n\010agent_id\030\001 \001(\0132\023.Battlenet.EntityId\0225\n"
    "\014state_change\030\002 \002(\0132\037.Battlenet.channel."
    "ChannelState\"\214\001\n\030UpdateMemberStateReques"
    "t\022%\n\010agent_id\030\001 \001(\0132\023.Battlenet.EntityId"
    "\022/\n\014state_change\030\002 \003(\0132\031.Battlenet.chann"
    "el.Member\022\030\n\014removed_role\030\003 \003(\rB\002\020\001\"H\n\017D"
    "issolveRequest\022%\n\010agent_id\030\001 \001(\0132\023.Battl"
    "enet.EntityId\022\016\n\006reason\030\002 \001(\r\"r\n\017SetRole"
    "sRequest\022%\n\010agent_id\030\001 \001(\0132\023.Battlenet.E"
    "ntityId\022\020\n\004role\030\002 \003(\rB\002\020\001\022&\n\tmember_id\030\003"
    " \003(\0132\023.Battlenet.EntityId\"\201\002\n\020JoinNotifi"
    "cation\022\'\n\004self\030\001 \001(\0132\031.Battlenet.channel"
    ".Member\022)\n\006member\030\002 \003(\0132\031.Battlenet.chan"
    "nel.Member\0226\n\rchannel_state\030\003 \002(\0132\037.Batt"
    "lenet.channel.ChannelState\0220\n\nchannel_id"
    "\030\004 \001(\0132\034.Battlenet.channel.ChannelId\022/\n\n"
    "subscriber\030\005 \001(\0132\033.Battlenet.account.Ide"
    "ntity\"\247\001\n\027MemberAddedNotification\022)\n\006mem"
    "ber\030\001 \002(\0132\031.Battlenet.channel.Member\0220\n\n"
    "channel_id\030\002 \001(\0132\034.Battlenet.channel.Cha"
    "nnelId\022/\n\nsubscriber\030\003 \001(\0132\033.Battlenet.a"
    "ccount.Identity\"\325\001\n\021LeaveNotification\022%\n"
    "\010agent_id\030\001 \001(\0132\023.Battlenet.EntityId\022&\n\t"
    "member_id\030\002 \002(\0132\023.Battlenet.EntityId\022\016\n\006"
    "reason\030\003 \001(\r\0220\n\nchannel_id\030\004 \001(\0132\034.Battl"
    "enet.channel.ChannelId\022/\n\nsubscriber\030\005 \001"
    "(\0132\033.Battlenet.account.Identity\"\335\001\n\031Memb"
    "erRemovedNotification\022%\n\010agent_id\030\001 \001(\0132"
    "\023.Battlenet.EntityId\022&\n\tmember_id\030\002 \002(\0132"
    "\023.Battlenet.EntityId\022\016\n\006reason\030\003 \001(\r\0220\n\n"
    "channel_id\030\004 \001(\0132\034.Battlenet.channel.Cha"
    "nnelId\022/\n\nsubscriber\030\005 \001(\0132\033.Battlenet.a"
    "ccount.Identity\"\202\002\n\027SendMessageNotificat"
    "ion\022%\n\010agent_id\030\001 \001(\0132\023.Battlenet.Entity"
    "Id\022+\n\007message\030\002 \002(\0132\032.Battlenet.channel."
    "Message\022\036\n\023required_privileges\030\003 \001(\004:\0010\022"
    "\020\n\010identity\030\004 \001(\t\0220\n\nchannel_id\030\005 \001(\0132\034."
    "Battlenet.channel.ChannelId\022/\n\nsubscribe"
    "r\030\006 \001(\0132\033.Battlenet.account.Identity\"\341\001\n"
    "\036UpdateChannelStateNotification\022%\n\010agent"
    "_id\030\001 \001(\0132\023.Battlenet.EntityId\0225\n\014state_"
    "change\030\002 \002(\0132\037.Battlenet.channel.Channel"
    "State\0220\n\nchannel_id\030\003 \001(\0132\034.Battlenet.ch"
    "annel.ChannelId\022/\n\nsubscriber\030\004 \001(\0132\033.Ba"
    "ttlenet.account.Identity\"\364\001\n\035UpdateMembe"
    "rStateNotification\022%\n\010agent_id\030\001 \001(\0132\023.B"
    "attlenet.EntityId\022/\n\014state_change\030\002 \003(\0132"
    "\031.Battlenet.channel.Member\022\030\n\014removed_ro"
    "le\030\003 \003(\rB\002\020\001\0220\n\nchannel_id\030\004 \001(\0132\034.Battl"
    "enet.channel.ChannelId\022/\n\nsubscriber\030\005 \001"
    "(\0132\033.Battlenet.account.Identity2\302\005\n\016Chan"
    "nelService\022I\n\tAddMember\022#.Battlenet.chan"
    "nel.AddMemberRequest\032\021.Battlenet.NoData\""
    "\004\200\265\030\001\022O\n\014RemoveMember\022&.Battlenet.channe"
    "l.RemoveMemberRequest\032\021.Battlenet.NoData"
    "\"\004\200\265\030\002\022M\n\013SendMessage\022%.Battlenet.channe"
    "l.SendMessageRequest\032\021.Battlenet.NoData\""
    "\004\200\265\030\003\022[\n\022UpdateChannelState\022,.Battlenet."
    "channel.UpdateChannelStateRequest\032\021.Batt"
    "lenet.NoData\"\004\200\265\030\004\022Y\n\021UpdateMemberState\022"
    "+.Battlenet.channel.UpdateMemberStateReq"
    "uest\032\021.Battlenet.NoData\"\004\200\265\030\005\022G\n\010Dissolv"
    "e\022\".Battlenet.channel.DissolveRequest\032\021."
    "Battlenet.NoData\"\004\200\265\030\006\022G\n\010SetRoles\022\".Bat"
    "tlenet.channel.SetRolesRequest\032\021.Battlen"
    "et.NoData\"\004\200\265\030\007\022Y\n\021UnsubscribeMember\022+.B"
    "attlenet.channel.UnsubscribeMemberReques"
    "t\032\021.Battlenet.NoData\"\004\200\265\030\010\032 \312>\035bnet.prot"
    "ocol.channel.Channel2\276\005\n\017ChannelListener"
    "\022K\n\006OnJoin\022#.Battlenet.channel.JoinNotif"
    "ication\032\026.Battlenet.NO_RESPONSE\"\004\200\265\030\001\022Y\n"
    "\rOnMemberAdded\022*.Battlenet.channel.Membe"
    "rAddedNotification\032\026.Battlenet.NO_RESPON"
    "SE\"\004\200\265\030\002\022M\n\007OnLeave\022$.Battlenet.channel."
    "LeaveNotification\032\026.Battlenet.NO_RESPONS"
    "E\"\004\200\265\030\003\022]\n\017OnMemberRemoved\022,.Battlenet.c"
    "hannel.MemberRemovedNotification\032\026.Battl"
    "enet.NO_RESPONSE\"\004\200\265\030\004\022Y\n\rOnSendMessage\022"
    "*.Battlenet.channel.SendMessageNotificat"
    "ion\032\026.Battlenet.NO_RESPONSE\"\004\200\265\030\005\022g\n\024OnU"
    "pdateChannelState\0221.Battlenet.channel.Up"
    "dateChannelStateNotification\032\026.Battlenet"
    ".NO_RESPONSE\"\004\200\265\030\006\022e\n\023OnUpdateMemberStat"
    "e\0220.Battlenet.channel.UpdateMemberStateN"
    "otification\032\026.Battlenet.NO_RESPONSE\"\004\200\265\030"
    "\007\032*\312>\'bnet.protocol.channel.ChannelSubsc"
    "riberB\005H\002\200\001\001", 4172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "channel_service.proto", &protobuf_RegisterTypes);
  AddMemberRequest::default_instance_ = new AddMemberRequest();
  RemoveMemberRequest::default_instance_ = new RemoveMemberRequest();
  UnsubscribeMemberRequest::default_instance_ = new UnsubscribeMemberRequest();
  SendMessageRequest::default_instance_ = new SendMessageRequest();
  UpdateChannelStateRequest::default_instance_ = new UpdateChannelStateRequest();
  UpdateMemberStateRequest::default_instance_ = new UpdateMemberStateRequest();
  DissolveRequest::default_instance_ = new DissolveRequest();
  SetRolesRequest::default_instance_ = new SetRolesRequest();
  JoinNotification::default_instance_ = new JoinNotification();
  MemberAddedNotification::default_instance_ = new MemberAddedNotification();
  LeaveNotification::default_instance_ = new LeaveNotification();
  MemberRemovedNotification::default_instance_ = new MemberRemovedNotification();
  SendMessageNotification::default_instance_ = new SendMessageNotification();
  UpdateChannelStateNotification::default_instance_ = new UpdateChannelStateNotification();
  UpdateMemberStateNotification::default_instance_ = new UpdateMemberStateNotification();
  AddMemberRequest::default_instance_->InitAsDefaultInstance();
  RemoveMemberRequest::default_instance_->InitAsDefaultInstance();
  UnsubscribeMemberRequest::default_instance_->InitAsDefaultInstance();
  SendMessageRequest::default_instance_->InitAsDefaultInstance();
  UpdateChannelStateRequest::default_instance_->InitAsDefaultInstance();
  UpdateMemberStateRequest::default_instance_->InitAsDefaultInstance();
  DissolveRequest::default_instance_->InitAsDefaultInstance();
  SetRolesRequest::default_instance_->InitAsDefaultInstance();
  JoinNotification::default_instance_->InitAsDefaultInstance();
  MemberAddedNotification::default_instance_->InitAsDefaultInstance();
  LeaveNotification::default_instance_->InitAsDefaultInstance();
  MemberRemovedNotification::default_instance_->InitAsDefaultInstance();
  SendMessageNotification::default_instance_->InitAsDefaultInstance();
  UpdateChannelStateNotification::default_instance_->InitAsDefaultInstance();
  UpdateMemberStateNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_channel_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_channel_5fservice_2eproto {
  StaticDescriptorInitializer_channel_5fservice_2eproto() {
    protobuf_AddDesc_channel_5fservice_2eproto();
  }
} static_descriptor_initializer_channel_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AddMemberRequest::kAgentIdFieldNumber;
const int AddMemberRequest::kMemberIdentityFieldNumber;
const int AddMemberRequest::kMemberStateFieldNumber;
const int AddMemberRequest::kObjectIdFieldNumber;
const int AddMemberRequest::kSubscribeFieldNumber;
#endif  // !_MSC_VER

AddMemberRequest::AddMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.AddMemberRequest)
}

void AddMemberRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  member_identity_ = const_cast< ::Battlenet::Identity*>(&::Battlenet::Identity::default_instance());
  member_state_ = const_cast< ::Battlenet::channel::MemberState*>(&::Battlenet::channel::MemberState::default_instance());
}

AddMemberRequest::AddMemberRequest(const AddMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.AddMemberRequest)
}

void AddMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  member_identity_ = NULL;
  member_state_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  subscribe_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMemberRequest::~AddMemberRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.AddMemberRequest)
  SharedDtor();
}

void AddMemberRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete member_identity_;
    delete member_state_;
  }
}

void AddMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMemberRequest_descriptor_;
}

const AddMemberRequest& AddMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

AddMemberRequest* AddMemberRequest::default_instance_ = NULL;

AddMemberRequest* AddMemberRequest::New() const {
  return new AddMemberRequest;
}

void AddMemberRequest::Swap(AddMemberRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AddMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMemberRequest_descriptor_;
  metadata.reflection = AddMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveMemberRequest::kAgentIdFieldNumber;
const int RemoveMemberRequest::kMemberIdFieldNumber;
const int RemoveMemberRequest::kReasonFieldNumber;
#endif  // !_MSC_VER

RemoveMemberRequest::RemoveMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.RemoveMemberRequest)
}

void RemoveMemberRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  member_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

RemoveMemberRequest::RemoveMemberRequest(const RemoveMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.RemoveMemberRequest)
}

void RemoveMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  member_id_ = NULL;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveMemberRequest::~RemoveMemberRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.RemoveMemberRequest)
  SharedDtor();
}

void RemoveMemberRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete member_id_;
  }
}

void RemoveMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveMemberRequest_descriptor_;
}

const RemoveMemberRequest& RemoveMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

RemoveMemberRequest* RemoveMemberRequest::default_instance_ = NULL;

RemoveMemberRequest* RemoveMemberRequest::New() const {
  return new RemoveMemberRequest;
}

void RemoveMemberRequest::Swap(RemoveMemberRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata RemoveMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveMemberRequest_descriptor_;
  metadata.reflection = RemoveMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsubscribeMemberRequest::kAgentIdFieldNumber;
const int UnsubscribeMemberRequest::kMemberIdFieldNumber;
#endif  // !_MSC_VER

UnsubscribeMemberRequest::UnsubscribeMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.UnsubscribeMemberRequest)
}

void UnsubscribeMemberRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  member_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

UnsubscribeMemberRequest::UnsubscribeMemberRequest(const UnsubscribeMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.UnsubscribeMemberRequest)
}

void UnsubscribeMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  member_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsubscribeMemberRequest::~UnsubscribeMemberRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.UnsubscribeMemberRequest)
  SharedDtor();
}

void UnsubscribeMemberRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete member_id_;
  }
}

void UnsubscribeMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribeMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsubscribeMemberRequest_descriptor_;
}

const UnsubscribeMemberRequest& UnsubscribeMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

UnsubscribeMemberRequest* UnsubscribeMemberRequest::default_instance_ = NULL;

UnsubscribeMemberRequest* UnsubscribeMemberRequest::New() const {
  return new UnsubscribeMemberRequest;
}

void UnsubscribeMemberRequest::Swap(UnsubscribeMemberRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UnsubscribeMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsubscribeMemberRequest_descriptor_;
  metadata.reflection = UnsubscribeMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMessageRequest::kAgentIdFieldNumber;
const int SendMessageRequest::kMessageFieldNumber;
const int SendMessageRequest::kRequiredPrivilegesFieldNumber;
#endif  // !_MSC_VER

SendMessageRequest::SendMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.SendMessageRequest)
}

void SendMessageRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  message_ = const_cast< ::Battlenet::channel::Message*>(&::Battlenet::channel::Message::default_instance());
}

SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.SendMessageRequest)
}

void SendMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  message_ = NULL;
  required_privileges_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMessageRequest::~SendMessageRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.SendMessageRequest)
  SharedDtor();
}

void SendMessageRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete message_;
  }
}

void SendMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageRequest_descriptor_;
}

const SendMessageRequest& SendMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

SendMessageRequest* SendMessageRequest::default_instance_ = NULL;

SendMessageRequest* SendMessageRequest::New() const {
  return new SendMessageRequest;
}

void SendMessageRequest::Swap(SendMessageRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SendMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageRequest_descriptor_;
  metadata.reflection = SendMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateChannelStateRequest::kAgentIdFieldNumber;
const int UpdateChannelStateRequest::kStateChangeFieldNumber;
#endif  // !_MSC_VER

UpdateChannelStateRequest::UpdateChannelStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.UpdateChannelStateRequest)
}

void UpdateChannelStateRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  state_change_ = const_cast< ::Battlenet::channel::ChannelState*>(&::Battlenet::channel::ChannelState::default_instance());
}

UpdateChannelStateRequest::UpdateChannelStateRequest(const UpdateChannelStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.UpdateChannelStateRequest)
}

void UpdateChannelStateRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  state_change_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateChannelStateRequest::~UpdateChannelStateRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.UpdateChannelStateRequest)
  SharedDtor();
}

void UpdateChannelStateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete state_change_;
  }
}

void UpdateChannelStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateChannelStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateChannelStateRequest_descriptor_;
}

const UpdateChannelStateRequest& UpdateChannelStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

UpdateChannelStateRequest* UpdateChannelStateRequest::default_instance_ = NULL;

UpdateChannelStateRequest* UpdateChannelStateRequest::New() const {
  return new UpdateChannelStateRequest;
}

void UpdateChannelStateRequest::Swap(UpdateChannelStateRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UpdateChannelStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateChannelStateRequest_descriptor_;
  metadata.reflection = UpdateChannelStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMemberStateRequest::kAgentIdFieldNumber;
const int UpdateMemberStateRequest::kStateChangeFieldNumber;
const int UpdateMemberStateRequest::kRemovedRoleFieldNumber;
#endif  // !_MSC_VER

UpdateMemberStateRequest::UpdateMemberStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.UpdateMemberStateRequest)
}

void UpdateMemberStateRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

UpdateMemberStateRequest::UpdateMemberStateRequest(const UpdateMemberStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.UpdateMemberStateRequest)
}

void UpdateMemberStateRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMemberStateRequest::~UpdateMemberStateRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.UpdateMemberStateRequest)
  SharedDtor();
}

void UpdateMemberStateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void UpdateMemberStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMemberStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMemberStateRequest_descriptor_;
}

const UpdateMemberStateRequest& UpdateMemberStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

UpdateMemberStateRequest* UpdateMemberStateRequest::default_instance_ = NULL;

UpdateMemberStateRequest* UpdateMemberStateRequest::New() const {
  return new UpdateMemberStateRequest;
}

void UpdateMemberStateRequest::Swap(UpdateMemberStateRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UpdateMemberStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateMemberStateRequest_descriptor_;
  metadata.reflection = UpdateMemberStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DissolveRequest::kAgentIdFieldNumber;
const int DissolveRequest::kReasonFieldNumber;
#endif  // !_MSC_VER

DissolveRequest::DissolveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.DissolveRequest)
}

void DissolveRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

DissolveRequest::DissolveRequest(const DissolveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.DissolveRequest)
}

void DissolveRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DissolveRequest::~DissolveRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.DissolveRequest)
  SharedDtor();
}

void DissolveRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void DissolveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DissolveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DissolveRequest_descriptor_;
}

const DissolveRequest& DissolveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

DissolveRequest* DissolveRequest::default_instance_ = NULL;

DissolveRequest* DissolveRequest::New() const {
  return new DissolveRequest;
}

void DissolveRequest::Swap(DissolveRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata DissolveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DissolveRequest_descriptor_;
  metadata.reflection = DissolveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetRolesRequest::kAgentIdFieldNumber;
const int SetRolesRequest::kRoleFieldNumber;
const int SetRolesRequest::kMemberIdFieldNumber;
#endif  // !_MSC_VER

SetRolesRequest::SetRolesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.SetRolesRequest)
}

void SetRolesRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

SetRolesRequest::SetRolesRequest(const SetRolesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.SetRolesRequest)
}

void SetRolesRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetRolesRequest::~SetRolesRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.SetRolesRequest)
  SharedDtor();
}

void SetRolesRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void SetRolesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRolesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRolesRequest_descriptor_;
}

const SetRolesRequest& SetRolesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

SetRolesRequest* SetRolesRequest::default_instance_ = NULL;

SetRolesRequest* SetRolesRequest::New() const {
  return new SetRolesRequest;
}

void SetRolesRequest::Swap(SetRolesRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SetRolesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRolesRequest_descriptor_;
  metadata.reflection = SetRolesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinNotification::kSelfFieldNumber;
const int JoinNotification::kMemberFieldNumber;
const int JoinNotification::kChannelStateFieldNumber;
const int JoinNotification::kChannelIdFieldNumber;
const int JoinNotification::kSubscriberFieldNumber;
#endif  // !_MSC_VER

JoinNotification::JoinNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.JoinNotification)
}

void JoinNotification::InitAsDefaultInstance() {
  self_ = const_cast< ::Battlenet::channel::Member*>(&::Battlenet::channel::Member::default_instance());
  channel_state_ = const_cast< ::Battlenet::channel::ChannelState*>(&::Battlenet::channel::ChannelState::default_instance());
  channel_id_ = const_cast< ::Battlenet::channel::ChannelId*>(&::Battlenet::channel::ChannelId::default_instance());
  subscriber_ = const_cast< ::Battlenet::account::Identity*>(&::Battlenet::account::Identity::default_instance());
}

JoinNotification::JoinNotification(const JoinNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.JoinNotification)
}

void JoinNotification::SharedCtor() {
  _cached_size_ = 0;
  self_ = NULL;
  channel_state_ = NULL;
  channel_id_ = NULL;
  subscriber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinNotification::~JoinNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.JoinNotification)
  SharedDtor();
}

void JoinNotification::SharedDtor() {
  if (this != default_instance_) {
    delete self_;
    delete channel_state_;
    delete channel_id_;
    delete subscriber_;
  }
}

void JoinNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinNotification_descriptor_;
}

const JoinNotification& JoinNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

JoinNotification* JoinNotification::default_instance_ = NULL;

JoinNotification* JoinNotification::New() const {
  return new JoinNotification;
}

void JoinNotification::Swap(JoinNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata JoinNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinNotification_descriptor_;
  metadata.reflection = JoinNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberAddedNotification::kMemberFieldNumber;
const int MemberAddedNotification::kChannelIdFieldNumber;
const int MemberAddedNotification::kSubscriberFieldNumber;
#endif  // !_MSC_VER

MemberAddedNotification::MemberAddedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.MemberAddedNotification)
}

void MemberAddedNotification::InitAsDefaultInstance() {
  member_ = const_cast< ::Battlenet::channel::Member*>(&::Battlenet::channel::Member::default_instance());
  channel_id_ = const_cast< ::Battlenet::channel::ChannelId*>(&::Battlenet::channel::ChannelId::default_instance());
  subscriber_ = const_cast< ::Battlenet::account::Identity*>(&::Battlenet::account::Identity::default_instance());
}

MemberAddedNotification::MemberAddedNotification(const MemberAddedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.MemberAddedNotification)
}

void MemberAddedNotification::SharedCtor() {
  _cached_size_ = 0;
  member_ = NULL;
  channel_id_ = NULL;
  subscriber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberAddedNotification::~MemberAddedNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.MemberAddedNotification)
  SharedDtor();
}

void MemberAddedNotification::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
    delete channel_id_;
    delete subscriber_;
  }
}

void MemberAddedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberAddedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberAddedNotification_descriptor_;
}

const MemberAddedNotification& MemberAddedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

MemberAddedNotification* MemberAddedNotification::default_instance_ = NULL;

MemberAddedNotification* MemberAddedNotification::New() const {
  return new MemberAddedNotification;
}

void MemberAddedNotification::Swap(MemberAddedNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata MemberAddedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberAddedNotification_descriptor_;
  metadata.reflection = MemberAddedNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveNotification::kAgentIdFieldNumber;
const int LeaveNotification::kMemberIdFieldNumber;
const int LeaveNotification::kReasonFieldNumber;
const int LeaveNotification::kChannelIdFieldNumber;
const int LeaveNotification::kSubscriberFieldNumber;
#endif  // !_MSC_VER

LeaveNotification::LeaveNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.LeaveNotification)
}

void LeaveNotification::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  member_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  channel_id_ = const_cast< ::Battlenet::channel::ChannelId*>(&::Battlenet::channel::ChannelId::default_instance());
  subscriber_ = const_cast< ::Battlenet::account::Identity*>(&::Battlenet::account::Identity::default_instance());
}

LeaveNotification::LeaveNotification(const LeaveNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.LeaveNotification)
}

void LeaveNotification::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  member_id_ = NULL;
  reason_ = 0u;
  channel_id_ = NULL;
  subscriber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveNotification::~LeaveNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.LeaveNotification)
  SharedDtor();
}

void LeaveNotification::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete member_id_;
    delete channel_id_;
    delete subscriber_;
  }
}

void LeaveNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveNotification_descriptor_;
}

const LeaveNotification& LeaveNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

LeaveNotification* LeaveNotification::default_instance_ = NULL;

LeaveNotification* LeaveNotification::New() const {
  return new LeaveNotification;
}

void LeaveNotification::Swap(LeaveNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata LeaveNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveNotification_descriptor_;
  metadata.reflection = LeaveNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberRemovedNotification::kAgentIdFieldNumber;
const int MemberRemovedNotification::kMemberIdFieldNumber;
const int MemberRemovedNotification::kReasonFieldNumber;
const int MemberRemovedNotification::kChannelIdFieldNumber;
const int MemberRemovedNotification::kSubscriberFieldNumber;
#endif  // !_MSC_VER

MemberRemovedNotification::MemberRemovedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.MemberRemovedNotification)
}

void MemberRemovedNotification::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  member_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  channel_id_ = const_cast< ::Battlenet::channel::ChannelId*>(&::Battlenet::channel::ChannelId::default_instance());
  subscriber_ = const_cast< ::Battlenet::account::Identity*>(&::Battlenet::account::Identity::default_instance());
}

MemberRemovedNotification::MemberRemovedNotification(const MemberRemovedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.MemberRemovedNotification)
}

void MemberRemovedNotification::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  member_id_ = NULL;
  reason_ = 0u;
  channel_id_ = NULL;
  subscriber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberRemovedNotification::~MemberRemovedNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.MemberRemovedNotification)
  SharedDtor();
}

void MemberRemovedNotification::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete member_id_;
    delete channel_id_;
    delete subscriber_;
  }
}

void MemberRemovedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberRemovedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberRemovedNotification_descriptor_;
}

const MemberRemovedNotification& MemberRemovedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

MemberRemovedNotification* MemberRemovedNotification::default_instance_ = NULL;

MemberRemovedNotification* MemberRemovedNotification::New() const {
  return new MemberRemovedNotification;
}

void MemberRemovedNotification::Swap(MemberRemovedNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata MemberRemovedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberRemovedNotification_descriptor_;
  metadata.reflection = MemberRemovedNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMessageNotification::kAgentIdFieldNumber;
const int SendMessageNotification::kMessageFieldNumber;
const int SendMessageNotification::kRequiredPrivilegesFieldNumber;
const int SendMessageNotification::kIdentityFieldNumber;
const int SendMessageNotification::kChannelIdFieldNumber;
const int SendMessageNotification::kSubscriberFieldNumber;
#endif  // !_MSC_VER

SendMessageNotification::SendMessageNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.SendMessageNotification)
}

void SendMessageNotification::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  message_ = const_cast< ::Battlenet::channel::Message*>(&::Battlenet::channel::Message::default_instance());
  channel_id_ = const_cast< ::Battlenet::channel::ChannelId*>(&::Battlenet::channel::ChannelId::default_instance());
  subscriber_ = const_cast< ::Battlenet::account::Identity*>(&::Battlenet::account::Identity::default_instance());
}

SendMessageNotification::SendMessageNotification(const SendMessageNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.SendMessageNotification)
}

void SendMessageNotification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  agent_id_ = NULL;
  message_ = NULL;
  required_privileges_ = GOOGLE_ULONGLONG(0);
  identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = NULL;
  subscriber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMessageNotification::~SendMessageNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.SendMessageNotification)
  SharedDtor();
}

void SendMessageNotification::SharedDtor() {
  if (identity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_;
  }
  if (this != default_instance_) {
    delete agent_id_;
    delete message_;
    delete channel_id_;
    delete subscriber_;
  }
}

void SendMessageNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageNotification_descriptor_;
}

const SendMessageNotification& SendMessageNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

SendMessageNotification* SendMessageNotification::default_instance_ = NULL;

SendMessageNotification* SendMessageNotification::New() const {
  return new SendMessageNotification;
}

void SendMessageNotification::Swap(SendMessageNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SendMessageNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageNotification_descriptor_;
  metadata.reflection = SendMessageNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateChannelStateNotification::kAgentIdFieldNumber;
const int UpdateChannelStateNotification::kStateChangeFieldNumber;
const int UpdateChannelStateNotification::kChannelIdFieldNumber;
const int UpdateChannelStateNotification::kSubscriberFieldNumber;
#endif  // !_MSC_VER

UpdateChannelStateNotification::UpdateChannelStateNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.UpdateChannelStateNotification)
}

void UpdateChannelStateNotification::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  state_change_ = const_cast< ::Battlenet::channel::ChannelState*>(&::Battlenet::channel::ChannelState::default_instance());
  channel_id_ = const_cast< ::Battlenet::channel::ChannelId*>(&::Battlenet::channel::ChannelId::default_instance());
  subscriber_ = const_cast< ::Battlenet::account::Identity*>(&::Battlenet::account::Identity::default_instance());
}

UpdateChannelStateNotification::UpdateChannelStateNotification(const UpdateChannelStateNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.UpdateChannelStateNotification)
}

void UpdateChannelStateNotification::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  state_change_ = NULL;
  channel_id_ = NULL;
  subscriber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateChannelStateNotification::~UpdateChannelStateNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.UpdateChannelStateNotification)
  SharedDtor();
}

void UpdateChannelStateNotification::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete state_change_;
    delete channel_id_;
    delete subscriber_;
  }
}

void UpdateChannelStateNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateChannelStateNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateChannelStateNotification_descriptor_;
}

const UpdateChannelStateNotification& UpdateChannelStateNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

UpdateChannelStateNotification* UpdateChannelStateNotification::default_instance_ = NULL;

UpdateChannelStateNotification* UpdateChannelStateNotification::New() const {
  return new UpdateChannelStateNotification;
}

void UpdateChannelStateNotification::Swap(UpdateChannelStateNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UpdateChannelStateNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateChannelStateNotification_descriptor_;
  metadata.reflection = UpdateChannelStateNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMemberStateNotification::kAgentIdFieldNumber;
const int UpdateMemberStateNotification::kStateChangeFieldNumber;
const int UpdateMemberStateNotification::kRemovedRoleFieldNumber;
const int UpdateMemberStateNotification::kChannelIdFieldNumber;
const int UpdateMemberStateNotification::kSubscriberFieldNumber;
#endif  // !_MSC_VER

UpdateMemberStateNotification::UpdateMemberStateNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.UpdateMemberStateNotification)
}

void UpdateMemberStateNotification::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  channel_id_ = const_cast< ::Battlenet::channel::ChannelId*>(&::Battlenet::channel::ChannelId::default_instance());
  subscriber_ = const_cast< ::Battlenet::account::Identity*>(&::Battlenet::account::Identity::default_instance());
}

UpdateMemberStateNotification::UpdateMemberStateNotification(const UpdateMemberStateNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.UpdateMemberStateNotification)
}

void UpdateMemberStateNotification::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  channel_id_ = NULL;
  subscriber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMemberStateNotification::~UpdateMemberStateNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.UpdateMemberStateNotification)
  SharedDtor();
}

void UpdateMemberStateNotification::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete channel_id_;
    delete subscriber_;
  }
}

void UpdateMemberStateNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMemberStateNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMemberStateNotification_descriptor_;
}

const UpdateMemberStateNotification& UpdateMemberStateNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fservice_2eproto();
  return *default_instance_;
}

UpdateMemberStateNotification* UpdateMemberStateNotification::default_instance_ = NULL;

UpdateMemberStateNotification* UpdateMemberStateNotification::New() const {
  return new UpdateMemberStateNotification;
}

void UpdateMemberStateNotification::Swap(UpdateMemberStateNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UpdateMemberStateNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateMemberStateNotification_descriptor_;
  metadata.reflection = UpdateMemberStateNotification_reflection_;
  return metadata;
}


// ===================================================================

ChannelService::~ChannelService() {}

const ::google::protobuf::ServiceDescriptor* ChannelService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ChannelService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelService_descriptor_;
}

void ChannelService::AddMember(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::AddMemberRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddMember() not implemented.");
  done->Run();
}

void ChannelService::RemoveMember(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::RemoveMemberRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveMember() not implemented.");
  done->Run();
}

void ChannelService::SendMessage(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::SendMessageRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendMessage() not implemented.");
  done->Run();
}

void ChannelService::UpdateChannelState(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::UpdateChannelStateRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateChannelState() not implemented.");
  done->Run();
}

void ChannelService::UpdateMemberState(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::UpdateMemberStateRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateMemberState() not implemented.");
  done->Run();
}

void ChannelService::Dissolve(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::DissolveRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Dissolve() not implemented.");
  done->Run();
}

void ChannelService::SetRoles(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::SetRolesRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetRoles() not implemented.");
  done->Run();
}

void ChannelService::UnsubscribeMember(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::UnsubscribeMemberRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UnsubscribeMember() not implemented.");
  done->Run();
}

void ChannelService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ChannelService_descriptor_);
  switch(method->index()) {
    case 0:
      AddMember(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::AddMemberRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 1:
      RemoveMember(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::RemoveMemberRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 2:
      SendMessage(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::SendMessageRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 3:
      UpdateChannelState(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::UpdateChannelStateRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 4:
      UpdateMemberState(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::UpdateMemberStateRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 5:
      Dissolve(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::DissolveRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 6:
      SetRoles(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::SetRolesRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 7:
      UnsubscribeMember(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::UnsubscribeMemberRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ChannelService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::channel::AddMemberRequest::default_instance();
    case 1:
      return ::Battlenet::channel::RemoveMemberRequest::default_instance();
    case 2:
      return ::Battlenet::channel::SendMessageRequest::default_instance();
    case 3:
      return ::Battlenet::channel::UpdateChannelStateRequest::default_instance();
    case 4:
      return ::Battlenet::channel::UpdateMemberStateRequest::default_instance();
    case 5:
      return ::Battlenet::channel::DissolveRequest::default_instance();
    case 6:
      return ::Battlenet::channel::SetRolesRequest::default_instance();
    case 7:
      return ::Battlenet::channel::UnsubscribeMemberRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ChannelService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::NoData::default_instance();
    case 1:
      return ::Battlenet::NoData::default_instance();
    case 2:
      return ::Battlenet::NoData::default_instance();
    case 3:
      return ::Battlenet::NoData::default_instance();
    case 4:
      return ::Battlenet::NoData::default_instance();
    case 5:
      return ::Battlenet::NoData::default_instance();
    case 6:
      return ::Battlenet::NoData::default_instance();
    case 7:
      return ::Battlenet::NoData::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ChannelService_Stub::ChannelService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChannelService_Stub::ChannelService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ChannelService_Stub::~ChannelService_Stub() {
  if (owns_channel_) delete channel_;
}

void ChannelService_Stub::AddMember(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::AddMemberRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChannelService_Stub::RemoveMember(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::RemoveMemberRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ChannelService_Stub::SendMessage(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::SendMessageRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ChannelService_Stub::UpdateChannelState(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::UpdateChannelStateRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ChannelService_Stub::UpdateMemberState(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::UpdateMemberStateRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ChannelService_Stub::Dissolve(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::DissolveRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void ChannelService_Stub::SetRoles(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::SetRolesRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void ChannelService_Stub::UnsubscribeMember(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::UnsubscribeMemberRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
// ===================================================================

ChannelListener::~ChannelListener() {}

const ::google::protobuf::ServiceDescriptor* ChannelListener::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelListener_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ChannelListener::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelListener_descriptor_;
}

void ChannelListener::OnJoin(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::JoinNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnJoin() not implemented.");
  done->Run();
}

void ChannelListener::OnMemberAdded(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::MemberAddedNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnMemberAdded() not implemented.");
  done->Run();
}

void ChannelListener::OnLeave(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::LeaveNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnLeave() not implemented.");
  done->Run();
}

void ChannelListener::OnMemberRemoved(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::MemberRemovedNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnMemberRemoved() not implemented.");
  done->Run();
}

void ChannelListener::OnSendMessage(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::SendMessageNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnSendMessage() not implemented.");
  done->Run();
}

void ChannelListener::OnUpdateChannelState(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::UpdateChannelStateNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnUpdateChannelState() not implemented.");
  done->Run();
}

void ChannelListener::OnUpdateMemberState(::google::protobuf::RpcController* controller,
                         const ::Battlenet::channel::UpdateMemberStateNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnUpdateMemberState() not implemented.");
  done->Run();
}

void ChannelListener::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ChannelListener_descriptor_);
  switch(method->index()) {
    case 0:
      OnJoin(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::JoinNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 1:
      OnMemberAdded(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::MemberAddedNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 2:
      OnLeave(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::LeaveNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 3:
      OnMemberRemoved(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::MemberRemovedNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 4:
      OnSendMessage(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::SendMessageNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 5:
      OnUpdateChannelState(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::UpdateChannelStateNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 6:
      OnUpdateMemberState(controller,
             ::google::protobuf::down_cast<const ::Battlenet::channel::UpdateMemberStateNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ChannelListener::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::channel::JoinNotification::default_instance();
    case 1:
      return ::Battlenet::channel::MemberAddedNotification::default_instance();
    case 2:
      return ::Battlenet::channel::LeaveNotification::default_instance();
    case 3:
      return ::Battlenet::channel::MemberRemovedNotification::default_instance();
    case 4:
      return ::Battlenet::channel::SendMessageNotification::default_instance();
    case 5:
      return ::Battlenet::channel::UpdateChannelStateNotification::default_instance();
    case 6:
      return ::Battlenet::channel::UpdateMemberStateNotification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ChannelListener::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 1:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 2:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 3:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 4:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 5:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 6:
      return ::Battlenet::NO_RESPONSE::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ChannelListener_Stub::ChannelListener_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChannelListener_Stub::ChannelListener_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ChannelListener_Stub::~ChannelListener_Stub() {
  if (owns_channel_) delete channel_;
}

void ChannelListener_Stub::OnJoin(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::JoinNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChannelListener_Stub::OnMemberAdded(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::MemberAddedNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ChannelListener_Stub::OnLeave(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::LeaveNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ChannelListener_Stub::OnMemberRemoved(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::MemberRemovedNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ChannelListener_Stub::OnSendMessage(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::SendMessageNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ChannelListener_Stub::OnUpdateChannelState(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::UpdateChannelStateNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void ChannelListener_Stub::OnUpdateMemberState(::google::protobuf::RpcController* controller,
                              const ::Battlenet::channel::UpdateMemberStateNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace channel
}  // namespace Battlenet

// @@protoc_insertion_point(global_scope)
