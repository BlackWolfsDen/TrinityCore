// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: challenge_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "challenge_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace challenge {

namespace {

const ::google::protobuf::Descriptor* Challenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Challenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengePickedRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengePickedRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengePickedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengePickedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeAnsweredRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeAnsweredRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeAnsweredResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeAnsweredResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeCancelledRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeCancelledRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendChallengeToUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendChallengeToUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendChallengeToUserResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendChallengeToUserResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeResultRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeResultRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeExternalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeExternalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeExternalResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeExternalResult_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* ChallengeService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* ChallengeListener_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_challenge_5fservice_2eproto() {
  protobuf_AddDesc_challenge_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "challenge_service.proto");
  GOOGLE_CHECK(file != NULL);
  Challenge_descriptor_ = file->message_type(0);
  static const int Challenge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, retries_),
  };
  Challenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Challenge_descriptor_,
      Challenge::default_instance_,
      Challenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Challenge));
  ChallengePickedRequest_descriptor_ = file->message_type(1);
  static const int ChallengePickedRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePickedRequest, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePickedRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePickedRequest, new_challenge_protocol_),
  };
  ChallengePickedRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengePickedRequest_descriptor_,
      ChallengePickedRequest::default_instance_,
      ChallengePickedRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePickedRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePickedRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengePickedRequest));
  ChallengePickedResponse_descriptor_ = file->message_type(2);
  static const int ChallengePickedResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePickedResponse, data_),
  };
  ChallengePickedResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengePickedResponse_descriptor_,
      ChallengePickedResponse::default_instance_,
      ChallengePickedResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePickedResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePickedResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengePickedResponse));
  ChallengeAnsweredRequest_descriptor_ = file->message_type(3);
  static const int ChallengeAnsweredRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeAnsweredRequest, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeAnsweredRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeAnsweredRequest, id_),
  };
  ChallengeAnsweredRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeAnsweredRequest_descriptor_,
      ChallengeAnsweredRequest::default_instance_,
      ChallengeAnsweredRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeAnsweredRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeAnsweredRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeAnsweredRequest));
  ChallengeAnsweredResponse_descriptor_ = file->message_type(4);
  static const int ChallengeAnsweredResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeAnsweredResponse, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeAnsweredResponse, do_retry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeAnsweredResponse, record_not_found_),
  };
  ChallengeAnsweredResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeAnsweredResponse_descriptor_,
      ChallengeAnsweredResponse::default_instance_,
      ChallengeAnsweredResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeAnsweredResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeAnsweredResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeAnsweredResponse));
  ChallengeCancelledRequest_descriptor_ = file->message_type(5);
  static const int ChallengeCancelledRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeCancelledRequest, id_),
  };
  ChallengeCancelledRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeCancelledRequest_descriptor_,
      ChallengeCancelledRequest::default_instance_,
      ChallengeCancelledRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeCancelledRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeCancelledRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeCancelledRequest));
  SendChallengeToUserRequest_descriptor_ = file->message_type(6);
  static const int SendChallengeToUserRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChallengeToUserRequest, peer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChallengeToUserRequest, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChallengeToUserRequest, challenges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChallengeToUserRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChallengeToUserRequest, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChallengeToUserRequest, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChallengeToUserRequest, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChallengeToUserRequest, account_id_),
  };
  SendChallengeToUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendChallengeToUserRequest_descriptor_,
      SendChallengeToUserRequest::default_instance_,
      SendChallengeToUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChallengeToUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChallengeToUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendChallengeToUserRequest));
  SendChallengeToUserResponse_descriptor_ = file->message_type(7);
  static const int SendChallengeToUserResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChallengeToUserResponse, id_),
  };
  SendChallengeToUserResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendChallengeToUserResponse_descriptor_,
      SendChallengeToUserResponse::default_instance_,
      SendChallengeToUserResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChallengeToUserResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChallengeToUserResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendChallengeToUserResponse));
  ChallengeUserRequest_descriptor_ = file->message_type(8);
  static const int ChallengeUserRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUserRequest, challenges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUserRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUserRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUserRequest, deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUserRequest, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUserRequest, game_account_id_),
  };
  ChallengeUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeUserRequest_descriptor_,
      ChallengeUserRequest::default_instance_,
      ChallengeUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeUserRequest));
  ChallengeResultRequest_descriptor_ = file->message_type(9);
  static const int ChallengeResultRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultRequest, error_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultRequest, answer_),
  };
  ChallengeResultRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeResultRequest_descriptor_,
      ChallengeResultRequest::default_instance_,
      ChallengeResultRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeResultRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeResultRequest));
  ChallengeExternalRequest_descriptor_ = file->message_type(10);
  static const int ChallengeExternalRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeExternalRequest, request_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeExternalRequest, payload_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeExternalRequest, payload_),
  };
  ChallengeExternalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeExternalRequest_descriptor_,
      ChallengeExternalRequest::default_instance_,
      ChallengeExternalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeExternalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeExternalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeExternalRequest));
  ChallengeExternalResult_descriptor_ = file->message_type(11);
  static const int ChallengeExternalResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeExternalResult, request_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeExternalResult, passed_),
  };
  ChallengeExternalResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeExternalResult_descriptor_,
      ChallengeExternalResult::default_instance_,
      ChallengeExternalResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeExternalResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeExternalResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeExternalResult));
  ChallengeService_descriptor_ = file->service(0);
  ChallengeListener_descriptor_ = file->service(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_challenge_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Challenge_descriptor_, &Challenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengePickedRequest_descriptor_, &ChallengePickedRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengePickedResponse_descriptor_, &ChallengePickedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeAnsweredRequest_descriptor_, &ChallengeAnsweredRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeAnsweredResponse_descriptor_, &ChallengeAnsweredResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeCancelledRequest_descriptor_, &ChallengeCancelledRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendChallengeToUserRequest_descriptor_, &SendChallengeToUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendChallengeToUserResponse_descriptor_, &SendChallengeToUserResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeUserRequest_descriptor_, &ChallengeUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeResultRequest_descriptor_, &ChallengeResultRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeExternalRequest_descriptor_, &ChallengeExternalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeExternalResult_descriptor_, &ChallengeExternalResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_challenge_5fservice_2eproto() {
  delete Challenge::default_instance_;
  delete Challenge_reflection_;
  delete ChallengePickedRequest::default_instance_;
  delete ChallengePickedRequest_reflection_;
  delete ChallengePickedResponse::default_instance_;
  delete ChallengePickedResponse_reflection_;
  delete ChallengeAnsweredRequest::default_instance_;
  delete ChallengeAnsweredRequest_reflection_;
  delete ChallengeAnsweredResponse::default_instance_;
  delete ChallengeAnsweredResponse_reflection_;
  delete ChallengeCancelledRequest::default_instance_;
  delete ChallengeCancelledRequest_reflection_;
  delete SendChallengeToUserRequest::default_instance_;
  delete SendChallengeToUserRequest_reflection_;
  delete SendChallengeToUserResponse::default_instance_;
  delete SendChallengeToUserResponse_reflection_;
  delete ChallengeUserRequest::default_instance_;
  delete ChallengeUserRequest_reflection_;
  delete ChallengeResultRequest::default_instance_;
  delete ChallengeResultRequest_reflection_;
  delete ChallengeExternalRequest::default_instance_;
  delete ChallengeExternalRequest_reflection_;
  delete ChallengeExternalResult::default_instance_;
  delete ChallengeExternalResult_reflection_;
}

void protobuf_AddDesc_challenge_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Battlenet::protobuf_AddDesc_attribute_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_entity_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027challenge_service.proto\022\023Battlenet.cha"
    "llenge\032\025attribute_types.proto\032\022entity_ty"
    "pes.proto\032\017rpc_types.proto\"N\n\tChallenge\022"
    "\014\n\004type\030\001 \002(\007\022\014\n\004info\030\002 \001(\t\022\024\n\006answer\030\003 "
    "\001(\tB\004\200\265\030\001\022\017\n\007retries\030\004 \001(\r\"^\n\026ChallengeP"
    "ickedRequest\022\021\n\tchallenge\030\001 \002(\007\022\n\n\002id\030\002 "
    "\001(\r\022%\n\026new_challenge_protocol\030\003 \001(\010:\005fal"
    "se\"-\n\027ChallengePickedResponse\022\022\n\004data\030\001 "
    "\001(\014B\004\200\265\030\001\"P\n\030ChallengeAnsweredRequest\022\024\n"
    "\006answer\030\001 \002(\tB\004\200\265\030\001\022\022\n\004data\030\002 \001(\014B\004\200\265\030\001\022"
    "\n\n\002id\030\003 \001(\r\"[\n\031ChallengeAnsweredResponse"
    "\022\022\n\004data\030\001 \001(\014B\004\200\265\030\001\022\020\n\010do_retry\030\002 \001(\010\022\030"
    "\n\020record_not_found\030\003 \001(\010\"\'\n\031ChallengeCan"
    "celledRequest\022\n\n\002id\030\001 \001(\r\"\276\002\n\032SendChalle"
    "ngeToUserRequest\022%\n\007peer_id\030\001 \001(\0132\024.Batt"
    "lenet.ProcessId\022,\n\017game_account_id\030\002 \001(\013"
    "2\023.Battlenet.EntityId\0222\n\nchallenges\030\003 \003("
    "\0132\036.Battlenet.challenge.Challenge\022\017\n\007con"
    "text\030\004 \002(\007\022\017\n\007timeout\030\005 \001(\004\022(\n\nattribute"
    "s\030\006 \003(\0132\024.Battlenet.Attribute\022\"\n\004host\030\007 "
    "\001(\0132\024.Battlenet.ProcessId\022\'\n\naccount_id\030"
    "\010 \001(\0132\023.Battlenet.EntityId\")\n\033SendChalle"
    "ngeToUserResponse\022\n\n\002id\030\001 \001(\r\"\321\001\n\024Challe"
    "ngeUserRequest\0222\n\nchallenges\030\001 \003(\0132\036.Bat"
    "tlenet.challenge.Challenge\022\017\n\007context\030\002 "
    "\002(\007\022\n\n\002id\030\003 \001(\r\022\020\n\010deadline\030\004 \001(\004\022(\n\natt"
    "ributes\030\005 \003(\0132\024.Battlenet.Attribute\022,\n\017g"
    "ame_account_id\030\006 \001(\0132\023.Battlenet.EntityI"
    "d\"Z\n\026ChallengeResultRequest\022\n\n\002id\030\001 \001(\r\022"
    "\014\n\004type\030\002 \001(\007\022\020\n\010error_id\030\003 \001(\r\022\024\n\006answe"
    "r\030\004 \001(\014B\004\200\265\030\001\"X\n\030ChallengeExternalReques"
    "t\022\025\n\rrequest_token\030\001 \001(\t\022\024\n\014payload_type"
    "\030\002 \001(\t\022\017\n\007payload\030\003 \001(\014\"F\n\027ChallengeExte"
    "rnalResult\022\025\n\rrequest_token\030\001 \001(\t\022\024\n\006pas"
    "sed\030\002 \001(\010:\004true2\214\004\n\020ChallengeService\022r\n\017"
    "ChallengePicked\022+.Battlenet.challenge.Ch"
    "allengePickedRequest\032,.Battlenet.challen"
    "ge.ChallengePickedResponse\"\004\200\265\030\001\022x\n\021Chal"
    "lengeAnswered\022-.Battlenet.challenge.Chal"
    "lengeAnsweredRequest\032..Battlenet.challen"
    "ge.ChallengeAnsweredResponse\"\004\200\265\030\002\022]\n\022Ch"
    "allengeCancelled\022..Battlenet.challenge.C"
    "hallengeCancelledRequest\032\021.Battlenet.NoD"
    "ata\"\004\200\265\030\003\022~\n\023SendChallengeToUser\022/.Battl"
    "enet.challenge.SendChallengeToUserReques"
    "t\0320.Battlenet.challenge.SendChallengeToU"
    "serResponse\"\004\200\265\030\004\032+\312>(bnet.protocol.chal"
    "lenge.ChallengeService2\310\003\n\021ChallengeList"
    "ener\022Z\n\017OnChallengeUser\022).Battlenet.chal"
    "lenge.ChallengeUserRequest\032\026.Battlenet.N"
    "O_RESPONSE\"\004\200\265\030\001\022^\n\021OnChallengeResult\022+."
    "Battlenet.challenge.ChallengeResultReque"
    "st\032\026.Battlenet.NO_RESPONSE\"\004\200\265\030\002\022b\n\023OnEx"
    "ternalChallenge\022-.Battlenet.challenge.Ch"
    "allengeExternalRequest\032\026.Battlenet.NO_RE"
    "SPONSE\"\004\200\265\030\003\022g\n\031OnExternalChallengeResul"
    "t\022,.Battlenet.challenge.ChallengeExterna"
    "lResult\032\026.Battlenet.NO_RESPONSE\"\004\200\265\030\004\032*\312"
    ">\'bnet.protocol.challenge.ChallengeNotif"
    "yB\005H\002\200\001\001", 2368);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "challenge_service.proto", &protobuf_RegisterTypes);
  Challenge::default_instance_ = new Challenge();
  ChallengePickedRequest::default_instance_ = new ChallengePickedRequest();
  ChallengePickedResponse::default_instance_ = new ChallengePickedResponse();
  ChallengeAnsweredRequest::default_instance_ = new ChallengeAnsweredRequest();
  ChallengeAnsweredResponse::default_instance_ = new ChallengeAnsweredResponse();
  ChallengeCancelledRequest::default_instance_ = new ChallengeCancelledRequest();
  SendChallengeToUserRequest::default_instance_ = new SendChallengeToUserRequest();
  SendChallengeToUserResponse::default_instance_ = new SendChallengeToUserResponse();
  ChallengeUserRequest::default_instance_ = new ChallengeUserRequest();
  ChallengeResultRequest::default_instance_ = new ChallengeResultRequest();
  ChallengeExternalRequest::default_instance_ = new ChallengeExternalRequest();
  ChallengeExternalResult::default_instance_ = new ChallengeExternalResult();
  Challenge::default_instance_->InitAsDefaultInstance();
  ChallengePickedRequest::default_instance_->InitAsDefaultInstance();
  ChallengePickedResponse::default_instance_->InitAsDefaultInstance();
  ChallengeAnsweredRequest::default_instance_->InitAsDefaultInstance();
  ChallengeAnsweredResponse::default_instance_->InitAsDefaultInstance();
  ChallengeCancelledRequest::default_instance_->InitAsDefaultInstance();
  SendChallengeToUserRequest::default_instance_->InitAsDefaultInstance();
  SendChallengeToUserResponse::default_instance_->InitAsDefaultInstance();
  ChallengeUserRequest::default_instance_->InitAsDefaultInstance();
  ChallengeResultRequest::default_instance_->InitAsDefaultInstance();
  ChallengeExternalRequest::default_instance_->InitAsDefaultInstance();
  ChallengeExternalResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_challenge_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_challenge_5fservice_2eproto {
  StaticDescriptorInitializer_challenge_5fservice_2eproto() {
    protobuf_AddDesc_challenge_5fservice_2eproto();
  }
} static_descriptor_initializer_challenge_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Challenge::kTypeFieldNumber;
const int Challenge::kInfoFieldNumber;
const int Challenge::kAnswerFieldNumber;
const int Challenge::kRetriesFieldNumber;
#endif  // !_MSC_VER

Challenge::Challenge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.challenge.Challenge)
}

void Challenge::InitAsDefaultInstance() {
}

Challenge::Challenge(const Challenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.challenge.Challenge)
}

void Challenge::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retries_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Challenge::~Challenge() {
  // @@protoc_insertion_point(destructor:Battlenet.challenge.Challenge)
  SharedDtor();
}

void Challenge::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

void Challenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Challenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Challenge_descriptor_;
}

const Challenge& Challenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_5fservice_2eproto();
  return *default_instance_;
}

Challenge* Challenge::default_instance_ = NULL;

Challenge* Challenge::New() const {
  return new Challenge;
}

void Challenge::Swap(Challenge* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Challenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Challenge_descriptor_;
  metadata.reflection = Challenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengePickedRequest::kChallengeFieldNumber;
const int ChallengePickedRequest::kIdFieldNumber;
const int ChallengePickedRequest::kNewChallengeProtocolFieldNumber;
#endif  // !_MSC_VER

ChallengePickedRequest::ChallengePickedRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.challenge.ChallengePickedRequest)
}

void ChallengePickedRequest::InitAsDefaultInstance() {
}

ChallengePickedRequest::ChallengePickedRequest(const ChallengePickedRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.challenge.ChallengePickedRequest)
}

void ChallengePickedRequest::SharedCtor() {
  _cached_size_ = 0;
  challenge_ = 0u;
  id_ = 0u;
  new_challenge_protocol_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengePickedRequest::~ChallengePickedRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.challenge.ChallengePickedRequest)
  SharedDtor();
}

void ChallengePickedRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChallengePickedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengePickedRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengePickedRequest_descriptor_;
}

const ChallengePickedRequest& ChallengePickedRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_5fservice_2eproto();
  return *default_instance_;
}

ChallengePickedRequest* ChallengePickedRequest::default_instance_ = NULL;

ChallengePickedRequest* ChallengePickedRequest::New() const {
  return new ChallengePickedRequest;
}

void ChallengePickedRequest::Swap(ChallengePickedRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ChallengePickedRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengePickedRequest_descriptor_;
  metadata.reflection = ChallengePickedRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengePickedResponse::kDataFieldNumber;
#endif  // !_MSC_VER

ChallengePickedResponse::ChallengePickedResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.challenge.ChallengePickedResponse)
}

void ChallengePickedResponse::InitAsDefaultInstance() {
}

ChallengePickedResponse::ChallengePickedResponse(const ChallengePickedResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.challenge.ChallengePickedResponse)
}

void ChallengePickedResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengePickedResponse::~ChallengePickedResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.challenge.ChallengePickedResponse)
  SharedDtor();
}

void ChallengePickedResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ChallengePickedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengePickedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengePickedResponse_descriptor_;
}

const ChallengePickedResponse& ChallengePickedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_5fservice_2eproto();
  return *default_instance_;
}

ChallengePickedResponse* ChallengePickedResponse::default_instance_ = NULL;

ChallengePickedResponse* ChallengePickedResponse::New() const {
  return new ChallengePickedResponse;
}

void ChallengePickedResponse::Swap(ChallengePickedResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ChallengePickedResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengePickedResponse_descriptor_;
  metadata.reflection = ChallengePickedResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeAnsweredRequest::kAnswerFieldNumber;
const int ChallengeAnsweredRequest::kDataFieldNumber;
const int ChallengeAnsweredRequest::kIdFieldNumber;
#endif  // !_MSC_VER

ChallengeAnsweredRequest::ChallengeAnsweredRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.challenge.ChallengeAnsweredRequest)
}

void ChallengeAnsweredRequest::InitAsDefaultInstance() {
}

ChallengeAnsweredRequest::ChallengeAnsweredRequest(const ChallengeAnsweredRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.challenge.ChallengeAnsweredRequest)
}

void ChallengeAnsweredRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeAnsweredRequest::~ChallengeAnsweredRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.challenge.ChallengeAnsweredRequest)
  SharedDtor();
}

void ChallengeAnsweredRequest::SharedDtor() {
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete answer_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ChallengeAnsweredRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeAnsweredRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeAnsweredRequest_descriptor_;
}

const ChallengeAnsweredRequest& ChallengeAnsweredRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_5fservice_2eproto();
  return *default_instance_;
}

ChallengeAnsweredRequest* ChallengeAnsweredRequest::default_instance_ = NULL;

ChallengeAnsweredRequest* ChallengeAnsweredRequest::New() const {
  return new ChallengeAnsweredRequest;
}

void ChallengeAnsweredRequest::Swap(ChallengeAnsweredRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ChallengeAnsweredRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeAnsweredRequest_descriptor_;
  metadata.reflection = ChallengeAnsweredRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeAnsweredResponse::kDataFieldNumber;
const int ChallengeAnsweredResponse::kDoRetryFieldNumber;
const int ChallengeAnsweredResponse::kRecordNotFoundFieldNumber;
#endif  // !_MSC_VER

ChallengeAnsweredResponse::ChallengeAnsweredResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.challenge.ChallengeAnsweredResponse)
}

void ChallengeAnsweredResponse::InitAsDefaultInstance() {
}

ChallengeAnsweredResponse::ChallengeAnsweredResponse(const ChallengeAnsweredResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.challenge.ChallengeAnsweredResponse)
}

void ChallengeAnsweredResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do_retry_ = false;
  record_not_found_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeAnsweredResponse::~ChallengeAnsweredResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.challenge.ChallengeAnsweredResponse)
  SharedDtor();
}

void ChallengeAnsweredResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ChallengeAnsweredResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeAnsweredResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeAnsweredResponse_descriptor_;
}

const ChallengeAnsweredResponse& ChallengeAnsweredResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_5fservice_2eproto();
  return *default_instance_;
}

ChallengeAnsweredResponse* ChallengeAnsweredResponse::default_instance_ = NULL;

ChallengeAnsweredResponse* ChallengeAnsweredResponse::New() const {
  return new ChallengeAnsweredResponse;
}

void ChallengeAnsweredResponse::Swap(ChallengeAnsweredResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ChallengeAnsweredResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeAnsweredResponse_descriptor_;
  metadata.reflection = ChallengeAnsweredResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeCancelledRequest::kIdFieldNumber;
#endif  // !_MSC_VER

ChallengeCancelledRequest::ChallengeCancelledRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.challenge.ChallengeCancelledRequest)
}

void ChallengeCancelledRequest::InitAsDefaultInstance() {
}

ChallengeCancelledRequest::ChallengeCancelledRequest(const ChallengeCancelledRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.challenge.ChallengeCancelledRequest)
}

void ChallengeCancelledRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeCancelledRequest::~ChallengeCancelledRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.challenge.ChallengeCancelledRequest)
  SharedDtor();
}

void ChallengeCancelledRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChallengeCancelledRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeCancelledRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeCancelledRequest_descriptor_;
}

const ChallengeCancelledRequest& ChallengeCancelledRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_5fservice_2eproto();
  return *default_instance_;
}

ChallengeCancelledRequest* ChallengeCancelledRequest::default_instance_ = NULL;

ChallengeCancelledRequest* ChallengeCancelledRequest::New() const {
  return new ChallengeCancelledRequest;
}

void ChallengeCancelledRequest::Swap(ChallengeCancelledRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ChallengeCancelledRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeCancelledRequest_descriptor_;
  metadata.reflection = ChallengeCancelledRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendChallengeToUserRequest::kPeerIdFieldNumber;
const int SendChallengeToUserRequest::kGameAccountIdFieldNumber;
const int SendChallengeToUserRequest::kChallengesFieldNumber;
const int SendChallengeToUserRequest::kContextFieldNumber;
const int SendChallengeToUserRequest::kTimeoutFieldNumber;
const int SendChallengeToUserRequest::kAttributesFieldNumber;
const int SendChallengeToUserRequest::kHostFieldNumber;
const int SendChallengeToUserRequest::kAccountIdFieldNumber;
#endif  // !_MSC_VER

SendChallengeToUserRequest::SendChallengeToUserRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.challenge.SendChallengeToUserRequest)
}

void SendChallengeToUserRequest::InitAsDefaultInstance() {
  peer_id_ = const_cast< ::Battlenet::ProcessId*>(&::Battlenet::ProcessId::default_instance());
  game_account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  host_ = const_cast< ::Battlenet::ProcessId*>(&::Battlenet::ProcessId::default_instance());
  account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

SendChallengeToUserRequest::SendChallengeToUserRequest(const SendChallengeToUserRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.challenge.SendChallengeToUserRequest)
}

void SendChallengeToUserRequest::SharedCtor() {
  _cached_size_ = 0;
  peer_id_ = NULL;
  game_account_id_ = NULL;
  context_ = 0u;
  timeout_ = GOOGLE_ULONGLONG(0);
  host_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendChallengeToUserRequest::~SendChallengeToUserRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.challenge.SendChallengeToUserRequest)
  SharedDtor();
}

void SendChallengeToUserRequest::SharedDtor() {
  if (this != default_instance_) {
    delete peer_id_;
    delete game_account_id_;
    delete host_;
    delete account_id_;
  }
}

void SendChallengeToUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendChallengeToUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendChallengeToUserRequest_descriptor_;
}

const SendChallengeToUserRequest& SendChallengeToUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_5fservice_2eproto();
  return *default_instance_;
}

SendChallengeToUserRequest* SendChallengeToUserRequest::default_instance_ = NULL;

SendChallengeToUserRequest* SendChallengeToUserRequest::New() const {
  return new SendChallengeToUserRequest;
}

void SendChallengeToUserRequest::Swap(SendChallengeToUserRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SendChallengeToUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendChallengeToUserRequest_descriptor_;
  metadata.reflection = SendChallengeToUserRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendChallengeToUserResponse::kIdFieldNumber;
#endif  // !_MSC_VER

SendChallengeToUserResponse::SendChallengeToUserResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.challenge.SendChallengeToUserResponse)
}

void SendChallengeToUserResponse::InitAsDefaultInstance() {
}

SendChallengeToUserResponse::SendChallengeToUserResponse(const SendChallengeToUserResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.challenge.SendChallengeToUserResponse)
}

void SendChallengeToUserResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendChallengeToUserResponse::~SendChallengeToUserResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.challenge.SendChallengeToUserResponse)
  SharedDtor();
}

void SendChallengeToUserResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendChallengeToUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendChallengeToUserResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendChallengeToUserResponse_descriptor_;
}

const SendChallengeToUserResponse& SendChallengeToUserResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_5fservice_2eproto();
  return *default_instance_;
}

SendChallengeToUserResponse* SendChallengeToUserResponse::default_instance_ = NULL;

SendChallengeToUserResponse* SendChallengeToUserResponse::New() const {
  return new SendChallengeToUserResponse;
}

void SendChallengeToUserResponse::Swap(SendChallengeToUserResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SendChallengeToUserResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendChallengeToUserResponse_descriptor_;
  metadata.reflection = SendChallengeToUserResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeUserRequest::kChallengesFieldNumber;
const int ChallengeUserRequest::kContextFieldNumber;
const int ChallengeUserRequest::kIdFieldNumber;
const int ChallengeUserRequest::kDeadlineFieldNumber;
const int ChallengeUserRequest::kAttributesFieldNumber;
const int ChallengeUserRequest::kGameAccountIdFieldNumber;
#endif  // !_MSC_VER

ChallengeUserRequest::ChallengeUserRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.challenge.ChallengeUserRequest)
}

void ChallengeUserRequest::InitAsDefaultInstance() {
  game_account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

ChallengeUserRequest::ChallengeUserRequest(const ChallengeUserRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.challenge.ChallengeUserRequest)
}

void ChallengeUserRequest::SharedCtor() {
  _cached_size_ = 0;
  context_ = 0u;
  id_ = 0u;
  deadline_ = GOOGLE_ULONGLONG(0);
  game_account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeUserRequest::~ChallengeUserRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.challenge.ChallengeUserRequest)
  SharedDtor();
}

void ChallengeUserRequest::SharedDtor() {
  if (this != default_instance_) {
    delete game_account_id_;
  }
}

void ChallengeUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeUserRequest_descriptor_;
}

const ChallengeUserRequest& ChallengeUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_5fservice_2eproto();
  return *default_instance_;
}

ChallengeUserRequest* ChallengeUserRequest::default_instance_ = NULL;

ChallengeUserRequest* ChallengeUserRequest::New() const {
  return new ChallengeUserRequest;
}

void ChallengeUserRequest::Swap(ChallengeUserRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ChallengeUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeUserRequest_descriptor_;
  metadata.reflection = ChallengeUserRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeResultRequest::kIdFieldNumber;
const int ChallengeResultRequest::kTypeFieldNumber;
const int ChallengeResultRequest::kErrorIdFieldNumber;
const int ChallengeResultRequest::kAnswerFieldNumber;
#endif  // !_MSC_VER

ChallengeResultRequest::ChallengeResultRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.challenge.ChallengeResultRequest)
}

void ChallengeResultRequest::InitAsDefaultInstance() {
}

ChallengeResultRequest::ChallengeResultRequest(const ChallengeResultRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.challenge.ChallengeResultRequest)
}

void ChallengeResultRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  error_id_ = 0u;
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeResultRequest::~ChallengeResultRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.challenge.ChallengeResultRequest)
  SharedDtor();
}

void ChallengeResultRequest::SharedDtor() {
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

void ChallengeResultRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeResultRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeResultRequest_descriptor_;
}

const ChallengeResultRequest& ChallengeResultRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_5fservice_2eproto();
  return *default_instance_;
}

ChallengeResultRequest* ChallengeResultRequest::default_instance_ = NULL;

ChallengeResultRequest* ChallengeResultRequest::New() const {
  return new ChallengeResultRequest;
}

void ChallengeResultRequest::Swap(ChallengeResultRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ChallengeResultRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeResultRequest_descriptor_;
  metadata.reflection = ChallengeResultRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeExternalRequest::kRequestTokenFieldNumber;
const int ChallengeExternalRequest::kPayloadTypeFieldNumber;
const int ChallengeExternalRequest::kPayloadFieldNumber;
#endif  // !_MSC_VER

ChallengeExternalRequest::ChallengeExternalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.challenge.ChallengeExternalRequest)
}

void ChallengeExternalRequest::InitAsDefaultInstance() {
}

ChallengeExternalRequest::ChallengeExternalRequest(const ChallengeExternalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.challenge.ChallengeExternalRequest)
}

void ChallengeExternalRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeExternalRequest::~ChallengeExternalRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.challenge.ChallengeExternalRequest)
  SharedDtor();
}

void ChallengeExternalRequest::SharedDtor() {
  if (request_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_token_;
  }
  if (payload_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_type_;
  }
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void ChallengeExternalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeExternalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeExternalRequest_descriptor_;
}

const ChallengeExternalRequest& ChallengeExternalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_5fservice_2eproto();
  return *default_instance_;
}

ChallengeExternalRequest* ChallengeExternalRequest::default_instance_ = NULL;

ChallengeExternalRequest* ChallengeExternalRequest::New() const {
  return new ChallengeExternalRequest;
}

void ChallengeExternalRequest::Swap(ChallengeExternalRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ChallengeExternalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeExternalRequest_descriptor_;
  metadata.reflection = ChallengeExternalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeExternalResult::kRequestTokenFieldNumber;
const int ChallengeExternalResult::kPassedFieldNumber;
#endif  // !_MSC_VER

ChallengeExternalResult::ChallengeExternalResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.challenge.ChallengeExternalResult)
}

void ChallengeExternalResult::InitAsDefaultInstance() {
}

ChallengeExternalResult::ChallengeExternalResult(const ChallengeExternalResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.challenge.ChallengeExternalResult)
}

void ChallengeExternalResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passed_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeExternalResult::~ChallengeExternalResult() {
  // @@protoc_insertion_point(destructor:Battlenet.challenge.ChallengeExternalResult)
  SharedDtor();
}

void ChallengeExternalResult::SharedDtor() {
  if (request_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_token_;
  }
  if (this != default_instance_) {
  }
}

void ChallengeExternalResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeExternalResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeExternalResult_descriptor_;
}

const ChallengeExternalResult& ChallengeExternalResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_challenge_5fservice_2eproto();
  return *default_instance_;
}

ChallengeExternalResult* ChallengeExternalResult::default_instance_ = NULL;

ChallengeExternalResult* ChallengeExternalResult::New() const {
  return new ChallengeExternalResult;
}

void ChallengeExternalResult::Swap(ChallengeExternalResult* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ChallengeExternalResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeExternalResult_descriptor_;
  metadata.reflection = ChallengeExternalResult_reflection_;
  return metadata;
}


// ===================================================================

ChallengeService::~ChallengeService() {}

const ::google::protobuf::ServiceDescriptor* ChallengeService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ChallengeService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeService_descriptor_;
}

void ChallengeService::ChallengePicked(::google::protobuf::RpcController* controller,
                         const ::Battlenet::challenge::ChallengePickedRequest*,
                         ::Battlenet::challenge::ChallengePickedResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ChallengePicked() not implemented.");
  done->Run();
}

void ChallengeService::ChallengeAnswered(::google::protobuf::RpcController* controller,
                         const ::Battlenet::challenge::ChallengeAnsweredRequest*,
                         ::Battlenet::challenge::ChallengeAnsweredResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ChallengeAnswered() not implemented.");
  done->Run();
}

void ChallengeService::ChallengeCancelled(::google::protobuf::RpcController* controller,
                         const ::Battlenet::challenge::ChallengeCancelledRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ChallengeCancelled() not implemented.");
  done->Run();
}

void ChallengeService::SendChallengeToUser(::google::protobuf::RpcController* controller,
                         const ::Battlenet::challenge::SendChallengeToUserRequest*,
                         ::Battlenet::challenge::SendChallengeToUserResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendChallengeToUser() not implemented.");
  done->Run();
}

void ChallengeService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ChallengeService_descriptor_);
  switch(method->index()) {
    case 0:
      ChallengePicked(controller,
             ::google::protobuf::down_cast<const ::Battlenet::challenge::ChallengePickedRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::challenge::ChallengePickedResponse*>(response),
             done);
      break;
    case 1:
      ChallengeAnswered(controller,
             ::google::protobuf::down_cast<const ::Battlenet::challenge::ChallengeAnsweredRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::challenge::ChallengeAnsweredResponse*>(response),
             done);
      break;
    case 2:
      ChallengeCancelled(controller,
             ::google::protobuf::down_cast<const ::Battlenet::challenge::ChallengeCancelledRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 3:
      SendChallengeToUser(controller,
             ::google::protobuf::down_cast<const ::Battlenet::challenge::SendChallengeToUserRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::challenge::SendChallengeToUserResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ChallengeService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::challenge::ChallengePickedRequest::default_instance();
    case 1:
      return ::Battlenet::challenge::ChallengeAnsweredRequest::default_instance();
    case 2:
      return ::Battlenet::challenge::ChallengeCancelledRequest::default_instance();
    case 3:
      return ::Battlenet::challenge::SendChallengeToUserRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ChallengeService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::challenge::ChallengePickedResponse::default_instance();
    case 1:
      return ::Battlenet::challenge::ChallengeAnsweredResponse::default_instance();
    case 2:
      return ::Battlenet::NoData::default_instance();
    case 3:
      return ::Battlenet::challenge::SendChallengeToUserResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ChallengeService_Stub::ChallengeService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChallengeService_Stub::ChallengeService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ChallengeService_Stub::~ChallengeService_Stub() {
  if (owns_channel_) delete channel_;
}

void ChallengeService_Stub::ChallengePicked(::google::protobuf::RpcController* controller,
                              const ::Battlenet::challenge::ChallengePickedRequest* request,
                              ::Battlenet::challenge::ChallengePickedResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChallengeService_Stub::ChallengeAnswered(::google::protobuf::RpcController* controller,
                              const ::Battlenet::challenge::ChallengeAnsweredRequest* request,
                              ::Battlenet::challenge::ChallengeAnsweredResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ChallengeService_Stub::ChallengeCancelled(::google::protobuf::RpcController* controller,
                              const ::Battlenet::challenge::ChallengeCancelledRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ChallengeService_Stub::SendChallengeToUser(::google::protobuf::RpcController* controller,
                              const ::Battlenet::challenge::SendChallengeToUserRequest* request,
                              ::Battlenet::challenge::SendChallengeToUserResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

ChallengeListener::~ChallengeListener() {}

const ::google::protobuf::ServiceDescriptor* ChallengeListener::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeListener_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ChallengeListener::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeListener_descriptor_;
}

void ChallengeListener::OnChallengeUser(::google::protobuf::RpcController* controller,
                         const ::Battlenet::challenge::ChallengeUserRequest*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnChallengeUser() not implemented.");
  done->Run();
}

void ChallengeListener::OnChallengeResult(::google::protobuf::RpcController* controller,
                         const ::Battlenet::challenge::ChallengeResultRequest*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnChallengeResult() not implemented.");
  done->Run();
}

void ChallengeListener::OnExternalChallenge(::google::protobuf::RpcController* controller,
                         const ::Battlenet::challenge::ChallengeExternalRequest*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnExternalChallenge() not implemented.");
  done->Run();
}

void ChallengeListener::OnExternalChallengeResult(::google::protobuf::RpcController* controller,
                         const ::Battlenet::challenge::ChallengeExternalResult*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnExternalChallengeResult() not implemented.");
  done->Run();
}

void ChallengeListener::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ChallengeListener_descriptor_);
  switch(method->index()) {
    case 0:
      OnChallengeUser(controller,
             ::google::protobuf::down_cast<const ::Battlenet::challenge::ChallengeUserRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 1:
      OnChallengeResult(controller,
             ::google::protobuf::down_cast<const ::Battlenet::challenge::ChallengeResultRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 2:
      OnExternalChallenge(controller,
             ::google::protobuf::down_cast<const ::Battlenet::challenge::ChallengeExternalRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 3:
      OnExternalChallengeResult(controller,
             ::google::protobuf::down_cast<const ::Battlenet::challenge::ChallengeExternalResult*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ChallengeListener::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::challenge::ChallengeUserRequest::default_instance();
    case 1:
      return ::Battlenet::challenge::ChallengeResultRequest::default_instance();
    case 2:
      return ::Battlenet::challenge::ChallengeExternalRequest::default_instance();
    case 3:
      return ::Battlenet::challenge::ChallengeExternalResult::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ChallengeListener::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 1:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 2:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 3:
      return ::Battlenet::NO_RESPONSE::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ChallengeListener_Stub::ChallengeListener_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChallengeListener_Stub::ChallengeListener_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ChallengeListener_Stub::~ChallengeListener_Stub() {
  if (owns_channel_) delete channel_;
}

void ChallengeListener_Stub::OnChallengeUser(::google::protobuf::RpcController* controller,
                              const ::Battlenet::challenge::ChallengeUserRequest* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChallengeListener_Stub::OnChallengeResult(::google::protobuf::RpcController* controller,
                              const ::Battlenet::challenge::ChallengeResultRequest* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ChallengeListener_Stub::OnExternalChallenge(::google::protobuf::RpcController* controller,
                              const ::Battlenet::challenge::ChallengeExternalRequest* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ChallengeListener_Stub::OnExternalChallengeResult(::google::protobuf::RpcController* controller,
                              const ::Battlenet::challenge::ChallengeExternalResult* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace challenge
}  // namespace Battlenet

// @@protoc_insertion_point(global_scope)
