// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_manager_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_manager_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace user_manager {

namespace {

const ::google::protobuf::Descriptor* SubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRecentPlayersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRecentPlayersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRecentPlayersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRecentPlayersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearRecentPlayersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearRecentPlayersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearRecentPlayersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearRecentPlayersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnblockPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnblockPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockedPlayerAddedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockedPlayerAddedNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockedPlayerRemovedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockedPlayerRemovedNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecentPlayersAddedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecentPlayersAddedNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecentPlayersRemovedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecentPlayersRemovedNotification_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* UserManagerService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* UserManagerListener_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto() {
  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user_manager_service.proto");
  GOOGLE_CHECK(file != NULL);
  SubscribeRequest_descriptor_ = file->message_type(0);
  static const int SubscribeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, object_id_),
  };
  SubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeRequest_descriptor_,
      SubscribeRequest::default_instance_,
      SubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeRequest));
  SubscribeResponse_descriptor_ = file->message_type(1);
  static const int SubscribeResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, blocked_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, recent_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, role_),
  };
  SubscribeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeResponse_descriptor_,
      SubscribeResponse::default_instance_,
      SubscribeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeResponse));
  UnsubscribeRequest_descriptor_ = file->message_type(2);
  static const int UnsubscribeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, object_id_),
  };
  UnsubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsubscribeRequest_descriptor_,
      UnsubscribeRequest::default_instance_,
      UnsubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsubscribeRequest));
  AddRecentPlayersRequest_descriptor_ = file->message_type(3);
  static const int AddRecentPlayersRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersRequest, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersRequest, program_),
  };
  AddRecentPlayersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRecentPlayersRequest_descriptor_,
      AddRecentPlayersRequest::default_instance_,
      AddRecentPlayersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRecentPlayersRequest));
  AddRecentPlayersResponse_descriptor_ = file->message_type(4);
  static const int AddRecentPlayersResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersResponse, players_added_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersResponse, players_removed_),
  };
  AddRecentPlayersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRecentPlayersResponse_descriptor_,
      AddRecentPlayersResponse::default_instance_,
      AddRecentPlayersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRecentPlayersResponse));
  ClearRecentPlayersRequest_descriptor_ = file->message_type(5);
  static const int ClearRecentPlayersRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearRecentPlayersRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearRecentPlayersRequest, program_),
  };
  ClearRecentPlayersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearRecentPlayersRequest_descriptor_,
      ClearRecentPlayersRequest::default_instance_,
      ClearRecentPlayersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearRecentPlayersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearRecentPlayersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearRecentPlayersRequest));
  ClearRecentPlayersResponse_descriptor_ = file->message_type(6);
  static const int ClearRecentPlayersResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearRecentPlayersResponse, players_removed_),
  };
  ClearRecentPlayersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearRecentPlayersResponse_descriptor_,
      ClearRecentPlayersResponse::default_instance_,
      ClearRecentPlayersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearRecentPlayersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearRecentPlayersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearRecentPlayersResponse));
  BlockPlayerRequest_descriptor_ = file->message_type(7);
  static const int BlockPlayerRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerRequest, role_),
  };
  BlockPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockPlayerRequest_descriptor_,
      BlockPlayerRequest::default_instance_,
      BlockPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockPlayerRequest));
  UnblockPlayerRequest_descriptor_ = file->message_type(8);
  static const int UnblockPlayerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockPlayerRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockPlayerRequest, target_id_),
  };
  UnblockPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnblockPlayerRequest_descriptor_,
      UnblockPlayerRequest::default_instance_,
      UnblockPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnblockPlayerRequest));
  BlockedPlayerAddedNotification_descriptor_ = file->message_type(9);
  static const int BlockedPlayerAddedNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockedPlayerAddedNotification, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockedPlayerAddedNotification, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockedPlayerAddedNotification, account_id_),
  };
  BlockedPlayerAddedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockedPlayerAddedNotification_descriptor_,
      BlockedPlayerAddedNotification::default_instance_,
      BlockedPlayerAddedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockedPlayerAddedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockedPlayerAddedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockedPlayerAddedNotification));
  BlockedPlayerRemovedNotification_descriptor_ = file->message_type(10);
  static const int BlockedPlayerRemovedNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockedPlayerRemovedNotification, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockedPlayerRemovedNotification, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockedPlayerRemovedNotification, account_id_),
  };
  BlockedPlayerRemovedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockedPlayerRemovedNotification_descriptor_,
      BlockedPlayerRemovedNotification::default_instance_,
      BlockedPlayerRemovedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockedPlayerRemovedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockedPlayerRemovedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockedPlayerRemovedNotification));
  RecentPlayersAddedNotification_descriptor_ = file->message_type(11);
  static const int RecentPlayersAddedNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentPlayersAddedNotification, player_),
  };
  RecentPlayersAddedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecentPlayersAddedNotification_descriptor_,
      RecentPlayersAddedNotification::default_instance_,
      RecentPlayersAddedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentPlayersAddedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentPlayersAddedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecentPlayersAddedNotification));
  RecentPlayersRemovedNotification_descriptor_ = file->message_type(12);
  static const int RecentPlayersRemovedNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentPlayersRemovedNotification, player_),
  };
  RecentPlayersRemovedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecentPlayersRemovedNotification_descriptor_,
      RecentPlayersRemovedNotification::default_instance_,
      RecentPlayersRemovedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentPlayersRemovedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentPlayersRemovedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecentPlayersRemovedNotification));
  UserManagerService_descriptor_ = file->service(0);
  UserManagerListener_descriptor_ = file->service(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_5fmanager_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeRequest_descriptor_, &SubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeResponse_descriptor_, &SubscribeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsubscribeRequest_descriptor_, &UnsubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRecentPlayersRequest_descriptor_, &AddRecentPlayersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRecentPlayersResponse_descriptor_, &AddRecentPlayersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearRecentPlayersRequest_descriptor_, &ClearRecentPlayersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearRecentPlayersResponse_descriptor_, &ClearRecentPlayersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockPlayerRequest_descriptor_, &BlockPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnblockPlayerRequest_descriptor_, &UnblockPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockedPlayerAddedNotification_descriptor_, &BlockedPlayerAddedNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockedPlayerRemovedNotification_descriptor_, &BlockedPlayerRemovedNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecentPlayersAddedNotification_descriptor_, &RecentPlayersAddedNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecentPlayersRemovedNotification_descriptor_, &RecentPlayersRemovedNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto() {
  delete SubscribeRequest::default_instance_;
  delete SubscribeRequest_reflection_;
  delete SubscribeResponse::default_instance_;
  delete SubscribeResponse_reflection_;
  delete UnsubscribeRequest::default_instance_;
  delete UnsubscribeRequest_reflection_;
  delete AddRecentPlayersRequest::default_instance_;
  delete AddRecentPlayersRequest_reflection_;
  delete AddRecentPlayersResponse::default_instance_;
  delete AddRecentPlayersResponse_reflection_;
  delete ClearRecentPlayersRequest::default_instance_;
  delete ClearRecentPlayersRequest_reflection_;
  delete ClearRecentPlayersResponse::default_instance_;
  delete ClearRecentPlayersResponse_reflection_;
  delete BlockPlayerRequest::default_instance_;
  delete BlockPlayerRequest_reflection_;
  delete UnblockPlayerRequest::default_instance_;
  delete UnblockPlayerRequest_reflection_;
  delete BlockedPlayerAddedNotification::default_instance_;
  delete BlockedPlayerAddedNotification_reflection_;
  delete BlockedPlayerRemovedNotification::default_instance_;
  delete BlockedPlayerRemovedNotification_reflection_;
  delete RecentPlayersAddedNotification::default_instance_;
  delete RecentPlayersAddedNotification_reflection_;
  delete RecentPlayersRemovedNotification::default_instance_;
  delete RecentPlayersRemovedNotification_reflection_;
}

void protobuf_AddDesc_user_5fmanager_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Battlenet::user_manager::protobuf_AddDesc_user_5fmanager_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_entity_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_role_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032user_manager_service.proto\022\026Battlenet."
    "user_manager\032\030user_manager_types.proto\032\022"
    "entity_types.proto\032\020role_types.proto\032\017rp"
    "c_types.proto\"L\n\020SubscribeRequest\022%\n\010age"
    "nt_id\030\001 \001(\0132\023.Battlenet.EntityId\022\021\n\tobje"
    "ct_id\030\002 \002(\004\"\260\001\n\021SubscribeResponse\022>\n\017blo"
    "cked_players\030\001 \003(\0132%.Battlenet.user_mana"
    "ger.BlockedPlayer\022<\n\016recent_players\030\002 \003("
    "\0132$.Battlenet.user_manager.RecentPlayer\022"
    "\035\n\004role\030\003 \003(\0132\017.Battlenet.Role\"N\n\022Unsubs"
    "cribeRequest\022%\n\010agent_id\030\001 \001(\0132\023.Battlen"
    "et.EntityId\022\021\n\tobject_id\030\002 \001(\004\"\210\001\n\027AddRe"
    "centPlayersRequest\0225\n\007players\030\001 \003(\0132$.Ba"
    "ttlenet.user_manager.RecentPlayer\022%\n\010age"
    "nt_id\030\002 \001(\0132\023.Battlenet.EntityId\022\017\n\007prog"
    "ram\030\003 \001(\r\"p\n\030AddRecentPlayersResponse\022;\n"
    "\rplayers_added\030\001 \003(\0132$.Battlenet.user_ma"
    "nager.RecentPlayer\022\027\n\017players_removed\030\003 "
    "\003(\007\"S\n\031ClearRecentPlayersRequest\022%\n\010agen"
    "t_id\030\001 \001(\0132\023.Battlenet.EntityId\022\017\n\007progr"
    "am\030\002 \001(\r\"5\n\032ClearRecentPlayersResponse\022\027"
    "\n\017players_removed\030\001 \003(\007\"q\n\022BlockPlayerRe"
    "quest\022%\n\010agent_id\030\001 \001(\0132\023.Battlenet.Enti"
    "tyId\022&\n\ttarget_id\030\002 \002(\0132\023.Battlenet.Enti"
    "tyId\022\014\n\004role\030\003 \001(\r\"e\n\024UnblockPlayerReque"
    "st\022%\n\010agent_id\030\001 \001(\0132\023.Battlenet.EntityI"
    "d\022&\n\ttarget_id\030\002 \002(\0132\023.Battlenet.EntityI"
    "d\"\256\001\n\036BlockedPlayerAddedNotification\0225\n\006"
    "player\030\001 \002(\0132%.Battlenet.user_manager.Bl"
    "ockedPlayer\022,\n\017game_account_id\030\002 \001(\0132\023.B"
    "attlenet.EntityId\022\'\n\naccount_id\030\003 \001(\0132\023."
    "Battlenet.EntityId\"\260\001\n BlockedPlayerRemo"
    "vedNotification\0225\n\006player\030\001 \002(\0132%.Battle"
    "net.user_manager.BlockedPlayer\022,\n\017game_a"
    "ccount_id\030\002 \001(\0132\023.Battlenet.EntityId\022\'\n\n"
    "account_id\030\003 \001(\0132\023.Battlenet.EntityId\"V\n"
    "\036RecentPlayersAddedNotification\0224\n\006playe"
    "r\030\001 \003(\0132$.Battlenet.user_manager.RecentP"
    "layer\"X\n RecentPlayersRemovedNotificatio"
    "n\0224\n\006player\030\001 \003(\0132$.Battlenet.user_manag"
    "er.RecentPlayer2\314\006\n\022UserManagerService\022f"
    "\n\tSubscribe\022(.Battlenet.user_manager.Sub"
    "scribeRequest\032).Battlenet.user_manager.S"
    "ubscribeResponse\"\004\200\265\030\001\022{\n\020AddRecentPlaye"
    "rs\022/.Battlenet.user_manager.AddRecentPla"
    "yersRequest\0320.Battlenet.user_manager.Add"
    "RecentPlayersResponse\"\004\200\265\030\n\022\201\001\n\022ClearRec"
    "entPlayers\0221.Battlenet.user_manager.Clea"
    "rRecentPlayersRequest\0322.Battlenet.user_m"
    "anager.ClearRecentPlayersResponse\"\004\200\265\030\013\022"
    "R\n\013BlockPlayer\022*.Battlenet.user_manager."
    "BlockPlayerRequest\032\021.Battlenet.NoData\"\004\200"
    "\265\030\024\022V\n\rUnblockPlayer\022,.Battlenet.user_ma"
    "nager.UnblockPlayerRequest\032\021.Battlenet.N"
    "oData\"\004\200\265\030\025\022\\\n\025BlockPlayerForSession\022*.B"
    "attlenet.user_manager.BlockPlayerRequest"
    "\032\021.Battlenet.NoData\"\004\200\265\030(\022=\n\rLoadBlockLi"
    "st\022\023.Battlenet.EntityId\032\021.Battlenet.NoDa"
    "ta\"\004\200\265\0302\022R\n\013Unsubscribe\022*.Battlenet.user"
    "_manager.UnsubscribeRequest\032\021.Battlenet."
    "NoData\"\004\200\265\0303\0320\312>-bnet.protocol.user_mana"
    "ger.UserManagerService2\206\004\n\023UserManagerLi"
    "stener\022l\n\024OnBlockedPlayerAdded\0226.Battlen"
    "et.user_manager.BlockedPlayerAddedNotifi"
    "cation\032\026.Battlenet.NO_RESPONSE\"\004\200\265\030\001\022p\n\026"
    "OnBlockedPlayerRemoved\0228.Battlenet.user_"
    "manager.BlockedPlayerRemovedNotification"
    "\032\026.Battlenet.NO_RESPONSE\"\004\200\265\030\002\022l\n\024OnRece"
    "ntPlayersAdded\0226.Battlenet.user_manager."
    "RecentPlayersAddedNotification\032\026.Battlen"
    "et.NO_RESPONSE\"\004\200\265\030\013\022p\n\026OnRecentPlayersR"
    "emoved\0228.Battlenet.user_manager.RecentPl"
    "ayersRemovedNotification\032\026.Battlenet.NO_"
    "RESPONSE\"\004\200\265\030\014\032/\312>,bnet.protocol.user_ma"
    "nager.UserManagerNotifyB\005H\002\200\001\001", 2990);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user_manager_service.proto", &protobuf_RegisterTypes);
  SubscribeRequest::default_instance_ = new SubscribeRequest();
  SubscribeResponse::default_instance_ = new SubscribeResponse();
  UnsubscribeRequest::default_instance_ = new UnsubscribeRequest();
  AddRecentPlayersRequest::default_instance_ = new AddRecentPlayersRequest();
  AddRecentPlayersResponse::default_instance_ = new AddRecentPlayersResponse();
  ClearRecentPlayersRequest::default_instance_ = new ClearRecentPlayersRequest();
  ClearRecentPlayersResponse::default_instance_ = new ClearRecentPlayersResponse();
  BlockPlayerRequest::default_instance_ = new BlockPlayerRequest();
  UnblockPlayerRequest::default_instance_ = new UnblockPlayerRequest();
  BlockedPlayerAddedNotification::default_instance_ = new BlockedPlayerAddedNotification();
  BlockedPlayerRemovedNotification::default_instance_ = new BlockedPlayerRemovedNotification();
  RecentPlayersAddedNotification::default_instance_ = new RecentPlayersAddedNotification();
  RecentPlayersRemovedNotification::default_instance_ = new RecentPlayersRemovedNotification();
  SubscribeRequest::default_instance_->InitAsDefaultInstance();
  SubscribeResponse::default_instance_->InitAsDefaultInstance();
  UnsubscribeRequest::default_instance_->InitAsDefaultInstance();
  AddRecentPlayersRequest::default_instance_->InitAsDefaultInstance();
  AddRecentPlayersResponse::default_instance_->InitAsDefaultInstance();
  ClearRecentPlayersRequest::default_instance_->InitAsDefaultInstance();
  ClearRecentPlayersResponse::default_instance_->InitAsDefaultInstance();
  BlockPlayerRequest::default_instance_->InitAsDefaultInstance();
  UnblockPlayerRequest::default_instance_->InitAsDefaultInstance();
  BlockedPlayerAddedNotification::default_instance_->InitAsDefaultInstance();
  BlockedPlayerRemovedNotification::default_instance_->InitAsDefaultInstance();
  RecentPlayersAddedNotification::default_instance_->InitAsDefaultInstance();
  RecentPlayersRemovedNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_5fmanager_5fservice_2eproto {
  StaticDescriptorInitializer_user_5fmanager_5fservice_2eproto() {
    protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  }
} static_descriptor_initializer_user_5fmanager_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SubscribeRequest::kAgentIdFieldNumber;
const int SubscribeRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

SubscribeRequest::SubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.user_manager.SubscribeRequest)
}

void SubscribeRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.user_manager.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.user_manager.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void SubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRequest_descriptor_;
}

const SubscribeRequest& SubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  return *default_instance_;
}

SubscribeRequest* SubscribeRequest::default_instance_ = NULL;

SubscribeRequest* SubscribeRequest::New() const {
  return new SubscribeRequest;
}

void SubscribeRequest::Swap(SubscribeRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeRequest_descriptor_;
  metadata.reflection = SubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeResponse::kBlockedPlayersFieldNumber;
const int SubscribeResponse::kRecentPlayersFieldNumber;
const int SubscribeResponse::kRoleFieldNumber;
#endif  // !_MSC_VER

SubscribeResponse::SubscribeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.user_manager.SubscribeResponse)
}

void SubscribeResponse::InitAsDefaultInstance() {
}

SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.user_manager.SubscribeResponse)
}

void SubscribeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.user_manager.SubscribeResponse)
  SharedDtor();
}

void SubscribeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeResponse_descriptor_;
}

const SubscribeResponse& SubscribeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  return *default_instance_;
}

SubscribeResponse* SubscribeResponse::default_instance_ = NULL;

SubscribeResponse* SubscribeResponse::New() const {
  return new SubscribeResponse;
}

void SubscribeResponse::Swap(SubscribeResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SubscribeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeResponse_descriptor_;
  metadata.reflection = SubscribeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsubscribeRequest::kAgentIdFieldNumber;
const int UnsubscribeRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

UnsubscribeRequest::UnsubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.user_manager.UnsubscribeRequest)
}

void UnsubscribeRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.user_manager.UnsubscribeRequest)
}

void UnsubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsubscribeRequest::~UnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.user_manager.UnsubscribeRequest)
  SharedDtor();
}

void UnsubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsubscribeRequest_descriptor_;
}

const UnsubscribeRequest& UnsubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  return *default_instance_;
}

UnsubscribeRequest* UnsubscribeRequest::default_instance_ = NULL;

UnsubscribeRequest* UnsubscribeRequest::New() const {
  return new UnsubscribeRequest;
}

void UnsubscribeRequest::Swap(UnsubscribeRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UnsubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsubscribeRequest_descriptor_;
  metadata.reflection = UnsubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRecentPlayersRequest::kPlayersFieldNumber;
const int AddRecentPlayersRequest::kAgentIdFieldNumber;
const int AddRecentPlayersRequest::kProgramFieldNumber;
#endif  // !_MSC_VER

AddRecentPlayersRequest::AddRecentPlayersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.user_manager.AddRecentPlayersRequest)
}

void AddRecentPlayersRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

AddRecentPlayersRequest::AddRecentPlayersRequest(const AddRecentPlayersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.user_manager.AddRecentPlayersRequest)
}

void AddRecentPlayersRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  program_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRecentPlayersRequest::~AddRecentPlayersRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.user_manager.AddRecentPlayersRequest)
  SharedDtor();
}

void AddRecentPlayersRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void AddRecentPlayersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRecentPlayersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRecentPlayersRequest_descriptor_;
}

const AddRecentPlayersRequest& AddRecentPlayersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  return *default_instance_;
}

AddRecentPlayersRequest* AddRecentPlayersRequest::default_instance_ = NULL;

AddRecentPlayersRequest* AddRecentPlayersRequest::New() const {
  return new AddRecentPlayersRequest;
}

void AddRecentPlayersRequest::Swap(AddRecentPlayersRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AddRecentPlayersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRecentPlayersRequest_descriptor_;
  metadata.reflection = AddRecentPlayersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRecentPlayersResponse::kPlayersAddedFieldNumber;
const int AddRecentPlayersResponse::kPlayersRemovedFieldNumber;
#endif  // !_MSC_VER

AddRecentPlayersResponse::AddRecentPlayersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.user_manager.AddRecentPlayersResponse)
}

void AddRecentPlayersResponse::InitAsDefaultInstance() {
}

AddRecentPlayersResponse::AddRecentPlayersResponse(const AddRecentPlayersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.user_manager.AddRecentPlayersResponse)
}

void AddRecentPlayersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRecentPlayersResponse::~AddRecentPlayersResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.user_manager.AddRecentPlayersResponse)
  SharedDtor();
}

void AddRecentPlayersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRecentPlayersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRecentPlayersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRecentPlayersResponse_descriptor_;
}

const AddRecentPlayersResponse& AddRecentPlayersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  return *default_instance_;
}

AddRecentPlayersResponse* AddRecentPlayersResponse::default_instance_ = NULL;

AddRecentPlayersResponse* AddRecentPlayersResponse::New() const {
  return new AddRecentPlayersResponse;
}

void AddRecentPlayersResponse::Swap(AddRecentPlayersResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AddRecentPlayersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRecentPlayersResponse_descriptor_;
  metadata.reflection = AddRecentPlayersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClearRecentPlayersRequest::kAgentIdFieldNumber;
const int ClearRecentPlayersRequest::kProgramFieldNumber;
#endif  // !_MSC_VER

ClearRecentPlayersRequest::ClearRecentPlayersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.user_manager.ClearRecentPlayersRequest)
}

void ClearRecentPlayersRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

ClearRecentPlayersRequest::ClearRecentPlayersRequest(const ClearRecentPlayersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.user_manager.ClearRecentPlayersRequest)
}

void ClearRecentPlayersRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  program_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearRecentPlayersRequest::~ClearRecentPlayersRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.user_manager.ClearRecentPlayersRequest)
  SharedDtor();
}

void ClearRecentPlayersRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void ClearRecentPlayersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearRecentPlayersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearRecentPlayersRequest_descriptor_;
}

const ClearRecentPlayersRequest& ClearRecentPlayersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  return *default_instance_;
}

ClearRecentPlayersRequest* ClearRecentPlayersRequest::default_instance_ = NULL;

ClearRecentPlayersRequest* ClearRecentPlayersRequest::New() const {
  return new ClearRecentPlayersRequest;
}

void ClearRecentPlayersRequest::Swap(ClearRecentPlayersRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ClearRecentPlayersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearRecentPlayersRequest_descriptor_;
  metadata.reflection = ClearRecentPlayersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClearRecentPlayersResponse::kPlayersRemovedFieldNumber;
#endif  // !_MSC_VER

ClearRecentPlayersResponse::ClearRecentPlayersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.user_manager.ClearRecentPlayersResponse)
}

void ClearRecentPlayersResponse::InitAsDefaultInstance() {
}

ClearRecentPlayersResponse::ClearRecentPlayersResponse(const ClearRecentPlayersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.user_manager.ClearRecentPlayersResponse)
}

void ClearRecentPlayersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearRecentPlayersResponse::~ClearRecentPlayersResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.user_manager.ClearRecentPlayersResponse)
  SharedDtor();
}

void ClearRecentPlayersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearRecentPlayersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearRecentPlayersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearRecentPlayersResponse_descriptor_;
}

const ClearRecentPlayersResponse& ClearRecentPlayersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  return *default_instance_;
}

ClearRecentPlayersResponse* ClearRecentPlayersResponse::default_instance_ = NULL;

ClearRecentPlayersResponse* ClearRecentPlayersResponse::New() const {
  return new ClearRecentPlayersResponse;
}

void ClearRecentPlayersResponse::Swap(ClearRecentPlayersResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ClearRecentPlayersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearRecentPlayersResponse_descriptor_;
  metadata.reflection = ClearRecentPlayersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockPlayerRequest::kAgentIdFieldNumber;
const int BlockPlayerRequest::kTargetIdFieldNumber;
const int BlockPlayerRequest::kRoleFieldNumber;
#endif  // !_MSC_VER

BlockPlayerRequest::BlockPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.user_manager.BlockPlayerRequest)
}

void BlockPlayerRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  target_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

BlockPlayerRequest::BlockPlayerRequest(const BlockPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.user_manager.BlockPlayerRequest)
}

void BlockPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  role_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockPlayerRequest::~BlockPlayerRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.user_manager.BlockPlayerRequest)
  SharedDtor();
}

void BlockPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
  }
}

void BlockPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockPlayerRequest_descriptor_;
}

const BlockPlayerRequest& BlockPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  return *default_instance_;
}

BlockPlayerRequest* BlockPlayerRequest::default_instance_ = NULL;

BlockPlayerRequest* BlockPlayerRequest::New() const {
  return new BlockPlayerRequest;
}

void BlockPlayerRequest::Swap(BlockPlayerRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata BlockPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockPlayerRequest_descriptor_;
  metadata.reflection = BlockPlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnblockPlayerRequest::kAgentIdFieldNumber;
const int UnblockPlayerRequest::kTargetIdFieldNumber;
#endif  // !_MSC_VER

UnblockPlayerRequest::UnblockPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.user_manager.UnblockPlayerRequest)
}

void UnblockPlayerRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  target_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

UnblockPlayerRequest::UnblockPlayerRequest(const UnblockPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.user_manager.UnblockPlayerRequest)
}

void UnblockPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnblockPlayerRequest::~UnblockPlayerRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.user_manager.UnblockPlayerRequest)
  SharedDtor();
}

void UnblockPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
  }
}

void UnblockPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnblockPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnblockPlayerRequest_descriptor_;
}

const UnblockPlayerRequest& UnblockPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  return *default_instance_;
}

UnblockPlayerRequest* UnblockPlayerRequest::default_instance_ = NULL;

UnblockPlayerRequest* UnblockPlayerRequest::New() const {
  return new UnblockPlayerRequest;
}

void UnblockPlayerRequest::Swap(UnblockPlayerRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UnblockPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnblockPlayerRequest_descriptor_;
  metadata.reflection = UnblockPlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockedPlayerAddedNotification::kPlayerFieldNumber;
const int BlockedPlayerAddedNotification::kGameAccountIdFieldNumber;
const int BlockedPlayerAddedNotification::kAccountIdFieldNumber;
#endif  // !_MSC_VER

BlockedPlayerAddedNotification::BlockedPlayerAddedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.user_manager.BlockedPlayerAddedNotification)
}

void BlockedPlayerAddedNotification::InitAsDefaultInstance() {
  player_ = const_cast< ::Battlenet::user_manager::BlockedPlayer*>(&::Battlenet::user_manager::BlockedPlayer::default_instance());
  game_account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

BlockedPlayerAddedNotification::BlockedPlayerAddedNotification(const BlockedPlayerAddedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.user_manager.BlockedPlayerAddedNotification)
}

void BlockedPlayerAddedNotification::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  game_account_id_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockedPlayerAddedNotification::~BlockedPlayerAddedNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.user_manager.BlockedPlayerAddedNotification)
  SharedDtor();
}

void BlockedPlayerAddedNotification::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
    delete game_account_id_;
    delete account_id_;
  }
}

void BlockedPlayerAddedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockedPlayerAddedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockedPlayerAddedNotification_descriptor_;
}

const BlockedPlayerAddedNotification& BlockedPlayerAddedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  return *default_instance_;
}

BlockedPlayerAddedNotification* BlockedPlayerAddedNotification::default_instance_ = NULL;

BlockedPlayerAddedNotification* BlockedPlayerAddedNotification::New() const {
  return new BlockedPlayerAddedNotification;
}

void BlockedPlayerAddedNotification::Swap(BlockedPlayerAddedNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata BlockedPlayerAddedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockedPlayerAddedNotification_descriptor_;
  metadata.reflection = BlockedPlayerAddedNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockedPlayerRemovedNotification::kPlayerFieldNumber;
const int BlockedPlayerRemovedNotification::kGameAccountIdFieldNumber;
const int BlockedPlayerRemovedNotification::kAccountIdFieldNumber;
#endif  // !_MSC_VER

BlockedPlayerRemovedNotification::BlockedPlayerRemovedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.user_manager.BlockedPlayerRemovedNotification)
}

void BlockedPlayerRemovedNotification::InitAsDefaultInstance() {
  player_ = const_cast< ::Battlenet::user_manager::BlockedPlayer*>(&::Battlenet::user_manager::BlockedPlayer::default_instance());
  game_account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

BlockedPlayerRemovedNotification::BlockedPlayerRemovedNotification(const BlockedPlayerRemovedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.user_manager.BlockedPlayerRemovedNotification)
}

void BlockedPlayerRemovedNotification::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  game_account_id_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockedPlayerRemovedNotification::~BlockedPlayerRemovedNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.user_manager.BlockedPlayerRemovedNotification)
  SharedDtor();
}

void BlockedPlayerRemovedNotification::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
    delete game_account_id_;
    delete account_id_;
  }
}

void BlockedPlayerRemovedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockedPlayerRemovedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockedPlayerRemovedNotification_descriptor_;
}

const BlockedPlayerRemovedNotification& BlockedPlayerRemovedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  return *default_instance_;
}

BlockedPlayerRemovedNotification* BlockedPlayerRemovedNotification::default_instance_ = NULL;

BlockedPlayerRemovedNotification* BlockedPlayerRemovedNotification::New() const {
  return new BlockedPlayerRemovedNotification;
}

void BlockedPlayerRemovedNotification::Swap(BlockedPlayerRemovedNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata BlockedPlayerRemovedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockedPlayerRemovedNotification_descriptor_;
  metadata.reflection = BlockedPlayerRemovedNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecentPlayersAddedNotification::kPlayerFieldNumber;
#endif  // !_MSC_VER

RecentPlayersAddedNotification::RecentPlayersAddedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.user_manager.RecentPlayersAddedNotification)
}

void RecentPlayersAddedNotification::InitAsDefaultInstance() {
}

RecentPlayersAddedNotification::RecentPlayersAddedNotification(const RecentPlayersAddedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.user_manager.RecentPlayersAddedNotification)
}

void RecentPlayersAddedNotification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecentPlayersAddedNotification::~RecentPlayersAddedNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.user_manager.RecentPlayersAddedNotification)
  SharedDtor();
}

void RecentPlayersAddedNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecentPlayersAddedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecentPlayersAddedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecentPlayersAddedNotification_descriptor_;
}

const RecentPlayersAddedNotification& RecentPlayersAddedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  return *default_instance_;
}

RecentPlayersAddedNotification* RecentPlayersAddedNotification::default_instance_ = NULL;

RecentPlayersAddedNotification* RecentPlayersAddedNotification::New() const {
  return new RecentPlayersAddedNotification;
}

void RecentPlayersAddedNotification::Swap(RecentPlayersAddedNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata RecentPlayersAddedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecentPlayersAddedNotification_descriptor_;
  metadata.reflection = RecentPlayersAddedNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecentPlayersRemovedNotification::kPlayerFieldNumber;
#endif  // !_MSC_VER

RecentPlayersRemovedNotification::RecentPlayersRemovedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.user_manager.RecentPlayersRemovedNotification)
}

void RecentPlayersRemovedNotification::InitAsDefaultInstance() {
}

RecentPlayersRemovedNotification::RecentPlayersRemovedNotification(const RecentPlayersRemovedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.user_manager.RecentPlayersRemovedNotification)
}

void RecentPlayersRemovedNotification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecentPlayersRemovedNotification::~RecentPlayersRemovedNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.user_manager.RecentPlayersRemovedNotification)
  SharedDtor();
}

void RecentPlayersRemovedNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecentPlayersRemovedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecentPlayersRemovedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecentPlayersRemovedNotification_descriptor_;
}

const RecentPlayersRemovedNotification& RecentPlayersRemovedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  return *default_instance_;
}

RecentPlayersRemovedNotification* RecentPlayersRemovedNotification::default_instance_ = NULL;

RecentPlayersRemovedNotification* RecentPlayersRemovedNotification::New() const {
  return new RecentPlayersRemovedNotification;
}

void RecentPlayersRemovedNotification::Swap(RecentPlayersRemovedNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata RecentPlayersRemovedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecentPlayersRemovedNotification_descriptor_;
  metadata.reflection = RecentPlayersRemovedNotification_reflection_;
  return metadata;
}


// ===================================================================

UserManagerService::~UserManagerService() {}

const ::google::protobuf::ServiceDescriptor* UserManagerService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserManagerService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* UserManagerService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserManagerService_descriptor_;
}

void UserManagerService::Subscribe(::google::protobuf::RpcController* controller,
                         const ::Battlenet::user_manager::SubscribeRequest*,
                         ::Battlenet::user_manager::SubscribeResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Subscribe() not implemented.");
  done->Run();
}

void UserManagerService::AddRecentPlayers(::google::protobuf::RpcController* controller,
                         const ::Battlenet::user_manager::AddRecentPlayersRequest*,
                         ::Battlenet::user_manager::AddRecentPlayersResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddRecentPlayers() not implemented.");
  done->Run();
}

void UserManagerService::ClearRecentPlayers(::google::protobuf::RpcController* controller,
                         const ::Battlenet::user_manager::ClearRecentPlayersRequest*,
                         ::Battlenet::user_manager::ClearRecentPlayersResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClearRecentPlayers() not implemented.");
  done->Run();
}

void UserManagerService::BlockPlayer(::google::protobuf::RpcController* controller,
                         const ::Battlenet::user_manager::BlockPlayerRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BlockPlayer() not implemented.");
  done->Run();
}

void UserManagerService::UnblockPlayer(::google::protobuf::RpcController* controller,
                         const ::Battlenet::user_manager::UnblockPlayerRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UnblockPlayer() not implemented.");
  done->Run();
}

void UserManagerService::BlockPlayerForSession(::google::protobuf::RpcController* controller,
                         const ::Battlenet::user_manager::BlockPlayerRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BlockPlayerForSession() not implemented.");
  done->Run();
}

void UserManagerService::LoadBlockList(::google::protobuf::RpcController* controller,
                         const ::Battlenet::EntityId*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LoadBlockList() not implemented.");
  done->Run();
}

void UserManagerService::Unsubscribe(::google::protobuf::RpcController* controller,
                         const ::Battlenet::user_manager::UnsubscribeRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Unsubscribe() not implemented.");
  done->Run();
}

void UserManagerService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), UserManagerService_descriptor_);
  switch(method->index()) {
    case 0:
      Subscribe(controller,
             ::google::protobuf::down_cast<const ::Battlenet::user_manager::SubscribeRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::user_manager::SubscribeResponse*>(response),
             done);
      break;
    case 1:
      AddRecentPlayers(controller,
             ::google::protobuf::down_cast<const ::Battlenet::user_manager::AddRecentPlayersRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::user_manager::AddRecentPlayersResponse*>(response),
             done);
      break;
    case 2:
      ClearRecentPlayers(controller,
             ::google::protobuf::down_cast<const ::Battlenet::user_manager::ClearRecentPlayersRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::user_manager::ClearRecentPlayersResponse*>(response),
             done);
      break;
    case 3:
      BlockPlayer(controller,
             ::google::protobuf::down_cast<const ::Battlenet::user_manager::BlockPlayerRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 4:
      UnblockPlayer(controller,
             ::google::protobuf::down_cast<const ::Battlenet::user_manager::UnblockPlayerRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 5:
      BlockPlayerForSession(controller,
             ::google::protobuf::down_cast<const ::Battlenet::user_manager::BlockPlayerRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 6:
      LoadBlockList(controller,
             ::google::protobuf::down_cast<const ::Battlenet::EntityId*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 7:
      Unsubscribe(controller,
             ::google::protobuf::down_cast<const ::Battlenet::user_manager::UnsubscribeRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& UserManagerService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::user_manager::SubscribeRequest::default_instance();
    case 1:
      return ::Battlenet::user_manager::AddRecentPlayersRequest::default_instance();
    case 2:
      return ::Battlenet::user_manager::ClearRecentPlayersRequest::default_instance();
    case 3:
      return ::Battlenet::user_manager::BlockPlayerRequest::default_instance();
    case 4:
      return ::Battlenet::user_manager::UnblockPlayerRequest::default_instance();
    case 5:
      return ::Battlenet::user_manager::BlockPlayerRequest::default_instance();
    case 6:
      return ::Battlenet::EntityId::default_instance();
    case 7:
      return ::Battlenet::user_manager::UnsubscribeRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& UserManagerService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::user_manager::SubscribeResponse::default_instance();
    case 1:
      return ::Battlenet::user_manager::AddRecentPlayersResponse::default_instance();
    case 2:
      return ::Battlenet::user_manager::ClearRecentPlayersResponse::default_instance();
    case 3:
      return ::Battlenet::NoData::default_instance();
    case 4:
      return ::Battlenet::NoData::default_instance();
    case 5:
      return ::Battlenet::NoData::default_instance();
    case 6:
      return ::Battlenet::NoData::default_instance();
    case 7:
      return ::Battlenet::NoData::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

UserManagerService_Stub::UserManagerService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserManagerService_Stub::UserManagerService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
UserManagerService_Stub::~UserManagerService_Stub() {
  if (owns_channel_) delete channel_;
}

void UserManagerService_Stub::Subscribe(::google::protobuf::RpcController* controller,
                              const ::Battlenet::user_manager::SubscribeRequest* request,
                              ::Battlenet::user_manager::SubscribeResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UserManagerService_Stub::AddRecentPlayers(::google::protobuf::RpcController* controller,
                              const ::Battlenet::user_manager::AddRecentPlayersRequest* request,
                              ::Battlenet::user_manager::AddRecentPlayersResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void UserManagerService_Stub::ClearRecentPlayers(::google::protobuf::RpcController* controller,
                              const ::Battlenet::user_manager::ClearRecentPlayersRequest* request,
                              ::Battlenet::user_manager::ClearRecentPlayersResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void UserManagerService_Stub::BlockPlayer(::google::protobuf::RpcController* controller,
                              const ::Battlenet::user_manager::BlockPlayerRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void UserManagerService_Stub::UnblockPlayer(::google::protobuf::RpcController* controller,
                              const ::Battlenet::user_manager::UnblockPlayerRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void UserManagerService_Stub::BlockPlayerForSession(::google::protobuf::RpcController* controller,
                              const ::Battlenet::user_manager::BlockPlayerRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void UserManagerService_Stub::LoadBlockList(::google::protobuf::RpcController* controller,
                              const ::Battlenet::EntityId* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void UserManagerService_Stub::Unsubscribe(::google::protobuf::RpcController* controller,
                              const ::Battlenet::user_manager::UnsubscribeRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
// ===================================================================

UserManagerListener::~UserManagerListener() {}

const ::google::protobuf::ServiceDescriptor* UserManagerListener::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserManagerListener_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* UserManagerListener::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserManagerListener_descriptor_;
}

void UserManagerListener::OnBlockedPlayerAdded(::google::protobuf::RpcController* controller,
                         const ::Battlenet::user_manager::BlockedPlayerAddedNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnBlockedPlayerAdded() not implemented.");
  done->Run();
}

void UserManagerListener::OnBlockedPlayerRemoved(::google::protobuf::RpcController* controller,
                         const ::Battlenet::user_manager::BlockedPlayerRemovedNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnBlockedPlayerRemoved() not implemented.");
  done->Run();
}

void UserManagerListener::OnRecentPlayersAdded(::google::protobuf::RpcController* controller,
                         const ::Battlenet::user_manager::RecentPlayersAddedNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnRecentPlayersAdded() not implemented.");
  done->Run();
}

void UserManagerListener::OnRecentPlayersRemoved(::google::protobuf::RpcController* controller,
                         const ::Battlenet::user_manager::RecentPlayersRemovedNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnRecentPlayersRemoved() not implemented.");
  done->Run();
}

void UserManagerListener::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), UserManagerListener_descriptor_);
  switch(method->index()) {
    case 0:
      OnBlockedPlayerAdded(controller,
             ::google::protobuf::down_cast<const ::Battlenet::user_manager::BlockedPlayerAddedNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 1:
      OnBlockedPlayerRemoved(controller,
             ::google::protobuf::down_cast<const ::Battlenet::user_manager::BlockedPlayerRemovedNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 2:
      OnRecentPlayersAdded(controller,
             ::google::protobuf::down_cast<const ::Battlenet::user_manager::RecentPlayersAddedNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 3:
      OnRecentPlayersRemoved(controller,
             ::google::protobuf::down_cast<const ::Battlenet::user_manager::RecentPlayersRemovedNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& UserManagerListener::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::user_manager::BlockedPlayerAddedNotification::default_instance();
    case 1:
      return ::Battlenet::user_manager::BlockedPlayerRemovedNotification::default_instance();
    case 2:
      return ::Battlenet::user_manager::RecentPlayersAddedNotification::default_instance();
    case 3:
      return ::Battlenet::user_manager::RecentPlayersRemovedNotification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& UserManagerListener::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 1:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 2:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 3:
      return ::Battlenet::NO_RESPONSE::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

UserManagerListener_Stub::UserManagerListener_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserManagerListener_Stub::UserManagerListener_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
UserManagerListener_Stub::~UserManagerListener_Stub() {
  if (owns_channel_) delete channel_;
}

void UserManagerListener_Stub::OnBlockedPlayerAdded(::google::protobuf::RpcController* controller,
                              const ::Battlenet::user_manager::BlockedPlayerAddedNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UserManagerListener_Stub::OnBlockedPlayerRemoved(::google::protobuf::RpcController* controller,
                              const ::Battlenet::user_manager::BlockedPlayerRemovedNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void UserManagerListener_Stub::OnRecentPlayersAdded(::google::protobuf::RpcController* controller,
                              const ::Battlenet::user_manager::RecentPlayersAddedNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void UserManagerListener_Stub::OnRecentPlayersRemoved(::google::protobuf::RpcController* controller,
                              const ::Battlenet::user_manager::RecentPlayersRemovedNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace user_manager
}  // namespace Battlenet

// @@protoc_insertion_point(global_scope)
