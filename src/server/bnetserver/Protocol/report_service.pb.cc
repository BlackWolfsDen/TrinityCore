// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "report_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace report {

namespace {

const ::google::protobuf::Descriptor* Report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendReportRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendReportRequest_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* ReportService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_report_5fservice_2eproto() {
  protobuf_AddDesc_report_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "report_service.proto");
  GOOGLE_CHECK(file != NULL);
  Report_descriptor_ = file->message_type(0);
  static const int Report_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, report_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, report_qos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, reporting_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, reporting_game_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, report_timestamp_),
  };
  Report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Report_descriptor_,
      Report::default_instance_,
      Report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Report));
  SendReportRequest_descriptor_ = file->message_type(1);
  static const int SendReportRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendReportRequest, report_),
  };
  SendReportRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendReportRequest_descriptor_,
      SendReportRequest::default_instance_,
      SendReportRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendReportRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendReportRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendReportRequest));
  ReportService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_report_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Report_descriptor_, &Report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendReportRequest_descriptor_, &SendReportRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_report_5fservice_2eproto() {
  delete Report::default_instance_;
  delete Report_reflection_;
  delete SendReportRequest::default_instance_;
  delete SendReportRequest_reflection_;
}

void protobuf_AddDesc_report_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Battlenet::protobuf_AddDesc_attribute_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_entity_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024report_service.proto\022\020Battlenet.report"
    "\032\025attribute_types.proto\032\022entity_types.pr"
    "oto\032\017rpc_types.proto\"\334\001\n\006Report\022\023\n\013repor"
    "t_type\030\001 \002(\t\022\'\n\tattribute\030\002 \003(\0132\024.Battle"
    "net.Attribute\022\025\n\nreport_qos\030\003 \001(\005:\0010\022.\n\021"
    "reporting_account\030\004 \001(\0132\023.Battlenet.Enti"
    "tyId\0223\n\026reporting_game_account\030\005 \001(\0132\023.B"
    "attlenet.EntityId\022\030\n\020report_timestamp\030\006 "
    "\001(\006\"=\n\021SendReportRequest\022(\n\006report\030\001 \002(\013"
    "2\030.Battlenet.report.Report2\202\001\n\rReportSer"
    "vice\022J\n\nSendReport\022#.Battlenet.report.Se"
    "ndReportRequest\032\021.Battlenet.NoData\"\004\200\265\030\001"
    "\032%\312>\"bnet.protocol.report.ReportServiceB"
    "\005H\002\200\001\001", 526);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "report_service.proto", &protobuf_RegisterTypes);
  Report::default_instance_ = new Report();
  SendReportRequest::default_instance_ = new SendReportRequest();
  Report::default_instance_->InitAsDefaultInstance();
  SendReportRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_report_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_report_5fservice_2eproto {
  StaticDescriptorInitializer_report_5fservice_2eproto() {
    protobuf_AddDesc_report_5fservice_2eproto();
  }
} static_descriptor_initializer_report_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Report::kReportTypeFieldNumber;
const int Report::kAttributeFieldNumber;
const int Report::kReportQosFieldNumber;
const int Report::kReportingAccountFieldNumber;
const int Report::kReportingGameAccountFieldNumber;
const int Report::kReportTimestampFieldNumber;
#endif  // !_MSC_VER

Report::Report()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.report.Report)
}

void Report::InitAsDefaultInstance() {
  reporting_account_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  reporting_game_account_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

Report::Report(const Report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.report.Report)
}

void Report::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  report_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  report_qos_ = 0;
  reporting_account_ = NULL;
  reporting_game_account_ = NULL;
  report_timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Report::~Report() {
  // @@protoc_insertion_point(destructor:Battlenet.report.Report)
  SharedDtor();
}

void Report::SharedDtor() {
  if (report_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete report_type_;
  }
  if (this != default_instance_) {
    delete reporting_account_;
    delete reporting_game_account_;
  }
}

void Report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_descriptor_;
}

const Report& Report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_5fservice_2eproto();
  return *default_instance_;
}

Report* Report::default_instance_ = NULL;

Report* Report::New() const {
  return new Report;
}

void Report::Swap(Report* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_descriptor_;
  metadata.reflection = Report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendReportRequest::kReportFieldNumber;
#endif  // !_MSC_VER

SendReportRequest::SendReportRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.report.SendReportRequest)
}

void SendReportRequest::InitAsDefaultInstance() {
  report_ = const_cast< ::Battlenet::report::Report*>(&::Battlenet::report::Report::default_instance());
}

SendReportRequest::SendReportRequest(const SendReportRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.report.SendReportRequest)
}

void SendReportRequest::SharedCtor() {
  _cached_size_ = 0;
  report_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendReportRequest::~SendReportRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.report.SendReportRequest)
  SharedDtor();
}

void SendReportRequest::SharedDtor() {
  if (this != default_instance_) {
    delete report_;
  }
}

void SendReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendReportRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendReportRequest_descriptor_;
}

const SendReportRequest& SendReportRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_5fservice_2eproto();
  return *default_instance_;
}

SendReportRequest* SendReportRequest::default_instance_ = NULL;

SendReportRequest* SendReportRequest::New() const {
  return new SendReportRequest;
}

void SendReportRequest::Swap(SendReportRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SendReportRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendReportRequest_descriptor_;
  metadata.reflection = SendReportRequest_reflection_;
  return metadata;
}


// ===================================================================

ReportService::~ReportService() {}

const ::google::protobuf::ServiceDescriptor* ReportService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ReportService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportService_descriptor_;
}

void ReportService::SendReport(::google::protobuf::RpcController* controller,
                         const ::Battlenet::report::SendReportRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendReport() not implemented.");
  done->Run();
}

void ReportService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ReportService_descriptor_);
  switch(method->index()) {
    case 0:
      SendReport(controller,
             ::google::protobuf::down_cast<const ::Battlenet::report::SendReportRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ReportService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::report::SendReportRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ReportService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::NoData::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ReportService_Stub::ReportService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ReportService_Stub::ReportService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ReportService_Stub::~ReportService_Stub() {
  if (owns_channel_) delete channel_;
}

void ReportService_Stub::SendReport(::google::protobuf::RpcController* controller,
                              const ::Battlenet::report::SendReportRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace report
}  // namespace Battlenet

// @@protoc_insertion_point(global_scope)
