// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resource_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "resource_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace resources {

namespace {

const ::google::protobuf::Descriptor* ContentHandleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentHandleRequest_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* ResourcesService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_resource_5fservice_2eproto() {
  protobuf_AddDesc_resource_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "resource_service.proto");
  GOOGLE_CHECK(file != NULL);
  ContentHandleRequest_descriptor_ = file->message_type(0);
  static const int ContentHandleRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentHandleRequest, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentHandleRequest, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentHandleRequest, version_),
  };
  ContentHandleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContentHandleRequest_descriptor_,
      ContentHandleRequest::default_instance_,
      ContentHandleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentHandleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentHandleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContentHandleRequest));
  ResourcesService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_resource_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContentHandleRequest_descriptor_, &ContentHandleRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_resource_5fservice_2eproto() {
  delete ContentHandleRequest::default_instance_;
  delete ContentHandleRequest_reflection_;
}

void protobuf_AddDesc_resource_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Battlenet::protobuf_AddDesc_content_5fhandle_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026resource_service.proto\022\023Battlenet.reso"
    "urces\032\032content_handle_types.proto\032\017rpc_t"
    "ypes.proto\"T\n\024ContentHandleRequest\022\017\n\007pr"
    "ogram\030\001 \002(\007\022\016\n\006stream\030\002 \002(\007\022\033\n\007version\030\003"
    " \001(\007:\n17017296192\227\001\n\020ResourcesService\022]\n"
    "\020GetContentHandle\022).Battlenet.resources."
    "ContentHandleRequest\032\030.Battlenet.Content"
    "Handle\"\004\200\265\030\001\032$\312>!bnet.protocol.resources"
    ".ResourcesB\005H\002\200\001\001", 337);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "resource_service.proto", &protobuf_RegisterTypes);
  ContentHandleRequest::default_instance_ = new ContentHandleRequest();
  ContentHandleRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_resource_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_resource_5fservice_2eproto {
  StaticDescriptorInitializer_resource_5fservice_2eproto() {
    protobuf_AddDesc_resource_5fservice_2eproto();
  }
} static_descriptor_initializer_resource_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ContentHandleRequest::kProgramFieldNumber;
const int ContentHandleRequest::kStreamFieldNumber;
const int ContentHandleRequest::kVersionFieldNumber;
#endif  // !_MSC_VER

ContentHandleRequest::ContentHandleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.resources.ContentHandleRequest)
}

void ContentHandleRequest::InitAsDefaultInstance() {
}

ContentHandleRequest::ContentHandleRequest(const ContentHandleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.resources.ContentHandleRequest)
}

void ContentHandleRequest::SharedCtor() {
  _cached_size_ = 0;
  program_ = 0u;
  stream_ = 0u;
  version_ = 1701729619u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentHandleRequest::~ContentHandleRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.resources.ContentHandleRequest)
  SharedDtor();
}

void ContentHandleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContentHandleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentHandleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentHandleRequest_descriptor_;
}

const ContentHandleRequest& ContentHandleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resource_5fservice_2eproto();
  return *default_instance_;
}

ContentHandleRequest* ContentHandleRequest::default_instance_ = NULL;

ContentHandleRequest* ContentHandleRequest::New() const {
  return new ContentHandleRequest;
}

void ContentHandleRequest::Swap(ContentHandleRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ContentHandleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentHandleRequest_descriptor_;
  metadata.reflection = ContentHandleRequest_reflection_;
  return metadata;
}


// ===================================================================

ResourcesService::~ResourcesService() {}

const ::google::protobuf::ServiceDescriptor* ResourcesService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourcesService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ResourcesService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourcesService_descriptor_;
}

void ResourcesService::GetContentHandle(::google::protobuf::RpcController* controller,
                         const ::Battlenet::resources::ContentHandleRequest*,
                         ::Battlenet::ContentHandle*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetContentHandle() not implemented.");
  done->Run();
}

void ResourcesService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ResourcesService_descriptor_);
  switch(method->index()) {
    case 0:
      GetContentHandle(controller,
             ::google::protobuf::down_cast<const ::Battlenet::resources::ContentHandleRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::ContentHandle*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ResourcesService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::resources::ContentHandleRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ResourcesService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::ContentHandle::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ResourcesService_Stub::ResourcesService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ResourcesService_Stub::ResourcesService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ResourcesService_Stub::~ResourcesService_Stub() {
  if (owns_channel_) delete channel_;
}

void ResourcesService_Stub::GetContentHandle(::google::protobuf::RpcController* controller,
                              const ::Battlenet::resources::ContentHandleRequest* request,
                              ::Battlenet::ContentHandle* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace resources
}  // namespace Battlenet

// @@protoc_insertion_point(global_scope)
