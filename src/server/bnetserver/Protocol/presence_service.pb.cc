// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: presence_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "presence_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace presence {

namespace {

const ::google::protobuf::Descriptor* SubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeNotificationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeNotificationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OwnershipRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OwnershipRequest_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* PresenceService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_presence_5fservice_2eproto() {
  protobuf_AddDesc_presence_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "presence_service.proto");
  GOOGLE_CHECK(file != NULL);
  SubscribeRequest_descriptor_ = file->message_type(0);
  static const int SubscribeRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, flag_public_),
  };
  SubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeRequest_descriptor_,
      SubscribeRequest::default_instance_,
      SubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeRequest));
  SubscribeNotificationRequest_descriptor_ = file->message_type(1);
  static const int SubscribeNotificationRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotificationRequest, entity_id_),
  };
  SubscribeNotificationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeNotificationRequest_descriptor_,
      SubscribeNotificationRequest::default_instance_,
      SubscribeNotificationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotificationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotificationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeNotificationRequest));
  UnsubscribeRequest_descriptor_ = file->message_type(2);
  static const int UnsubscribeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, object_id_),
  };
  UnsubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsubscribeRequest_descriptor_,
      UnsubscribeRequest::default_instance_,
      UnsubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsubscribeRequest));
  UpdateRequest_descriptor_ = file->message_type(3);
  static const int UpdateRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, field_operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, no_create_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, agent_id_),
  };
  UpdateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateRequest_descriptor_,
      UpdateRequest::default_instance_,
      UpdateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateRequest));
  QueryRequest_descriptor_ = file->message_type(4);
  static const int QueryRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, agent_id_),
  };
  QueryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryRequest_descriptor_,
      QueryRequest::default_instance_,
      QueryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryRequest));
  QueryResponse_descriptor_ = file->message_type(5);
  static const int QueryResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, field_),
  };
  QueryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResponse_descriptor_,
      QueryResponse::default_instance_,
      QueryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResponse));
  OwnershipRequest_descriptor_ = file->message_type(6);
  static const int OwnershipRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnershipRequest, entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnershipRequest, release_ownership_),
  };
  OwnershipRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OwnershipRequest_descriptor_,
      OwnershipRequest::default_instance_,
      OwnershipRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnershipRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnershipRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OwnershipRequest));
  PresenceService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_presence_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeRequest_descriptor_, &SubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeNotificationRequest_descriptor_, &SubscribeNotificationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsubscribeRequest_descriptor_, &UnsubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateRequest_descriptor_, &UpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryRequest_descriptor_, &QueryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResponse_descriptor_, &QueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OwnershipRequest_descriptor_, &OwnershipRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_presence_5fservice_2eproto() {
  delete SubscribeRequest::default_instance_;
  delete SubscribeRequest_reflection_;
  delete SubscribeNotificationRequest::default_instance_;
  delete SubscribeNotificationRequest_reflection_;
  delete UnsubscribeRequest::default_instance_;
  delete UnsubscribeRequest_reflection_;
  delete UpdateRequest::default_instance_;
  delete UpdateRequest_reflection_;
  delete QueryRequest::default_instance_;
  delete QueryRequest_reflection_;
  delete QueryResponse::default_instance_;
  delete QueryResponse_reflection_;
  delete OwnershipRequest::default_instance_;
  delete OwnershipRequest_reflection_;
}

void protobuf_AddDesc_presence_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Battlenet::protobuf_AddDesc_entity_5ftypes_2eproto();
  ::Battlenet::presence::protobuf_AddDesc_presence_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026presence_service.proto\022\022Battlenet.pres"
    "ence\032\022entity_types.proto\032\024presence_types"
    ".proto\032\017rpc_types.proto\"\244\001\n\020SubscribeReq"
    "uest\022%\n\010agent_id\030\001 \001(\0132\023.Battlenet.Entit"
    "yId\022&\n\tentity_id\030\002 \002(\0132\023.Battlenet.Entit"
    "yId\022\021\n\tobject_id\030\003 \002(\004\022\017\n\007program\030\004 \003(\007\022"
    "\035\n\013flag_public\030\005 \001(\010:\004trueB\002\030\001\"F\n\034Subscr"
    "ibeNotificationRequest\022&\n\tentity_id\030\001 \002("
    "\0132\023.Battlenet.EntityId\"v\n\022UnsubscribeReq"
    "uest\022%\n\010agent_id\030\001 \001(\0132\023.Battlenet.Entit"
    "yId\022&\n\tentity_id\030\002 \002(\0132\023.Battlenet.Entit"
    "yId\022\021\n\tobject_id\030\003 \001(\004\"\265\001\n\rUpdateRequest"
    "\022&\n\tentity_id\030\001 \002(\0132\023.Battlenet.EntityId"
    "\022;\n\017field_operation\030\002 \003(\0132\".Battlenet.pr"
    "esence.FieldOperation\022\030\n\tno_create\030\003 \001(\010"
    ":\005false\022%\n\010agent_id\030\004 \001(\0132\023.Battlenet.En"
    "tityId\"\210\001\n\014QueryRequest\022&\n\tentity_id\030\001 \002"
    "(\0132\023.Battlenet.EntityId\022)\n\003key\030\002 \003(\0132\034.B"
    "attlenet.presence.FieldKey\022%\n\010agent_id\030\003"
    " \001(\0132\023.Battlenet.EntityId\"9\n\rQueryRespon"
    "se\022(\n\005field\030\002 \003(\0132\031.Battlenet.presence.F"
    "ield\"\\\n\020OwnershipRequest\022&\n\tentity_id\030\001 "
    "\002(\0132\023.Battlenet.EntityId\022 \n\021release_owne"
    "rship\030\002 \001(\010:\005false2\242\004\n\017PresenceService\022J"
    "\n\tSubscribe\022$.Battlenet.presence.Subscri"
    "beRequest\032\021.Battlenet.NoData\"\004\200\265\030\001\022N\n\013Un"
    "subscribe\022&.Battlenet.presence.Unsubscri"
    "beRequest\032\021.Battlenet.NoData\"\004\200\265\030\002\022D\n\006Up"
    "date\022!.Battlenet.presence.UpdateRequest\032"
    "\021.Battlenet.NoData\"\004\200\265\030\003\022R\n\005Query\022 .Batt"
    "lenet.presence.QueryRequest\032!.Battlenet."
    "presence.QueryResponse\"\004\200\265\030\004\022J\n\tOwnershi"
    "p\022$.Battlenet.presence.OwnershipRequest\032"
    "\021.Battlenet.NoData\"\004\200\265\030\005\022b\n\025SubscribeNot"
    "ification\0220.Battlenet.presence.Subscribe"
    "NotificationRequest\032\021.Battlenet.NoData\"\004"
    "\200\265\030\007\032)\312>&bnet.protocol.presence.Presence"
    "ServiceB\005H\002\200\001\001", 1494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "presence_service.proto", &protobuf_RegisterTypes);
  SubscribeRequest::default_instance_ = new SubscribeRequest();
  SubscribeNotificationRequest::default_instance_ = new SubscribeNotificationRequest();
  UnsubscribeRequest::default_instance_ = new UnsubscribeRequest();
  UpdateRequest::default_instance_ = new UpdateRequest();
  QueryRequest::default_instance_ = new QueryRequest();
  QueryResponse::default_instance_ = new QueryResponse();
  OwnershipRequest::default_instance_ = new OwnershipRequest();
  SubscribeRequest::default_instance_->InitAsDefaultInstance();
  SubscribeNotificationRequest::default_instance_->InitAsDefaultInstance();
  UnsubscribeRequest::default_instance_->InitAsDefaultInstance();
  UpdateRequest::default_instance_->InitAsDefaultInstance();
  QueryRequest::default_instance_->InitAsDefaultInstance();
  QueryResponse::default_instance_->InitAsDefaultInstance();
  OwnershipRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_presence_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_presence_5fservice_2eproto {
  StaticDescriptorInitializer_presence_5fservice_2eproto() {
    protobuf_AddDesc_presence_5fservice_2eproto();
  }
} static_descriptor_initializer_presence_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SubscribeRequest::kAgentIdFieldNumber;
const int SubscribeRequest::kEntityIdFieldNumber;
const int SubscribeRequest::kObjectIdFieldNumber;
const int SubscribeRequest::kProgramFieldNumber;
const int SubscribeRequest::kFlagPublicFieldNumber;
#endif  // !_MSC_VER

SubscribeRequest::SubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.presence.SubscribeRequest)
}

void SubscribeRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  entity_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.presence.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  entity_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  flag_public_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.presence.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete entity_id_;
  }
}

void SubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRequest_descriptor_;
}

const SubscribeRequest& SubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_5fservice_2eproto();
  return *default_instance_;
}

SubscribeRequest* SubscribeRequest::default_instance_ = NULL;

SubscribeRequest* SubscribeRequest::New() const {
  return new SubscribeRequest;
}

void SubscribeRequest::Swap(SubscribeRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeRequest_descriptor_;
  metadata.reflection = SubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeNotificationRequest::kEntityIdFieldNumber;
#endif  // !_MSC_VER

SubscribeNotificationRequest::SubscribeNotificationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.presence.SubscribeNotificationRequest)
}

void SubscribeNotificationRequest::InitAsDefaultInstance() {
  entity_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

SubscribeNotificationRequest::SubscribeNotificationRequest(const SubscribeNotificationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.presence.SubscribeNotificationRequest)
}

void SubscribeNotificationRequest::SharedCtor() {
  _cached_size_ = 0;
  entity_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeNotificationRequest::~SubscribeNotificationRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.presence.SubscribeNotificationRequest)
  SharedDtor();
}

void SubscribeNotificationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete entity_id_;
  }
}

void SubscribeNotificationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeNotificationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeNotificationRequest_descriptor_;
}

const SubscribeNotificationRequest& SubscribeNotificationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_5fservice_2eproto();
  return *default_instance_;
}

SubscribeNotificationRequest* SubscribeNotificationRequest::default_instance_ = NULL;

SubscribeNotificationRequest* SubscribeNotificationRequest::New() const {
  return new SubscribeNotificationRequest;
}

void SubscribeNotificationRequest::Swap(SubscribeNotificationRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SubscribeNotificationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeNotificationRequest_descriptor_;
  metadata.reflection = SubscribeNotificationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsubscribeRequest::kAgentIdFieldNumber;
const int UnsubscribeRequest::kEntityIdFieldNumber;
const int UnsubscribeRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

UnsubscribeRequest::UnsubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.presence.UnsubscribeRequest)
}

void UnsubscribeRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  entity_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.presence.UnsubscribeRequest)
}

void UnsubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  entity_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsubscribeRequest::~UnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.presence.UnsubscribeRequest)
  SharedDtor();
}

void UnsubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete entity_id_;
  }
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsubscribeRequest_descriptor_;
}

const UnsubscribeRequest& UnsubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_5fservice_2eproto();
  return *default_instance_;
}

UnsubscribeRequest* UnsubscribeRequest::default_instance_ = NULL;

UnsubscribeRequest* UnsubscribeRequest::New() const {
  return new UnsubscribeRequest;
}

void UnsubscribeRequest::Swap(UnsubscribeRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UnsubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsubscribeRequest_descriptor_;
  metadata.reflection = UnsubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateRequest::kEntityIdFieldNumber;
const int UpdateRequest::kFieldOperationFieldNumber;
const int UpdateRequest::kNoCreateFieldNumber;
const int UpdateRequest::kAgentIdFieldNumber;
#endif  // !_MSC_VER

UpdateRequest::UpdateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.presence.UpdateRequest)
}

void UpdateRequest::InitAsDefaultInstance() {
  entity_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

UpdateRequest::UpdateRequest(const UpdateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.presence.UpdateRequest)
}

void UpdateRequest::SharedCtor() {
  _cached_size_ = 0;
  entity_id_ = NULL;
  no_create_ = false;
  agent_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRequest::~UpdateRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.presence.UpdateRequest)
  SharedDtor();
}

void UpdateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete entity_id_;
    delete agent_id_;
  }
}

void UpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRequest_descriptor_;
}

const UpdateRequest& UpdateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_5fservice_2eproto();
  return *default_instance_;
}

UpdateRequest* UpdateRequest::default_instance_ = NULL;

UpdateRequest* UpdateRequest::New() const {
  return new UpdateRequest;
}

void UpdateRequest::Swap(UpdateRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UpdateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRequest_descriptor_;
  metadata.reflection = UpdateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryRequest::kEntityIdFieldNumber;
const int QueryRequest::kKeyFieldNumber;
const int QueryRequest::kAgentIdFieldNumber;
#endif  // !_MSC_VER

QueryRequest::QueryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.presence.QueryRequest)
}

void QueryRequest::InitAsDefaultInstance() {
  entity_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

QueryRequest::QueryRequest(const QueryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.presence.QueryRequest)
}

void QueryRequest::SharedCtor() {
  _cached_size_ = 0;
  entity_id_ = NULL;
  agent_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.presence.QueryRequest)
  SharedDtor();
}

void QueryRequest::SharedDtor() {
  if (this != default_instance_) {
    delete entity_id_;
    delete agent_id_;
  }
}

void QueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryRequest_descriptor_;
}

const QueryRequest& QueryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_5fservice_2eproto();
  return *default_instance_;
}

QueryRequest* QueryRequest::default_instance_ = NULL;

QueryRequest* QueryRequest::New() const {
  return new QueryRequest;
}

void QueryRequest::Swap(QueryRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata QueryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryRequest_descriptor_;
  metadata.reflection = QueryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryResponse::kFieldFieldNumber;
#endif  // !_MSC_VER

QueryResponse::QueryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.presence.QueryResponse)
}

void QueryResponse::InitAsDefaultInstance() {
}

QueryResponse::QueryResponse(const QueryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.presence.QueryResponse)
}

void QueryResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResponse::~QueryResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.presence.QueryResponse)
  SharedDtor();
}

void QueryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResponse_descriptor_;
}

const QueryResponse& QueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_5fservice_2eproto();
  return *default_instance_;
}

QueryResponse* QueryResponse::default_instance_ = NULL;

QueryResponse* QueryResponse::New() const {
  return new QueryResponse;
}

void QueryResponse::Swap(QueryResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata QueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResponse_descriptor_;
  metadata.reflection = QueryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OwnershipRequest::kEntityIdFieldNumber;
const int OwnershipRequest::kReleaseOwnershipFieldNumber;
#endif  // !_MSC_VER

OwnershipRequest::OwnershipRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.presence.OwnershipRequest)
}

void OwnershipRequest::InitAsDefaultInstance() {
  entity_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

OwnershipRequest::OwnershipRequest(const OwnershipRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.presence.OwnershipRequest)
}

void OwnershipRequest::SharedCtor() {
  _cached_size_ = 0;
  entity_id_ = NULL;
  release_ownership_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OwnershipRequest::~OwnershipRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.presence.OwnershipRequest)
  SharedDtor();
}

void OwnershipRequest::SharedDtor() {
  if (this != default_instance_) {
    delete entity_id_;
  }
}

void OwnershipRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OwnershipRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnershipRequest_descriptor_;
}

const OwnershipRequest& OwnershipRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_5fservice_2eproto();
  return *default_instance_;
}

OwnershipRequest* OwnershipRequest::default_instance_ = NULL;

OwnershipRequest* OwnershipRequest::New() const {
  return new OwnershipRequest;
}

void OwnershipRequest::Swap(OwnershipRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata OwnershipRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OwnershipRequest_descriptor_;
  metadata.reflection = OwnershipRequest_reflection_;
  return metadata;
}


// ===================================================================

PresenceService::~PresenceService() {}

const ::google::protobuf::ServiceDescriptor* PresenceService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PresenceService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* PresenceService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return PresenceService_descriptor_;
}

void PresenceService::Subscribe(::google::protobuf::RpcController* controller,
                         const ::Battlenet::presence::SubscribeRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Subscribe() not implemented.");
  done->Run();
}

void PresenceService::Unsubscribe(::google::protobuf::RpcController* controller,
                         const ::Battlenet::presence::UnsubscribeRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Unsubscribe() not implemented.");
  done->Run();
}

void PresenceService::Update(::google::protobuf::RpcController* controller,
                         const ::Battlenet::presence::UpdateRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Update() not implemented.");
  done->Run();
}

void PresenceService::Query(::google::protobuf::RpcController* controller,
                         const ::Battlenet::presence::QueryRequest*,
                         ::Battlenet::presence::QueryResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Query() not implemented.");
  done->Run();
}

void PresenceService::Ownership(::google::protobuf::RpcController* controller,
                         const ::Battlenet::presence::OwnershipRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Ownership() not implemented.");
  done->Run();
}

void PresenceService::SubscribeNotification(::google::protobuf::RpcController* controller,
                         const ::Battlenet::presence::SubscribeNotificationRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SubscribeNotification() not implemented.");
  done->Run();
}

void PresenceService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), PresenceService_descriptor_);
  switch(method->index()) {
    case 0:
      Subscribe(controller,
             ::google::protobuf::down_cast<const ::Battlenet::presence::SubscribeRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 1:
      Unsubscribe(controller,
             ::google::protobuf::down_cast<const ::Battlenet::presence::UnsubscribeRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 2:
      Update(controller,
             ::google::protobuf::down_cast<const ::Battlenet::presence::UpdateRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 3:
      Query(controller,
             ::google::protobuf::down_cast<const ::Battlenet::presence::QueryRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::presence::QueryResponse*>(response),
             done);
      break;
    case 4:
      Ownership(controller,
             ::google::protobuf::down_cast<const ::Battlenet::presence::OwnershipRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 5:
      SubscribeNotification(controller,
             ::google::protobuf::down_cast<const ::Battlenet::presence::SubscribeNotificationRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PresenceService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::presence::SubscribeRequest::default_instance();
    case 1:
      return ::Battlenet::presence::UnsubscribeRequest::default_instance();
    case 2:
      return ::Battlenet::presence::UpdateRequest::default_instance();
    case 3:
      return ::Battlenet::presence::QueryRequest::default_instance();
    case 4:
      return ::Battlenet::presence::OwnershipRequest::default_instance();
    case 5:
      return ::Battlenet::presence::SubscribeNotificationRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& PresenceService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::NoData::default_instance();
    case 1:
      return ::Battlenet::NoData::default_instance();
    case 2:
      return ::Battlenet::NoData::default_instance();
    case 3:
      return ::Battlenet::presence::QueryResponse::default_instance();
    case 4:
      return ::Battlenet::NoData::default_instance();
    case 5:
      return ::Battlenet::NoData::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

PresenceService_Stub::PresenceService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PresenceService_Stub::PresenceService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PresenceService_Stub::~PresenceService_Stub() {
  if (owns_channel_) delete channel_;
}

void PresenceService_Stub::Subscribe(::google::protobuf::RpcController* controller,
                              const ::Battlenet::presence::SubscribeRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void PresenceService_Stub::Unsubscribe(::google::protobuf::RpcController* controller,
                              const ::Battlenet::presence::UnsubscribeRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void PresenceService_Stub::Update(::google::protobuf::RpcController* controller,
                              const ::Battlenet::presence::UpdateRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void PresenceService_Stub::Query(::google::protobuf::RpcController* controller,
                              const ::Battlenet::presence::QueryRequest* request,
                              ::Battlenet::presence::QueryResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void PresenceService_Stub::Ownership(::google::protobuf::RpcController* controller,
                              const ::Battlenet::presence::OwnershipRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void PresenceService_Stub::SubscribeNotification(::google::protobuf::RpcController* controller,
                              const ::Battlenet::presence::SubscribeNotificationRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace presence
}  // namespace Battlenet

// @@protoc_insertion_point(global_scope)
