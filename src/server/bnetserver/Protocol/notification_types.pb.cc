// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "notification_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace notification {

namespace {

const ::google::protobuf::Descriptor* Target_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Target_reflection_ = NULL;
const ::google::protobuf::Descriptor* Subscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subscription_reflection_ = NULL;
const ::google::protobuf::Descriptor* Notification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Notification_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_notification_5ftypes_2eproto() {
  protobuf_AddDesc_notification_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "notification_types.proto");
  GOOGLE_CHECK(file != NULL);
  Target_descriptor_ = file->message_type(0);
  static const int Target_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, type_),
  };
  Target_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Target_descriptor_,
      Target::default_instance_,
      Target_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Target));
  Subscription_descriptor_ = file->message_type(1);
  static const int Subscription_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, subscriber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, delivery_required_),
  };
  Subscription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Subscription_descriptor_,
      Subscription::default_instance_,
      Subscription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Subscription));
  Notification_descriptor_ = file->message_type(2);
  static const int Notification_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, sender_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, target_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, sender_battle_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, target_battle_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, forwarding_identity_),
  };
  Notification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Notification_descriptor_,
      Notification::default_instance_,
      Notification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Notification));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_notification_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Target_descriptor_, &Target::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Subscription_descriptor_, &Subscription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Notification_descriptor_, &Notification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_notification_5ftypes_2eproto() {
  delete Target::default_instance_;
  delete Target_reflection_;
  delete Subscription::default_instance_;
  delete Subscription_reflection_;
  delete Notification::default_instance_;
  delete Notification_reflection_;
}

void protobuf_AddDesc_notification_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Battlenet::account::protobuf_AddDesc_account_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_attribute_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_entity_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030notification_types.proto\022\026Battlenet.no"
    "tification\032\023account_types.proto\032\025attribu"
    "te_types.proto\032\022entity_types.proto\032\017rpc_"
    "types.proto\"E\n\006Target\022-\n\010identity\030\001 \001(\0132"
    "\033.Battlenet.account.Identity\022\014\n\004type\030\002 \001"
    "(\t\"\221\001\n\014Subscription\022.\n\006target\030\001 \003(\0132\036.Ba"
    "ttlenet.notification.Target\022/\n\nsubscribe"
    "r\030\002 \001(\0132\033.Battlenet.account.Identity\022 \n\021"
    "delivery_required\030\003 \001(\010:\005false\"\211\003\n\014Notif"
    "ication\022&\n\tsender_id\030\001 \001(\0132\023.Battlenet.E"
    "ntityId\022&\n\ttarget_id\030\002 \002(\0132\023.Battlenet.E"
    "ntityId\022\014\n\004type\030\003 \002(\t\022\'\n\tattribute\030\004 \003(\013"
    "2\024.Battlenet.Attribute\022.\n\021sender_account"
    "_id\030\005 \001(\0132\023.Battlenet.EntityId\022.\n\021target"
    "_account_id\030\006 \001(\0132\023.Battlenet.EntityId\022\031"
    "\n\021sender_battle_tag\030\007 \001(\t\022\031\n\021target_batt"
    "le_tag\030\010 \001(\t\022\"\n\004peer\030\t \001(\0132\024.Battlenet.P"
    "rocessId\0228\n\023forwarding_identity\030\n \001(\0132\033."
    "Battlenet.account.IdentityB\002H\002", 750);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "notification_types.proto", &protobuf_RegisterTypes);
  Target::default_instance_ = new Target();
  Subscription::default_instance_ = new Subscription();
  Notification::default_instance_ = new Notification();
  Target::default_instance_->InitAsDefaultInstance();
  Subscription::default_instance_->InitAsDefaultInstance();
  Notification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_notification_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_notification_5ftypes_2eproto {
  StaticDescriptorInitializer_notification_5ftypes_2eproto() {
    protobuf_AddDesc_notification_5ftypes_2eproto();
  }
} static_descriptor_initializer_notification_5ftypes_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Target::kIdentityFieldNumber;
const int Target::kTypeFieldNumber;
#endif  // !_MSC_VER

Target::Target()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.notification.Target)
}

void Target::InitAsDefaultInstance() {
  identity_ = const_cast< ::Battlenet::account::Identity*>(&::Battlenet::account::Identity::default_instance());
}

Target::Target(const Target& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.notification.Target)
}

void Target::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identity_ = NULL;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Target::~Target() {
  // @@protoc_insertion_point(destructor:Battlenet.notification.Target)
  SharedDtor();
}

void Target::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete identity_;
  }
}

void Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Target::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Target_descriptor_;
}

const Target& Target::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_notification_5ftypes_2eproto();
  return *default_instance_;
}

Target* Target::default_instance_ = NULL;

Target* Target::New() const {
  return new Target;
}

void Target::Swap(Target* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Target::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Target_descriptor_;
  metadata.reflection = Target_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Subscription::kTargetFieldNumber;
const int Subscription::kSubscriberFieldNumber;
const int Subscription::kDeliveryRequiredFieldNumber;
#endif  // !_MSC_VER

Subscription::Subscription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.notification.Subscription)
}

void Subscription::InitAsDefaultInstance() {
  subscriber_ = const_cast< ::Battlenet::account::Identity*>(&::Battlenet::account::Identity::default_instance());
}

Subscription::Subscription(const Subscription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.notification.Subscription)
}

void Subscription::SharedCtor() {
  _cached_size_ = 0;
  subscriber_ = NULL;
  delivery_required_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:Battlenet.notification.Subscription)
  SharedDtor();
}

void Subscription::SharedDtor() {
  if (this != default_instance_) {
    delete subscriber_;
  }
}

void Subscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subscription_descriptor_;
}

const Subscription& Subscription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_notification_5ftypes_2eproto();
  return *default_instance_;
}

Subscription* Subscription::default_instance_ = NULL;

Subscription* Subscription::New() const {
  return new Subscription;
}

void Subscription::Swap(Subscription* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Subscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subscription_descriptor_;
  metadata.reflection = Subscription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Notification::kSenderIdFieldNumber;
const int Notification::kTargetIdFieldNumber;
const int Notification::kTypeFieldNumber;
const int Notification::kAttributeFieldNumber;
const int Notification::kSenderAccountIdFieldNumber;
const int Notification::kTargetAccountIdFieldNumber;
const int Notification::kSenderBattleTagFieldNumber;
const int Notification::kTargetBattleTagFieldNumber;
const int Notification::kPeerFieldNumber;
const int Notification::kForwardingIdentityFieldNumber;
#endif  // !_MSC_VER

Notification::Notification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.notification.Notification)
}

void Notification::InitAsDefaultInstance() {
  sender_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  target_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  sender_account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  target_account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  peer_ = const_cast< ::Battlenet::ProcessId*>(&::Battlenet::ProcessId::default_instance());
  forwarding_identity_ = const_cast< ::Battlenet::account::Identity*>(&::Battlenet::account::Identity::default_instance());
}

Notification::Notification(const Notification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.notification.Notification)
}

void Notification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sender_id_ = NULL;
  target_id_ = NULL;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_account_id_ = NULL;
  target_account_id_ = NULL;
  sender_battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_ = NULL;
  forwarding_identity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:Battlenet.notification.Notification)
  SharedDtor();
}

void Notification::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (sender_battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_battle_tag_;
  }
  if (target_battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_battle_tag_;
  }
  if (this != default_instance_) {
    delete sender_id_;
    delete target_id_;
    delete sender_account_id_;
    delete target_account_id_;
    delete peer_;
    delete forwarding_identity_;
  }
}

void Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notification_descriptor_;
}

const Notification& Notification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_notification_5ftypes_2eproto();
  return *default_instance_;
}

Notification* Notification::default_instance_ = NULL;

Notification* Notification::New() const {
  return new Notification;
}

void Notification::Swap(Notification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Notification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Notification_descriptor_;
  metadata.reflection = Notification_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace notification
}  // namespace Battlenet

// @@protoc_insertion_point(global_scope)
