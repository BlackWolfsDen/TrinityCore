// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_manager_service.proto

#ifndef PROTOBUF_user_5fmanager_5fservice_2eproto__INCLUDED
#define PROTOBUF_user_5fmanager_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "user_manager_types.pb.h"
#include "entity_types.pb.h"
#include "role_types.pb.h"
#include "rpc_types.pb.h"
#include "ServiceBase.h"
#include "Session.h"
#include "MessageBuffer.h"
#include <type_traits>
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace user_manager {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

class SubscribeRequest;
class SubscribeResponse;
class UnsubscribeRequest;
class AddRecentPlayersRequest;
class AddRecentPlayersResponse;
class ClearRecentPlayersRequest;
class ClearRecentPlayersResponse;
class BlockPlayerRequest;
class UnblockPlayerRequest;
class BlockedPlayerAddedNotification;
class BlockedPlayerRemovedNotification;
class RecentPlayersAddedNotification;
class RecentPlayersRemovedNotification;

// ===================================================================

class SubscribeRequest : public ::google::protobuf::Message {
 public:
  SubscribeRequest();
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeRequest& default_instance();

  void Swap(SubscribeRequest* other);

  // implements Message ----------------------------------------------

  SubscribeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeRequest& from);
  void MergeFrom(const SubscribeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // required uint64 object_id = 2;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Battlenet.user_manager.SubscribeRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_object_id();
  inline void clear_has_object_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* agent_id_;
  ::google::protobuf::uint64 object_id_;
  friend void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SubscribeRequest* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeResponse : public ::google::protobuf::Message {
 public:
  SubscribeResponse();
  virtual ~SubscribeResponse();

  SubscribeResponse(const SubscribeResponse& from);

  inline SubscribeResponse& operator=(const SubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeResponse& default_instance();

  void Swap(SubscribeResponse* other);

  // implements Message ----------------------------------------------

  SubscribeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeResponse& from);
  void MergeFrom(const SubscribeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.user_manager.BlockedPlayer blocked_players = 1;
  inline int blocked_players_size() const;
  inline void clear_blocked_players();
  static const int kBlockedPlayersFieldNumber = 1;
  inline const ::Battlenet::user_manager::BlockedPlayer& blocked_players(int index) const;
  inline ::Battlenet::user_manager::BlockedPlayer* mutable_blocked_players(int index);
  inline ::Battlenet::user_manager::BlockedPlayer* add_blocked_players();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::BlockedPlayer >&
      blocked_players() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::BlockedPlayer >*
      mutable_blocked_players();

  // repeated .Battlenet.user_manager.RecentPlayer recent_players = 2;
  inline int recent_players_size() const;
  inline void clear_recent_players();
  static const int kRecentPlayersFieldNumber = 2;
  inline const ::Battlenet::user_manager::RecentPlayer& recent_players(int index) const;
  inline ::Battlenet::user_manager::RecentPlayer* mutable_recent_players(int index);
  inline ::Battlenet::user_manager::RecentPlayer* add_recent_players();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >&
      recent_players() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >*
      mutable_recent_players();

  // repeated .Battlenet.Role role = 3;
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 3;
  inline const ::Battlenet::Role& role(int index) const;
  inline ::Battlenet::Role* mutable_role(int index);
  inline ::Battlenet::Role* add_role();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Role >&
      role() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Role >*
      mutable_role();

  // @@protoc_insertion_point(class_scope:Battlenet.user_manager.SubscribeResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::BlockedPlayer > blocked_players_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer > recent_players_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::Role > role_;
  friend void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SubscribeResponse* default_instance_;
};
// -------------------------------------------------------------------

class UnsubscribeRequest : public ::google::protobuf::Message {
 public:
  UnsubscribeRequest();
  virtual ~UnsubscribeRequest();

  UnsubscribeRequest(const UnsubscribeRequest& from);

  inline UnsubscribeRequest& operator=(const UnsubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnsubscribeRequest& default_instance();

  void Swap(UnsubscribeRequest* other);

  // implements Message ----------------------------------------------

  UnsubscribeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnsubscribeRequest& from);
  void MergeFrom(const UnsubscribeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // optional uint64 object_id = 2;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Battlenet.user_manager.UnsubscribeRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_object_id();
  inline void clear_has_object_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* agent_id_;
  ::google::protobuf::uint64 object_id_;
  friend void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static UnsubscribeRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddRecentPlayersRequest : public ::google::protobuf::Message {
 public:
  AddRecentPlayersRequest();
  virtual ~AddRecentPlayersRequest();

  AddRecentPlayersRequest(const AddRecentPlayersRequest& from);

  inline AddRecentPlayersRequest& operator=(const AddRecentPlayersRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRecentPlayersRequest& default_instance();

  void Swap(AddRecentPlayersRequest* other);

  // implements Message ----------------------------------------------

  AddRecentPlayersRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddRecentPlayersRequest& from);
  void MergeFrom(const AddRecentPlayersRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.user_manager.RecentPlayer players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::Battlenet::user_manager::RecentPlayer& players(int index) const;
  inline ::Battlenet::user_manager::RecentPlayer* mutable_players(int index);
  inline ::Battlenet::user_manager::RecentPlayer* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >*
      mutable_players();

  // optional .Battlenet.EntityId agent_id = 2;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // optional uint32 program = 3;
  inline bool has_program() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 3;
  inline ::google::protobuf::uint32 program() const;
  inline void set_program(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Battlenet.user_manager.AddRecentPlayersRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_program();
  inline void clear_has_program();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer > players_;
  ::Battlenet::EntityId* agent_id_;
  ::google::protobuf::uint32 program_;
  friend void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static AddRecentPlayersRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddRecentPlayersResponse : public ::google::protobuf::Message {
 public:
  AddRecentPlayersResponse();
  virtual ~AddRecentPlayersResponse();

  AddRecentPlayersResponse(const AddRecentPlayersResponse& from);

  inline AddRecentPlayersResponse& operator=(const AddRecentPlayersResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRecentPlayersResponse& default_instance();

  void Swap(AddRecentPlayersResponse* other);

  // implements Message ----------------------------------------------

  AddRecentPlayersResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddRecentPlayersResponse& from);
  void MergeFrom(const AddRecentPlayersResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.user_manager.RecentPlayer players_added = 1;
  inline int players_added_size() const;
  inline void clear_players_added();
  static const int kPlayersAddedFieldNumber = 1;
  inline const ::Battlenet::user_manager::RecentPlayer& players_added(int index) const;
  inline ::Battlenet::user_manager::RecentPlayer* mutable_players_added(int index);
  inline ::Battlenet::user_manager::RecentPlayer* add_players_added();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >&
      players_added() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >*
      mutable_players_added();

  // repeated fixed32 players_removed = 3;
  inline int players_removed_size() const;
  inline void clear_players_removed();
  static const int kPlayersRemovedFieldNumber = 3;
  inline ::google::protobuf::uint32 players_removed(int index) const;
  inline void set_players_removed(int index, ::google::protobuf::uint32 value);
  inline void add_players_removed(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      players_removed() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_players_removed();

  // @@protoc_insertion_point(class_scope:Battlenet.user_manager.AddRecentPlayersResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer > players_added_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > players_removed_;
  friend void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static AddRecentPlayersResponse* default_instance_;
};
// -------------------------------------------------------------------

class ClearRecentPlayersRequest : public ::google::protobuf::Message {
 public:
  ClearRecentPlayersRequest();
  virtual ~ClearRecentPlayersRequest();

  ClearRecentPlayersRequest(const ClearRecentPlayersRequest& from);

  inline ClearRecentPlayersRequest& operator=(const ClearRecentPlayersRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearRecentPlayersRequest& default_instance();

  void Swap(ClearRecentPlayersRequest* other);

  // implements Message ----------------------------------------------

  ClearRecentPlayersRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearRecentPlayersRequest& from);
  void MergeFrom(const ClearRecentPlayersRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // optional uint32 program = 2;
  inline bool has_program() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 2;
  inline ::google::protobuf::uint32 program() const;
  inline void set_program(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Battlenet.user_manager.ClearRecentPlayersRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_program();
  inline void clear_has_program();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* agent_id_;
  ::google::protobuf::uint32 program_;
  friend void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ClearRecentPlayersRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClearRecentPlayersResponse : public ::google::protobuf::Message {
 public:
  ClearRecentPlayersResponse();
  virtual ~ClearRecentPlayersResponse();

  ClearRecentPlayersResponse(const ClearRecentPlayersResponse& from);

  inline ClearRecentPlayersResponse& operator=(const ClearRecentPlayersResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearRecentPlayersResponse& default_instance();

  void Swap(ClearRecentPlayersResponse* other);

  // implements Message ----------------------------------------------

  ClearRecentPlayersResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearRecentPlayersResponse& from);
  void MergeFrom(const ClearRecentPlayersResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated fixed32 players_removed = 1;
  inline int players_removed_size() const;
  inline void clear_players_removed();
  static const int kPlayersRemovedFieldNumber = 1;
  inline ::google::protobuf::uint32 players_removed(int index) const;
  inline void set_players_removed(int index, ::google::protobuf::uint32 value);
  inline void add_players_removed(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      players_removed() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_players_removed();

  // @@protoc_insertion_point(class_scope:Battlenet.user_manager.ClearRecentPlayersResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > players_removed_;
  friend void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ClearRecentPlayersResponse* default_instance_;
};
// -------------------------------------------------------------------

class BlockPlayerRequest : public ::google::protobuf::Message {
 public:
  BlockPlayerRequest();
  virtual ~BlockPlayerRequest();

  BlockPlayerRequest(const BlockPlayerRequest& from);

  inline BlockPlayerRequest& operator=(const BlockPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockPlayerRequest& default_instance();

  void Swap(BlockPlayerRequest* other);

  // implements Message ----------------------------------------------

  BlockPlayerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockPlayerRequest& from);
  void MergeFrom(const BlockPlayerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // required .Battlenet.EntityId target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& target_id() const;
  inline ::Battlenet::EntityId* mutable_target_id();
  inline ::Battlenet::EntityId* release_target_id();
  inline void set_allocated_target_id(::Battlenet::EntityId* target_id);

  // optional uint32 role = 3;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 3;
  inline ::google::protobuf::uint32 role() const;
  inline void set_role(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Battlenet.user_manager.BlockPlayerRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_role();
  inline void clear_has_role();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* agent_id_;
  ::Battlenet::EntityId* target_id_;
  ::google::protobuf::uint32 role_;
  friend void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static BlockPlayerRequest* default_instance_;
};
// -------------------------------------------------------------------

class UnblockPlayerRequest : public ::google::protobuf::Message {
 public:
  UnblockPlayerRequest();
  virtual ~UnblockPlayerRequest();

  UnblockPlayerRequest(const UnblockPlayerRequest& from);

  inline UnblockPlayerRequest& operator=(const UnblockPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnblockPlayerRequest& default_instance();

  void Swap(UnblockPlayerRequest* other);

  // implements Message ----------------------------------------------

  UnblockPlayerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnblockPlayerRequest& from);
  void MergeFrom(const UnblockPlayerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // required .Battlenet.EntityId target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& target_id() const;
  inline ::Battlenet::EntityId* mutable_target_id();
  inline ::Battlenet::EntityId* release_target_id();
  inline void set_allocated_target_id(::Battlenet::EntityId* target_id);

  // @@protoc_insertion_point(class_scope:Battlenet.user_manager.UnblockPlayerRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* agent_id_;
  ::Battlenet::EntityId* target_id_;
  friend void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static UnblockPlayerRequest* default_instance_;
};
// -------------------------------------------------------------------

class BlockedPlayerAddedNotification : public ::google::protobuf::Message {
 public:
  BlockedPlayerAddedNotification();
  virtual ~BlockedPlayerAddedNotification();

  BlockedPlayerAddedNotification(const BlockedPlayerAddedNotification& from);

  inline BlockedPlayerAddedNotification& operator=(const BlockedPlayerAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockedPlayerAddedNotification& default_instance();

  void Swap(BlockedPlayerAddedNotification* other);

  // implements Message ----------------------------------------------

  BlockedPlayerAddedNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockedPlayerAddedNotification& from);
  void MergeFrom(const BlockedPlayerAddedNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Battlenet.user_manager.BlockedPlayer player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::Battlenet::user_manager::BlockedPlayer& player() const;
  inline ::Battlenet::user_manager::BlockedPlayer* mutable_player();
  inline ::Battlenet::user_manager::BlockedPlayer* release_player();
  inline void set_allocated_player(::Battlenet::user_manager::BlockedPlayer* player);

  // optional .Battlenet.EntityId game_account_id = 2;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& game_account_id() const;
  inline ::Battlenet::EntityId* mutable_game_account_id();
  inline ::Battlenet::EntityId* release_game_account_id();
  inline void set_allocated_game_account_id(::Battlenet::EntityId* game_account_id);

  // optional .Battlenet.EntityId account_id = 3;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 3;
  inline const ::Battlenet::EntityId& account_id() const;
  inline ::Battlenet::EntityId* mutable_account_id();
  inline ::Battlenet::EntityId* release_account_id();
  inline void set_allocated_account_id(::Battlenet::EntityId* account_id);

  // @@protoc_insertion_point(class_scope:Battlenet.user_manager.BlockedPlayerAddedNotification)
 private:
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::user_manager::BlockedPlayer* player_;
  ::Battlenet::EntityId* game_account_id_;
  ::Battlenet::EntityId* account_id_;
  friend void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static BlockedPlayerAddedNotification* default_instance_;
};
// -------------------------------------------------------------------

class BlockedPlayerRemovedNotification : public ::google::protobuf::Message {
 public:
  BlockedPlayerRemovedNotification();
  virtual ~BlockedPlayerRemovedNotification();

  BlockedPlayerRemovedNotification(const BlockedPlayerRemovedNotification& from);

  inline BlockedPlayerRemovedNotification& operator=(const BlockedPlayerRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockedPlayerRemovedNotification& default_instance();

  void Swap(BlockedPlayerRemovedNotification* other);

  // implements Message ----------------------------------------------

  BlockedPlayerRemovedNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockedPlayerRemovedNotification& from);
  void MergeFrom(const BlockedPlayerRemovedNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Battlenet.user_manager.BlockedPlayer player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::Battlenet::user_manager::BlockedPlayer& player() const;
  inline ::Battlenet::user_manager::BlockedPlayer* mutable_player();
  inline ::Battlenet::user_manager::BlockedPlayer* release_player();
  inline void set_allocated_player(::Battlenet::user_manager::BlockedPlayer* player);

  // optional .Battlenet.EntityId game_account_id = 2;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& game_account_id() const;
  inline ::Battlenet::EntityId* mutable_game_account_id();
  inline ::Battlenet::EntityId* release_game_account_id();
  inline void set_allocated_game_account_id(::Battlenet::EntityId* game_account_id);

  // optional .Battlenet.EntityId account_id = 3;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 3;
  inline const ::Battlenet::EntityId& account_id() const;
  inline ::Battlenet::EntityId* mutable_account_id();
  inline ::Battlenet::EntityId* release_account_id();
  inline void set_allocated_account_id(::Battlenet::EntityId* account_id);

  // @@protoc_insertion_point(class_scope:Battlenet.user_manager.BlockedPlayerRemovedNotification)
 private:
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::user_manager::BlockedPlayer* player_;
  ::Battlenet::EntityId* game_account_id_;
  ::Battlenet::EntityId* account_id_;
  friend void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static BlockedPlayerRemovedNotification* default_instance_;
};
// -------------------------------------------------------------------

class RecentPlayersAddedNotification : public ::google::protobuf::Message {
 public:
  RecentPlayersAddedNotification();
  virtual ~RecentPlayersAddedNotification();

  RecentPlayersAddedNotification(const RecentPlayersAddedNotification& from);

  inline RecentPlayersAddedNotification& operator=(const RecentPlayersAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecentPlayersAddedNotification& default_instance();

  void Swap(RecentPlayersAddedNotification* other);

  // implements Message ----------------------------------------------

  RecentPlayersAddedNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecentPlayersAddedNotification& from);
  void MergeFrom(const RecentPlayersAddedNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.user_manager.RecentPlayer player = 1;
  inline int player_size() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::Battlenet::user_manager::RecentPlayer& player(int index) const;
  inline ::Battlenet::user_manager::RecentPlayer* mutable_player(int index);
  inline ::Battlenet::user_manager::RecentPlayer* add_player();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >&
      player() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >*
      mutable_player();

  // @@protoc_insertion_point(class_scope:Battlenet.user_manager.RecentPlayersAddedNotification)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer > player_;
  friend void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static RecentPlayersAddedNotification* default_instance_;
};
// -------------------------------------------------------------------

class RecentPlayersRemovedNotification : public ::google::protobuf::Message {
 public:
  RecentPlayersRemovedNotification();
  virtual ~RecentPlayersRemovedNotification();

  RecentPlayersRemovedNotification(const RecentPlayersRemovedNotification& from);

  inline RecentPlayersRemovedNotification& operator=(const RecentPlayersRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecentPlayersRemovedNotification& default_instance();

  void Swap(RecentPlayersRemovedNotification* other);

  // implements Message ----------------------------------------------

  RecentPlayersRemovedNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecentPlayersRemovedNotification& from);
  void MergeFrom(const RecentPlayersRemovedNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.user_manager.RecentPlayer player = 1;
  inline int player_size() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::Battlenet::user_manager::RecentPlayer& player(int index) const;
  inline ::Battlenet::user_manager::RecentPlayer* mutable_player(int index);
  inline ::Battlenet::user_manager::RecentPlayer* add_player();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >&
      player() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >*
      mutable_player();

  // @@protoc_insertion_point(class_scope:Battlenet.user_manager.RecentPlayersRemovedNotification)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer > player_;
  friend void  protobuf_AddDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static RecentPlayersRemovedNotification* default_instance_;
};
// ===================================================================

class UserManagerService : public ServiceBase
{
 public:
  explicit UserManagerService(Battlenet::Session* session) : _session(session) { }
  ~UserManagerService() { }

  typedef std::integral_constant<uint32, 0x3E19268Au> Hash;

  static google::protobuf::ServiceDescriptor const* descriptor();

  // client methods --------------------------------------------------

  template<void(Battlenet::Session::*Handler)(::Battlenet::user_manager::SubscribeResponse const*)>
  inline void Subscribe(::Battlenet::user_manager::SubscribeRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method UserManagerService.Subscribe(Battlenet.user_manager.SubscribeRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::user_manager::SubscribeResponse, Handler>(Hash::value, 1, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::user_manager::AddRecentPlayersResponse const*)>
  inline void AddRecentPlayers(::Battlenet::user_manager::AddRecentPlayersRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method UserManagerService.AddRecentPlayers(Battlenet.user_manager.AddRecentPlayersRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::user_manager::AddRecentPlayersResponse, Handler>(Hash::value, 10, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::user_manager::ClearRecentPlayersResponse const*)>
  inline void ClearRecentPlayers(::Battlenet::user_manager::ClearRecentPlayersRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method UserManagerService.ClearRecentPlayers(Battlenet.user_manager.ClearRecentPlayersRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::user_manager::ClearRecentPlayersResponse, Handler>(Hash::value, 11, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void BlockPlayer(::Battlenet::user_manager::BlockPlayerRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method UserManagerService.BlockPlayer(Battlenet.user_manager.BlockPlayerRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 20, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void UnblockPlayer(::Battlenet::user_manager::UnblockPlayerRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method UserManagerService.UnblockPlayer(Battlenet.user_manager.UnblockPlayerRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 21, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void BlockPlayerForSession(::Battlenet::user_manager::BlockPlayerRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method UserManagerService.BlockPlayerForSession(Battlenet.user_manager.BlockPlayerRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 40, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void LoadBlockList(::Battlenet::EntityId const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method UserManagerService.LoadBlockList(Battlenet.EntityId{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 50, request);
  }

  template<void(Battlenet::Session::*Handler)(::Battlenet::NoData const*)>
  inline void Unsubscribe(::Battlenet::user_manager::UnsubscribeRequest const* request) { 
    TC_LOG_DEBUG("session.rpc", "%s Server called client method UserManagerService.Unsubscribe(Battlenet.user_manager.UnsubscribeRequest{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequestWithCallback<::Battlenet::NoData, Handler>(Hash::value, 51, request);
  }

  // server methods --------------------------------------------------

  void CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) override final;

 protected:
  virtual uint32 HandleSubscribe(::Battlenet::user_manager::SubscribeRequest const* request, ::Battlenet::user_manager::SubscribeResponse* response);
  virtual uint32 HandleAddRecentPlayers(::Battlenet::user_manager::AddRecentPlayersRequest const* request, ::Battlenet::user_manager::AddRecentPlayersResponse* response);
  virtual uint32 HandleClearRecentPlayers(::Battlenet::user_manager::ClearRecentPlayersRequest const* request, ::Battlenet::user_manager::ClearRecentPlayersResponse* response);
  virtual uint32 HandleBlockPlayer(::Battlenet::user_manager::BlockPlayerRequest const* request, ::Battlenet::NoData* response);
  virtual uint32 HandleUnblockPlayer(::Battlenet::user_manager::UnblockPlayerRequest const* request, ::Battlenet::NoData* response);
  virtual uint32 HandleBlockPlayerForSession(::Battlenet::user_manager::BlockPlayerRequest const* request, ::Battlenet::NoData* response);
  virtual uint32 HandleLoadBlockList(::Battlenet::EntityId const* request, ::Battlenet::NoData* response);
  virtual uint32 HandleUnsubscribe(::Battlenet::user_manager::UnsubscribeRequest const* request, ::Battlenet::NoData* response);

  Battlenet::Session* _session;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserManagerService);
};

// -------------------------------------------------------------------

class UserManagerListener : public ServiceBase
{
 public:
  explicit UserManagerListener(Battlenet::Session* session) : _session(session) { }
  ~UserManagerListener() { }

  typedef std::integral_constant<uint32, 0xBC872C22u> Hash;

  static google::protobuf::ServiceDescriptor const* descriptor();

  // client methods --------------------------------------------------

  inline void OnBlockedPlayerAdded(::Battlenet::user_manager::BlockedPlayerAddedNotification const* request) {
    TC_LOG_DEBUG("session.rpc", "%s Server called client method UserManagerListener.OnBlockedPlayerAdded(Battlenet.user_manager.BlockedPlayerAddedNotification{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequest(Hash::value, 1, request);
  }

  inline void OnBlockedPlayerRemoved(::Battlenet::user_manager::BlockedPlayerRemovedNotification const* request) {
    TC_LOG_DEBUG("session.rpc", "%s Server called client method UserManagerListener.OnBlockedPlayerRemoved(Battlenet.user_manager.BlockedPlayerRemovedNotification{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequest(Hash::value, 2, request);
  }

  inline void OnRecentPlayersAdded(::Battlenet::user_manager::RecentPlayersAddedNotification const* request) {
    TC_LOG_DEBUG("session.rpc", "%s Server called client method UserManagerListener.OnRecentPlayersAdded(Battlenet.user_manager.RecentPlayersAddedNotification{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequest(Hash::value, 11, request);
  }

  inline void OnRecentPlayersRemoved(::Battlenet::user_manager::RecentPlayersRemovedNotification const* request) {
    TC_LOG_DEBUG("session.rpc", "%s Server called client method UserManagerListener.OnRecentPlayersRemoved(Battlenet.user_manager.RecentPlayersRemovedNotification{ %s })",
      _session->GetClientInfo().c_str(), request->ShortDebugString().c_str());
    _session->SendRequest(Hash::value, 12, request);
  }

  // server methods --------------------------------------------------

  void CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) override final;

 protected:
  virtual uint32 HandleOnBlockedPlayerAdded(::Battlenet::user_manager::BlockedPlayerAddedNotification const* request);
  virtual uint32 HandleOnBlockedPlayerRemoved(::Battlenet::user_manager::BlockedPlayerRemovedNotification const* request);
  virtual uint32 HandleOnRecentPlayersAdded(::Battlenet::user_manager::RecentPlayersAddedNotification const* request);
  virtual uint32 HandleOnRecentPlayersRemoved(::Battlenet::user_manager::RecentPlayersRemovedNotification const* request);

  Battlenet::Session* _session;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserManagerListener);
};

// ===================================================================


// ===================================================================

// SubscribeRequest

// optional .Battlenet.EntityId agent_id = 1;
inline bool SubscribeRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& SubscribeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.SubscribeRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* SubscribeRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.SubscribeRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* SubscribeRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void SubscribeRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.SubscribeRequest.agent_id)
}

// required uint64 object_id = 2;
inline bool SubscribeRequest::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeRequest::set_has_object_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscribeRequest::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscribeRequest::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::uint64 SubscribeRequest::object_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.SubscribeRequest.object_id)
  return object_id_;
}
inline void SubscribeRequest::set_object_id(::google::protobuf::uint64 value) {
  set_has_object_id();
  object_id_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.user_manager.SubscribeRequest.object_id)
}

// -------------------------------------------------------------------

// SubscribeResponse

// repeated .Battlenet.user_manager.BlockedPlayer blocked_players = 1;
inline int SubscribeResponse::blocked_players_size() const {
  return blocked_players_.size();
}
inline void SubscribeResponse::clear_blocked_players() {
  blocked_players_.Clear();
}
inline const ::Battlenet::user_manager::BlockedPlayer& SubscribeResponse::blocked_players(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.SubscribeResponse.blocked_players)
  return blocked_players_.Get(index);
}
inline ::Battlenet::user_manager::BlockedPlayer* SubscribeResponse::mutable_blocked_players(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.SubscribeResponse.blocked_players)
  return blocked_players_.Mutable(index);
}
inline ::Battlenet::user_manager::BlockedPlayer* SubscribeResponse::add_blocked_players() {
  // @@protoc_insertion_point(field_add:Battlenet.user_manager.SubscribeResponse.blocked_players)
  return blocked_players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::BlockedPlayer >&
SubscribeResponse::blocked_players() const {
  // @@protoc_insertion_point(field_list:Battlenet.user_manager.SubscribeResponse.blocked_players)
  return blocked_players_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::BlockedPlayer >*
SubscribeResponse::mutable_blocked_players() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.user_manager.SubscribeResponse.blocked_players)
  return &blocked_players_;
}

// repeated .Battlenet.user_manager.RecentPlayer recent_players = 2;
inline int SubscribeResponse::recent_players_size() const {
  return recent_players_.size();
}
inline void SubscribeResponse::clear_recent_players() {
  recent_players_.Clear();
}
inline const ::Battlenet::user_manager::RecentPlayer& SubscribeResponse::recent_players(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.SubscribeResponse.recent_players)
  return recent_players_.Get(index);
}
inline ::Battlenet::user_manager::RecentPlayer* SubscribeResponse::mutable_recent_players(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.SubscribeResponse.recent_players)
  return recent_players_.Mutable(index);
}
inline ::Battlenet::user_manager::RecentPlayer* SubscribeResponse::add_recent_players() {
  // @@protoc_insertion_point(field_add:Battlenet.user_manager.SubscribeResponse.recent_players)
  return recent_players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >&
SubscribeResponse::recent_players() const {
  // @@protoc_insertion_point(field_list:Battlenet.user_manager.SubscribeResponse.recent_players)
  return recent_players_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >*
SubscribeResponse::mutable_recent_players() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.user_manager.SubscribeResponse.recent_players)
  return &recent_players_;
}

// repeated .Battlenet.Role role = 3;
inline int SubscribeResponse::role_size() const {
  return role_.size();
}
inline void SubscribeResponse::clear_role() {
  role_.Clear();
}
inline const ::Battlenet::Role& SubscribeResponse::role(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.SubscribeResponse.role)
  return role_.Get(index);
}
inline ::Battlenet::Role* SubscribeResponse::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.SubscribeResponse.role)
  return role_.Mutable(index);
}
inline ::Battlenet::Role* SubscribeResponse::add_role() {
  // @@protoc_insertion_point(field_add:Battlenet.user_manager.SubscribeResponse.role)
  return role_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Role >&
SubscribeResponse::role() const {
  // @@protoc_insertion_point(field_list:Battlenet.user_manager.SubscribeResponse.role)
  return role_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Role >*
SubscribeResponse::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.user_manager.SubscribeResponse.role)
  return &role_;
}

// -------------------------------------------------------------------

// UnsubscribeRequest

// optional .Battlenet.EntityId agent_id = 1;
inline bool UnsubscribeRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnsubscribeRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnsubscribeRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnsubscribeRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& UnsubscribeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.UnsubscribeRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* UnsubscribeRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.UnsubscribeRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* UnsubscribeRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void UnsubscribeRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.UnsubscribeRequest.agent_id)
}

// optional uint64 object_id = 2;
inline bool UnsubscribeRequest::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnsubscribeRequest::set_has_object_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnsubscribeRequest::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnsubscribeRequest::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::uint64 UnsubscribeRequest::object_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.UnsubscribeRequest.object_id)
  return object_id_;
}
inline void UnsubscribeRequest::set_object_id(::google::protobuf::uint64 value) {
  set_has_object_id();
  object_id_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.user_manager.UnsubscribeRequest.object_id)
}

// -------------------------------------------------------------------

// AddRecentPlayersRequest

// repeated .Battlenet.user_manager.RecentPlayer players = 1;
inline int AddRecentPlayersRequest::players_size() const {
  return players_.size();
}
inline void AddRecentPlayersRequest::clear_players() {
  players_.Clear();
}
inline const ::Battlenet::user_manager::RecentPlayer& AddRecentPlayersRequest::players(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.AddRecentPlayersRequest.players)
  return players_.Get(index);
}
inline ::Battlenet::user_manager::RecentPlayer* AddRecentPlayersRequest::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.AddRecentPlayersRequest.players)
  return players_.Mutable(index);
}
inline ::Battlenet::user_manager::RecentPlayer* AddRecentPlayersRequest::add_players() {
  // @@protoc_insertion_point(field_add:Battlenet.user_manager.AddRecentPlayersRequest.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >&
AddRecentPlayersRequest::players() const {
  // @@protoc_insertion_point(field_list:Battlenet.user_manager.AddRecentPlayersRequest.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >*
AddRecentPlayersRequest::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.user_manager.AddRecentPlayersRequest.players)
  return &players_;
}

// optional .Battlenet.EntityId agent_id = 2;
inline bool AddRecentPlayersRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddRecentPlayersRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddRecentPlayersRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddRecentPlayersRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& AddRecentPlayersRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.AddRecentPlayersRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* AddRecentPlayersRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.AddRecentPlayersRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* AddRecentPlayersRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void AddRecentPlayersRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.AddRecentPlayersRequest.agent_id)
}

// optional uint32 program = 3;
inline bool AddRecentPlayersRequest::has_program() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddRecentPlayersRequest::set_has_program() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddRecentPlayersRequest::clear_has_program() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddRecentPlayersRequest::clear_program() {
  program_ = 0u;
  clear_has_program();
}
inline ::google::protobuf::uint32 AddRecentPlayersRequest::program() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.AddRecentPlayersRequest.program)
  return program_;
}
inline void AddRecentPlayersRequest::set_program(::google::protobuf::uint32 value) {
  set_has_program();
  program_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.user_manager.AddRecentPlayersRequest.program)
}

// -------------------------------------------------------------------

// AddRecentPlayersResponse

// repeated .Battlenet.user_manager.RecentPlayer players_added = 1;
inline int AddRecentPlayersResponse::players_added_size() const {
  return players_added_.size();
}
inline void AddRecentPlayersResponse::clear_players_added() {
  players_added_.Clear();
}
inline const ::Battlenet::user_manager::RecentPlayer& AddRecentPlayersResponse::players_added(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.AddRecentPlayersResponse.players_added)
  return players_added_.Get(index);
}
inline ::Battlenet::user_manager::RecentPlayer* AddRecentPlayersResponse::mutable_players_added(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.AddRecentPlayersResponse.players_added)
  return players_added_.Mutable(index);
}
inline ::Battlenet::user_manager::RecentPlayer* AddRecentPlayersResponse::add_players_added() {
  // @@protoc_insertion_point(field_add:Battlenet.user_manager.AddRecentPlayersResponse.players_added)
  return players_added_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >&
AddRecentPlayersResponse::players_added() const {
  // @@protoc_insertion_point(field_list:Battlenet.user_manager.AddRecentPlayersResponse.players_added)
  return players_added_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >*
AddRecentPlayersResponse::mutable_players_added() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.user_manager.AddRecentPlayersResponse.players_added)
  return &players_added_;
}

// repeated fixed32 players_removed = 3;
inline int AddRecentPlayersResponse::players_removed_size() const {
  return players_removed_.size();
}
inline void AddRecentPlayersResponse::clear_players_removed() {
  players_removed_.Clear();
}
inline ::google::protobuf::uint32 AddRecentPlayersResponse::players_removed(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.AddRecentPlayersResponse.players_removed)
  return players_removed_.Get(index);
}
inline void AddRecentPlayersResponse::set_players_removed(int index, ::google::protobuf::uint32 value) {
  players_removed_.Set(index, value);
  // @@protoc_insertion_point(field_set:Battlenet.user_manager.AddRecentPlayersResponse.players_removed)
}
inline void AddRecentPlayersResponse::add_players_removed(::google::protobuf::uint32 value) {
  players_removed_.Add(value);
  // @@protoc_insertion_point(field_add:Battlenet.user_manager.AddRecentPlayersResponse.players_removed)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AddRecentPlayersResponse::players_removed() const {
  // @@protoc_insertion_point(field_list:Battlenet.user_manager.AddRecentPlayersResponse.players_removed)
  return players_removed_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AddRecentPlayersResponse::mutable_players_removed() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.user_manager.AddRecentPlayersResponse.players_removed)
  return &players_removed_;
}

// -------------------------------------------------------------------

// ClearRecentPlayersRequest

// optional .Battlenet.EntityId agent_id = 1;
inline bool ClearRecentPlayersRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClearRecentPlayersRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClearRecentPlayersRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClearRecentPlayersRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& ClearRecentPlayersRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.ClearRecentPlayersRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* ClearRecentPlayersRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.ClearRecentPlayersRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* ClearRecentPlayersRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void ClearRecentPlayersRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.ClearRecentPlayersRequest.agent_id)
}

// optional uint32 program = 2;
inline bool ClearRecentPlayersRequest::has_program() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClearRecentPlayersRequest::set_has_program() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClearRecentPlayersRequest::clear_has_program() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClearRecentPlayersRequest::clear_program() {
  program_ = 0u;
  clear_has_program();
}
inline ::google::protobuf::uint32 ClearRecentPlayersRequest::program() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.ClearRecentPlayersRequest.program)
  return program_;
}
inline void ClearRecentPlayersRequest::set_program(::google::protobuf::uint32 value) {
  set_has_program();
  program_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.user_manager.ClearRecentPlayersRequest.program)
}

// -------------------------------------------------------------------

// ClearRecentPlayersResponse

// repeated fixed32 players_removed = 1;
inline int ClearRecentPlayersResponse::players_removed_size() const {
  return players_removed_.size();
}
inline void ClearRecentPlayersResponse::clear_players_removed() {
  players_removed_.Clear();
}
inline ::google::protobuf::uint32 ClearRecentPlayersResponse::players_removed(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.ClearRecentPlayersResponse.players_removed)
  return players_removed_.Get(index);
}
inline void ClearRecentPlayersResponse::set_players_removed(int index, ::google::protobuf::uint32 value) {
  players_removed_.Set(index, value);
  // @@protoc_insertion_point(field_set:Battlenet.user_manager.ClearRecentPlayersResponse.players_removed)
}
inline void ClearRecentPlayersResponse::add_players_removed(::google::protobuf::uint32 value) {
  players_removed_.Add(value);
  // @@protoc_insertion_point(field_add:Battlenet.user_manager.ClearRecentPlayersResponse.players_removed)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ClearRecentPlayersResponse::players_removed() const {
  // @@protoc_insertion_point(field_list:Battlenet.user_manager.ClearRecentPlayersResponse.players_removed)
  return players_removed_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ClearRecentPlayersResponse::mutable_players_removed() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.user_manager.ClearRecentPlayersResponse.players_removed)
  return &players_removed_;
}

// -------------------------------------------------------------------

// BlockPlayerRequest

// optional .Battlenet.EntityId agent_id = 1;
inline bool BlockPlayerRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockPlayerRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockPlayerRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockPlayerRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& BlockPlayerRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.BlockPlayerRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* BlockPlayerRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.BlockPlayerRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* BlockPlayerRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void BlockPlayerRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.BlockPlayerRequest.agent_id)
}

// required .Battlenet.EntityId target_id = 2;
inline bool BlockPlayerRequest::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockPlayerRequest::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockPlayerRequest::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockPlayerRequest::clear_target_id() {
  if (target_id_ != NULL) target_id_->::Battlenet::EntityId::Clear();
  clear_has_target_id();
}
inline const ::Battlenet::EntityId& BlockPlayerRequest::target_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.BlockPlayerRequest.target_id)
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::Battlenet::EntityId* BlockPlayerRequest::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) target_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.BlockPlayerRequest.target_id)
  return target_id_;
}
inline ::Battlenet::EntityId* BlockPlayerRequest::release_target_id() {
  clear_has_target_id();
  ::Battlenet::EntityId* temp = target_id_;
  target_id_ = NULL;
  return temp;
}
inline void BlockPlayerRequest::set_allocated_target_id(::Battlenet::EntityId* target_id) {
  delete target_id_;
  target_id_ = target_id;
  if (target_id) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.BlockPlayerRequest.target_id)
}

// optional uint32 role = 3;
inline bool BlockPlayerRequest::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockPlayerRequest::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockPlayerRequest::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockPlayerRequest::clear_role() {
  role_ = 0u;
  clear_has_role();
}
inline ::google::protobuf::uint32 BlockPlayerRequest::role() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.BlockPlayerRequest.role)
  return role_;
}
inline void BlockPlayerRequest::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.user_manager.BlockPlayerRequest.role)
}

// -------------------------------------------------------------------

// UnblockPlayerRequest

// optional .Battlenet.EntityId agent_id = 1;
inline bool UnblockPlayerRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnblockPlayerRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnblockPlayerRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnblockPlayerRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& UnblockPlayerRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.UnblockPlayerRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* UnblockPlayerRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.UnblockPlayerRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* UnblockPlayerRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void UnblockPlayerRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.UnblockPlayerRequest.agent_id)
}

// required .Battlenet.EntityId target_id = 2;
inline bool UnblockPlayerRequest::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnblockPlayerRequest::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnblockPlayerRequest::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnblockPlayerRequest::clear_target_id() {
  if (target_id_ != NULL) target_id_->::Battlenet::EntityId::Clear();
  clear_has_target_id();
}
inline const ::Battlenet::EntityId& UnblockPlayerRequest::target_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.UnblockPlayerRequest.target_id)
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::Battlenet::EntityId* UnblockPlayerRequest::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) target_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.UnblockPlayerRequest.target_id)
  return target_id_;
}
inline ::Battlenet::EntityId* UnblockPlayerRequest::release_target_id() {
  clear_has_target_id();
  ::Battlenet::EntityId* temp = target_id_;
  target_id_ = NULL;
  return temp;
}
inline void UnblockPlayerRequest::set_allocated_target_id(::Battlenet::EntityId* target_id) {
  delete target_id_;
  target_id_ = target_id;
  if (target_id) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.UnblockPlayerRequest.target_id)
}

// -------------------------------------------------------------------

// BlockedPlayerAddedNotification

// required .Battlenet.user_manager.BlockedPlayer player = 1;
inline bool BlockedPlayerAddedNotification::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockedPlayerAddedNotification::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockedPlayerAddedNotification::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockedPlayerAddedNotification::clear_player() {
  if (player_ != NULL) player_->::Battlenet::user_manager::BlockedPlayer::Clear();
  clear_has_player();
}
inline const ::Battlenet::user_manager::BlockedPlayer& BlockedPlayerAddedNotification::player() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.BlockedPlayerAddedNotification.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::Battlenet::user_manager::BlockedPlayer* BlockedPlayerAddedNotification::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::Battlenet::user_manager::BlockedPlayer;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.BlockedPlayerAddedNotification.player)
  return player_;
}
inline ::Battlenet::user_manager::BlockedPlayer* BlockedPlayerAddedNotification::release_player() {
  clear_has_player();
  ::Battlenet::user_manager::BlockedPlayer* temp = player_;
  player_ = NULL;
  return temp;
}
inline void BlockedPlayerAddedNotification::set_allocated_player(::Battlenet::user_manager::BlockedPlayer* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.BlockedPlayerAddedNotification.player)
}

// optional .Battlenet.EntityId game_account_id = 2;
inline bool BlockedPlayerAddedNotification::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockedPlayerAddedNotification::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockedPlayerAddedNotification::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockedPlayerAddedNotification::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::Battlenet::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::Battlenet::EntityId& BlockedPlayerAddedNotification::game_account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.BlockedPlayerAddedNotification.game_account_id)
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::Battlenet::EntityId* BlockedPlayerAddedNotification::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.BlockedPlayerAddedNotification.game_account_id)
  return game_account_id_;
}
inline ::Battlenet::EntityId* BlockedPlayerAddedNotification::release_game_account_id() {
  clear_has_game_account_id();
  ::Battlenet::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}
inline void BlockedPlayerAddedNotification::set_allocated_game_account_id(::Battlenet::EntityId* game_account_id) {
  delete game_account_id_;
  game_account_id_ = game_account_id;
  if (game_account_id) {
    set_has_game_account_id();
  } else {
    clear_has_game_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.BlockedPlayerAddedNotification.game_account_id)
}

// optional .Battlenet.EntityId account_id = 3;
inline bool BlockedPlayerAddedNotification::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockedPlayerAddedNotification::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockedPlayerAddedNotification::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockedPlayerAddedNotification::clear_account_id() {
  if (account_id_ != NULL) account_id_->::Battlenet::EntityId::Clear();
  clear_has_account_id();
}
inline const ::Battlenet::EntityId& BlockedPlayerAddedNotification::account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.BlockedPlayerAddedNotification.account_id)
  return account_id_ != NULL ? *account_id_ : *default_instance_->account_id_;
}
inline ::Battlenet::EntityId* BlockedPlayerAddedNotification::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == NULL) account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.BlockedPlayerAddedNotification.account_id)
  return account_id_;
}
inline ::Battlenet::EntityId* BlockedPlayerAddedNotification::release_account_id() {
  clear_has_account_id();
  ::Battlenet::EntityId* temp = account_id_;
  account_id_ = NULL;
  return temp;
}
inline void BlockedPlayerAddedNotification::set_allocated_account_id(::Battlenet::EntityId* account_id) {
  delete account_id_;
  account_id_ = account_id;
  if (account_id) {
    set_has_account_id();
  } else {
    clear_has_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.BlockedPlayerAddedNotification.account_id)
}

// -------------------------------------------------------------------

// BlockedPlayerRemovedNotification

// required .Battlenet.user_manager.BlockedPlayer player = 1;
inline bool BlockedPlayerRemovedNotification::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockedPlayerRemovedNotification::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockedPlayerRemovedNotification::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockedPlayerRemovedNotification::clear_player() {
  if (player_ != NULL) player_->::Battlenet::user_manager::BlockedPlayer::Clear();
  clear_has_player();
}
inline const ::Battlenet::user_manager::BlockedPlayer& BlockedPlayerRemovedNotification::player() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.BlockedPlayerRemovedNotification.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::Battlenet::user_manager::BlockedPlayer* BlockedPlayerRemovedNotification::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::Battlenet::user_manager::BlockedPlayer;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.BlockedPlayerRemovedNotification.player)
  return player_;
}
inline ::Battlenet::user_manager::BlockedPlayer* BlockedPlayerRemovedNotification::release_player() {
  clear_has_player();
  ::Battlenet::user_manager::BlockedPlayer* temp = player_;
  player_ = NULL;
  return temp;
}
inline void BlockedPlayerRemovedNotification::set_allocated_player(::Battlenet::user_manager::BlockedPlayer* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.BlockedPlayerRemovedNotification.player)
}

// optional .Battlenet.EntityId game_account_id = 2;
inline bool BlockedPlayerRemovedNotification::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockedPlayerRemovedNotification::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockedPlayerRemovedNotification::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockedPlayerRemovedNotification::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::Battlenet::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::Battlenet::EntityId& BlockedPlayerRemovedNotification::game_account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.BlockedPlayerRemovedNotification.game_account_id)
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::Battlenet::EntityId* BlockedPlayerRemovedNotification::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.BlockedPlayerRemovedNotification.game_account_id)
  return game_account_id_;
}
inline ::Battlenet::EntityId* BlockedPlayerRemovedNotification::release_game_account_id() {
  clear_has_game_account_id();
  ::Battlenet::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}
inline void BlockedPlayerRemovedNotification::set_allocated_game_account_id(::Battlenet::EntityId* game_account_id) {
  delete game_account_id_;
  game_account_id_ = game_account_id;
  if (game_account_id) {
    set_has_game_account_id();
  } else {
    clear_has_game_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.BlockedPlayerRemovedNotification.game_account_id)
}

// optional .Battlenet.EntityId account_id = 3;
inline bool BlockedPlayerRemovedNotification::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockedPlayerRemovedNotification::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockedPlayerRemovedNotification::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockedPlayerRemovedNotification::clear_account_id() {
  if (account_id_ != NULL) account_id_->::Battlenet::EntityId::Clear();
  clear_has_account_id();
}
inline const ::Battlenet::EntityId& BlockedPlayerRemovedNotification::account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.BlockedPlayerRemovedNotification.account_id)
  return account_id_ != NULL ? *account_id_ : *default_instance_->account_id_;
}
inline ::Battlenet::EntityId* BlockedPlayerRemovedNotification::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == NULL) account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.BlockedPlayerRemovedNotification.account_id)
  return account_id_;
}
inline ::Battlenet::EntityId* BlockedPlayerRemovedNotification::release_account_id() {
  clear_has_account_id();
  ::Battlenet::EntityId* temp = account_id_;
  account_id_ = NULL;
  return temp;
}
inline void BlockedPlayerRemovedNotification::set_allocated_account_id(::Battlenet::EntityId* account_id) {
  delete account_id_;
  account_id_ = account_id;
  if (account_id) {
    set_has_account_id();
  } else {
    clear_has_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.user_manager.BlockedPlayerRemovedNotification.account_id)
}

// -------------------------------------------------------------------

// RecentPlayersAddedNotification

// repeated .Battlenet.user_manager.RecentPlayer player = 1;
inline int RecentPlayersAddedNotification::player_size() const {
  return player_.size();
}
inline void RecentPlayersAddedNotification::clear_player() {
  player_.Clear();
}
inline const ::Battlenet::user_manager::RecentPlayer& RecentPlayersAddedNotification::player(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.RecentPlayersAddedNotification.player)
  return player_.Get(index);
}
inline ::Battlenet::user_manager::RecentPlayer* RecentPlayersAddedNotification::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.RecentPlayersAddedNotification.player)
  return player_.Mutable(index);
}
inline ::Battlenet::user_manager::RecentPlayer* RecentPlayersAddedNotification::add_player() {
  // @@protoc_insertion_point(field_add:Battlenet.user_manager.RecentPlayersAddedNotification.player)
  return player_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >&
RecentPlayersAddedNotification::player() const {
  // @@protoc_insertion_point(field_list:Battlenet.user_manager.RecentPlayersAddedNotification.player)
  return player_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >*
RecentPlayersAddedNotification::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.user_manager.RecentPlayersAddedNotification.player)
  return &player_;
}

// -------------------------------------------------------------------

// RecentPlayersRemovedNotification

// repeated .Battlenet.user_manager.RecentPlayer player = 1;
inline int RecentPlayersRemovedNotification::player_size() const {
  return player_.size();
}
inline void RecentPlayersRemovedNotification::clear_player() {
  player_.Clear();
}
inline const ::Battlenet::user_manager::RecentPlayer& RecentPlayersRemovedNotification::player(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.user_manager.RecentPlayersRemovedNotification.player)
  return player_.Get(index);
}
inline ::Battlenet::user_manager::RecentPlayer* RecentPlayersRemovedNotification::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.user_manager.RecentPlayersRemovedNotification.player)
  return player_.Mutable(index);
}
inline ::Battlenet::user_manager::RecentPlayer* RecentPlayersRemovedNotification::add_player() {
  // @@protoc_insertion_point(field_add:Battlenet.user_manager.RecentPlayersRemovedNotification.player)
  return player_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >&
RecentPlayersRemovedNotification::player() const {
  // @@protoc_insertion_point(field_list:Battlenet.user_manager.RecentPlayersRemovedNotification.player)
  return player_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::user_manager::RecentPlayer >*
RecentPlayersRemovedNotification::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.user_manager.RecentPlayersRemovedNotification.player)
  return &player_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user_manager
}  // namespace Battlenet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_5fmanager_5fservice_2eproto__INCLUDED
