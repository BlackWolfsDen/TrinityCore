// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_utilities_service.proto

#ifndef PROTOBUF_game_5futilities_5fservice_2eproto__INCLUDED
#define PROTOBUF_game_5futilities_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "attribute_types.pb.h"
#include "content_handle_types.pb.h"
#include "entity_types.pb.h"
#include "game_utilities_types.pb.h"
#include "rpc_types.pb.h"
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace game_utilities {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

class ClientRequest;
class ClientResponse;
class ServerRequest;
class ServerResponse;
class PresenceChannelCreatedRequest;
class GetPlayerVariablesRequest;
class GetPlayerVariablesResponse;
class GameAccountOnlineNotification;
class GameAccountOfflineNotification;
class GetAchievementsFileRequest;
class GetAchievementsFileResponse;
class GetAllValuesForAttributeRequest;
class GetAllValuesForAttributeResponse;

// ===================================================================

class ClientRequest : public ::google::protobuf::Message {
 public:
  ClientRequest();
  virtual ~ClientRequest();

  ClientRequest(const ClientRequest& from);

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRequest& default_instance();

  void Swap(ClientRequest* other);

  // implements Message ----------------------------------------------

  ClientRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.Attribute attribute = 1;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 1;
  inline const ::Battlenet::Attribute& attribute(int index) const;
  inline ::Battlenet::Attribute* mutable_attribute(int index);
  inline ::Battlenet::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >*
      mutable_attribute();

  // optional .Battlenet.ProcessId host = 2;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 2;
  inline const ::Battlenet::ProcessId& host() const;
  inline ::Battlenet::ProcessId* mutable_host();
  inline ::Battlenet::ProcessId* release_host();
  inline void set_allocated_host(::Battlenet::ProcessId* host);

  // optional .Battlenet.EntityId account_id = 3;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 3;
  inline const ::Battlenet::EntityId& account_id() const;
  inline ::Battlenet::EntityId* mutable_account_id();
  inline ::Battlenet::EntityId* release_account_id();
  inline void set_allocated_account_id(::Battlenet::EntityId* account_id);

  // optional .Battlenet.EntityId game_account_id = 4;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 4;
  inline const ::Battlenet::EntityId& game_account_id() const;
  inline ::Battlenet::EntityId* mutable_game_account_id();
  inline ::Battlenet::EntityId* release_game_account_id();
  inline void set_allocated_game_account_id(::Battlenet::EntityId* game_account_id);

  // optional fixed32 program = 5;
  inline bool has_program() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 5;
  inline ::google::protobuf::uint32 program() const;
  inline void set_program(::google::protobuf::uint32 value);

  // optional .Battlenet.game_utilities.ClientInfo client_info = 6;
  inline bool has_client_info() const;
  inline void clear_client_info();
  static const int kClientInfoFieldNumber = 6;
  inline const ::Battlenet::game_utilities::ClientInfo& client_info() const;
  inline ::Battlenet::game_utilities::ClientInfo* mutable_client_info();
  inline ::Battlenet::game_utilities::ClientInfo* release_client_info();
  inline void set_allocated_client_info(::Battlenet::game_utilities::ClientInfo* client_info);

  // @@protoc_insertion_point(class_scope:Battlenet.game_utilities.ClientRequest)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_program();
  inline void clear_has_program();
  inline void set_has_client_info();
  inline void clear_has_client_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute > attribute_;
  ::Battlenet::ProcessId* host_;
  ::Battlenet::EntityId* account_id_;
  ::Battlenet::EntityId* game_account_id_;
  ::Battlenet::game_utilities::ClientInfo* client_info_;
  ::google::protobuf::uint32 program_;
  friend void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ClientRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClientResponse : public ::google::protobuf::Message {
 public:
  ClientResponse();
  virtual ~ClientResponse();

  ClientResponse(const ClientResponse& from);

  inline ClientResponse& operator=(const ClientResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientResponse& default_instance();

  void Swap(ClientResponse* other);

  // implements Message ----------------------------------------------

  ClientResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientResponse& from);
  void MergeFrom(const ClientResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.Attribute attribute = 1;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 1;
  inline const ::Battlenet::Attribute& attribute(int index) const;
  inline ::Battlenet::Attribute* mutable_attribute(int index);
  inline ::Battlenet::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:Battlenet.game_utilities.ClientResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute > attribute_;
  friend void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ClientResponse* default_instance_;
};
// -------------------------------------------------------------------

class ServerRequest : public ::google::protobuf::Message {
 public:
  ServerRequest();
  virtual ~ServerRequest();

  ServerRequest(const ServerRequest& from);

  inline ServerRequest& operator=(const ServerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerRequest& default_instance();

  void Swap(ServerRequest* other);

  // implements Message ----------------------------------------------

  ServerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerRequest& from);
  void MergeFrom(const ServerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.Attribute attribute = 1;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 1;
  inline const ::Battlenet::Attribute& attribute(int index) const;
  inline ::Battlenet::Attribute* mutable_attribute(int index);
  inline ::Battlenet::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >*
      mutable_attribute();

  // required fixed32 program = 2;
  inline bool has_program() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 2;
  inline ::google::protobuf::uint32 program() const;
  inline void set_program(::google::protobuf::uint32 value);

  // optional .Battlenet.ProcessId host = 3;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 3;
  inline const ::Battlenet::ProcessId& host() const;
  inline ::Battlenet::ProcessId* mutable_host();
  inline ::Battlenet::ProcessId* release_host();
  inline void set_allocated_host(::Battlenet::ProcessId* host);

  // @@protoc_insertion_point(class_scope:Battlenet.game_utilities.ServerRequest)
 private:
  inline void set_has_program();
  inline void clear_has_program();
  inline void set_has_host();
  inline void clear_has_host();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute > attribute_;
  ::Battlenet::ProcessId* host_;
  ::google::protobuf::uint32 program_;
  friend void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ServerRequest* default_instance_;
};
// -------------------------------------------------------------------

class ServerResponse : public ::google::protobuf::Message {
 public:
  ServerResponse();
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerResponse& default_instance();

  void Swap(ServerResponse* other);

  // implements Message ----------------------------------------------

  ServerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.Attribute attribute = 1;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 1;
  inline const ::Battlenet::Attribute& attribute(int index) const;
  inline ::Battlenet::Attribute* mutable_attribute(int index);
  inline ::Battlenet::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:Battlenet.game_utilities.ServerResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute > attribute_;
  friend void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ServerResponse* default_instance_;
};
// -------------------------------------------------------------------

class PresenceChannelCreatedRequest : public ::google::protobuf::Message {
 public:
  PresenceChannelCreatedRequest();
  virtual ~PresenceChannelCreatedRequest();

  PresenceChannelCreatedRequest(const PresenceChannelCreatedRequest& from);

  inline PresenceChannelCreatedRequest& operator=(const PresenceChannelCreatedRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PresenceChannelCreatedRequest& default_instance();

  void Swap(PresenceChannelCreatedRequest* other);

  // implements Message ----------------------------------------------

  PresenceChannelCreatedRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PresenceChannelCreatedRequest& from);
  void MergeFrom(const PresenceChannelCreatedRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Battlenet.EntityId id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& id() const;
  inline ::Battlenet::EntityId* mutable_id();
  inline ::Battlenet::EntityId* release_id();
  inline void set_allocated_id(::Battlenet::EntityId* id);

  // optional .Battlenet.EntityId game_account_id = 3;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 3;
  inline const ::Battlenet::EntityId& game_account_id() const;
  inline ::Battlenet::EntityId* mutable_game_account_id();
  inline ::Battlenet::EntityId* release_game_account_id();
  inline void set_allocated_game_account_id(::Battlenet::EntityId* game_account_id);

  // optional .Battlenet.EntityId account_id = 4;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 4;
  inline const ::Battlenet::EntityId& account_id() const;
  inline ::Battlenet::EntityId* mutable_account_id();
  inline ::Battlenet::EntityId* release_account_id();
  inline void set_allocated_account_id(::Battlenet::EntityId* account_id);

  // optional .Battlenet.ProcessId host = 5;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 5;
  inline const ::Battlenet::ProcessId& host() const;
  inline ::Battlenet::ProcessId* mutable_host();
  inline ::Battlenet::ProcessId* release_host();
  inline void set_allocated_host(::Battlenet::ProcessId* host);

  // @@protoc_insertion_point(class_scope:Battlenet.game_utilities.PresenceChannelCreatedRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_host();
  inline void clear_has_host();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* id_;
  ::Battlenet::EntityId* game_account_id_;
  ::Battlenet::EntityId* account_id_;
  ::Battlenet::ProcessId* host_;
  friend void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PresenceChannelCreatedRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetPlayerVariablesRequest : public ::google::protobuf::Message {
 public:
  GetPlayerVariablesRequest();
  virtual ~GetPlayerVariablesRequest();

  GetPlayerVariablesRequest(const GetPlayerVariablesRequest& from);

  inline GetPlayerVariablesRequest& operator=(const GetPlayerVariablesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPlayerVariablesRequest& default_instance();

  void Swap(GetPlayerVariablesRequest* other);

  // implements Message ----------------------------------------------

  GetPlayerVariablesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPlayerVariablesRequest& from);
  void MergeFrom(const GetPlayerVariablesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.game_utilities.PlayerVariables player_variables = 1;
  inline int player_variables_size() const;
  inline void clear_player_variables();
  static const int kPlayerVariablesFieldNumber = 1;
  inline const ::Battlenet::game_utilities::PlayerVariables& player_variables(int index) const;
  inline ::Battlenet::game_utilities::PlayerVariables* mutable_player_variables(int index);
  inline ::Battlenet::game_utilities::PlayerVariables* add_player_variables();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::game_utilities::PlayerVariables >&
      player_variables() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::game_utilities::PlayerVariables >*
      mutable_player_variables();

  // optional .Battlenet.ProcessId host = 2;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 2;
  inline const ::Battlenet::ProcessId& host() const;
  inline ::Battlenet::ProcessId* mutable_host();
  inline ::Battlenet::ProcessId* release_host();
  inline void set_allocated_host(::Battlenet::ProcessId* host);

  // @@protoc_insertion_point(class_scope:Battlenet.game_utilities.GetPlayerVariablesRequest)
 private:
  inline void set_has_host();
  inline void clear_has_host();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::game_utilities::PlayerVariables > player_variables_;
  ::Battlenet::ProcessId* host_;
  friend void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetPlayerVariablesRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetPlayerVariablesResponse : public ::google::protobuf::Message {
 public:
  GetPlayerVariablesResponse();
  virtual ~GetPlayerVariablesResponse();

  GetPlayerVariablesResponse(const GetPlayerVariablesResponse& from);

  inline GetPlayerVariablesResponse& operator=(const GetPlayerVariablesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPlayerVariablesResponse& default_instance();

  void Swap(GetPlayerVariablesResponse* other);

  // implements Message ----------------------------------------------

  GetPlayerVariablesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPlayerVariablesResponse& from);
  void MergeFrom(const GetPlayerVariablesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.game_utilities.PlayerVariables player_variables = 1;
  inline int player_variables_size() const;
  inline void clear_player_variables();
  static const int kPlayerVariablesFieldNumber = 1;
  inline const ::Battlenet::game_utilities::PlayerVariables& player_variables(int index) const;
  inline ::Battlenet::game_utilities::PlayerVariables* mutable_player_variables(int index);
  inline ::Battlenet::game_utilities::PlayerVariables* add_player_variables();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::game_utilities::PlayerVariables >&
      player_variables() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::game_utilities::PlayerVariables >*
      mutable_player_variables();

  // @@protoc_insertion_point(class_scope:Battlenet.game_utilities.GetPlayerVariablesResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::game_utilities::PlayerVariables > player_variables_;
  friend void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetPlayerVariablesResponse* default_instance_;
};
// -------------------------------------------------------------------

class GameAccountOnlineNotification : public ::google::protobuf::Message {
 public:
  GameAccountOnlineNotification();
  virtual ~GameAccountOnlineNotification();

  GameAccountOnlineNotification(const GameAccountOnlineNotification& from);

  inline GameAccountOnlineNotification& operator=(const GameAccountOnlineNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameAccountOnlineNotification& default_instance();

  void Swap(GameAccountOnlineNotification* other);

  // implements Message ----------------------------------------------

  GameAccountOnlineNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameAccountOnlineNotification& from);
  void MergeFrom(const GameAccountOnlineNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Battlenet.EntityId game_account_id = 1;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& game_account_id() const;
  inline ::Battlenet::EntityId* mutable_game_account_id();
  inline ::Battlenet::EntityId* release_game_account_id();
  inline void set_allocated_game_account_id(::Battlenet::EntityId* game_account_id);

  // optional .Battlenet.ProcessId host = 2;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 2;
  inline const ::Battlenet::ProcessId& host() const;
  inline ::Battlenet::ProcessId* mutable_host();
  inline ::Battlenet::ProcessId* release_host();
  inline void set_allocated_host(::Battlenet::ProcessId* host);

  // optional string session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:Battlenet.game_utilities.GameAccountOnlineNotification)
 private:
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* game_account_id_;
  ::Battlenet::ProcessId* host_;
  ::std::string* session_id_;
  friend void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GameAccountOnlineNotification* default_instance_;
};
// -------------------------------------------------------------------

class GameAccountOfflineNotification : public ::google::protobuf::Message {
 public:
  GameAccountOfflineNotification();
  virtual ~GameAccountOfflineNotification();

  GameAccountOfflineNotification(const GameAccountOfflineNotification& from);

  inline GameAccountOfflineNotification& operator=(const GameAccountOfflineNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameAccountOfflineNotification& default_instance();

  void Swap(GameAccountOfflineNotification* other);

  // implements Message ----------------------------------------------

  GameAccountOfflineNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameAccountOfflineNotification& from);
  void MergeFrom(const GameAccountOfflineNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Battlenet.EntityId game_account_id = 1;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 1;
  inline const ::Battlenet::EntityId& game_account_id() const;
  inline ::Battlenet::EntityId* mutable_game_account_id();
  inline ::Battlenet::EntityId* release_game_account_id();
  inline void set_allocated_game_account_id(::Battlenet::EntityId* game_account_id);

  // optional .Battlenet.ProcessId host = 2;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 2;
  inline const ::Battlenet::ProcessId& host() const;
  inline ::Battlenet::ProcessId* mutable_host();
  inline ::Battlenet::ProcessId* release_host();
  inline void set_allocated_host(::Battlenet::ProcessId* host);

  // optional string session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:Battlenet.game_utilities.GameAccountOfflineNotification)
 private:
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::EntityId* game_account_id_;
  ::Battlenet::ProcessId* host_;
  ::std::string* session_id_;
  friend void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GameAccountOfflineNotification* default_instance_;
};
// -------------------------------------------------------------------

class GetAchievementsFileRequest : public ::google::protobuf::Message {
 public:
  GetAchievementsFileRequest();
  virtual ~GetAchievementsFileRequest();

  GetAchievementsFileRequest(const GetAchievementsFileRequest& from);

  inline GetAchievementsFileRequest& operator=(const GetAchievementsFileRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAchievementsFileRequest& default_instance();

  void Swap(GetAchievementsFileRequest* other);

  // implements Message ----------------------------------------------

  GetAchievementsFileRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAchievementsFileRequest& from);
  void MergeFrom(const GetAchievementsFileRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.ProcessId host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::Battlenet::ProcessId& host() const;
  inline ::Battlenet::ProcessId* mutable_host();
  inline ::Battlenet::ProcessId* release_host();
  inline void set_allocated_host(::Battlenet::ProcessId* host);

  // @@protoc_insertion_point(class_scope:Battlenet.game_utilities.GetAchievementsFileRequest)
 private:
  inline void set_has_host();
  inline void clear_has_host();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::ProcessId* host_;
  friend void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetAchievementsFileRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetAchievementsFileResponse : public ::google::protobuf::Message {
 public:
  GetAchievementsFileResponse();
  virtual ~GetAchievementsFileResponse();

  GetAchievementsFileResponse(const GetAchievementsFileResponse& from);

  inline GetAchievementsFileResponse& operator=(const GetAchievementsFileResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAchievementsFileResponse& default_instance();

  void Swap(GetAchievementsFileResponse* other);

  // implements Message ----------------------------------------------

  GetAchievementsFileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAchievementsFileResponse& from);
  void MergeFrom(const GetAchievementsFileResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Battlenet.ContentHandle content_handle = 1;
  inline bool has_content_handle() const;
  inline void clear_content_handle();
  static const int kContentHandleFieldNumber = 1;
  inline const ::Battlenet::ContentHandle& content_handle() const;
  inline ::Battlenet::ContentHandle* mutable_content_handle();
  inline ::Battlenet::ContentHandle* release_content_handle();
  inline void set_allocated_content_handle(::Battlenet::ContentHandle* content_handle);

  // @@protoc_insertion_point(class_scope:Battlenet.game_utilities.GetAchievementsFileResponse)
 private:
  inline void set_has_content_handle();
  inline void clear_has_content_handle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Battlenet::ContentHandle* content_handle_;
  friend void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetAchievementsFileResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetAllValuesForAttributeRequest : public ::google::protobuf::Message {
 public:
  GetAllValuesForAttributeRequest();
  virtual ~GetAllValuesForAttributeRequest();

  GetAllValuesForAttributeRequest(const GetAllValuesForAttributeRequest& from);

  inline GetAllValuesForAttributeRequest& operator=(const GetAllValuesForAttributeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAllValuesForAttributeRequest& default_instance();

  void Swap(GetAllValuesForAttributeRequest* other);

  // implements Message ----------------------------------------------

  GetAllValuesForAttributeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAllValuesForAttributeRequest& from);
  void MergeFrom(const GetAllValuesForAttributeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string attribute_key = 1;
  inline bool has_attribute_key() const;
  inline void clear_attribute_key();
  static const int kAttributeKeyFieldNumber = 1;
  inline const ::std::string& attribute_key() const;
  inline void set_attribute_key(const ::std::string& value);
  inline void set_attribute_key(const char* value);
  inline void set_attribute_key(const char* value, size_t size);
  inline ::std::string* mutable_attribute_key();
  inline ::std::string* release_attribute_key();
  inline void set_allocated_attribute_key(::std::string* attribute_key);

  // optional .Battlenet.EntityId agent_id = 2;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 2;
  inline const ::Battlenet::EntityId& agent_id() const;
  inline ::Battlenet::EntityId* mutable_agent_id();
  inline ::Battlenet::EntityId* release_agent_id();
  inline void set_allocated_agent_id(::Battlenet::EntityId* agent_id);

  // optional fixed32 program = 5;
  inline bool has_program() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 5;
  inline ::google::protobuf::uint32 program() const;
  inline void set_program(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Battlenet.game_utilities.GetAllValuesForAttributeRequest)
 private:
  inline void set_has_attribute_key();
  inline void clear_has_attribute_key();
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_program();
  inline void clear_has_program();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* attribute_key_;
  ::Battlenet::EntityId* agent_id_;
  ::google::protobuf::uint32 program_;
  friend void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetAllValuesForAttributeRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetAllValuesForAttributeResponse : public ::google::protobuf::Message {
 public:
  GetAllValuesForAttributeResponse();
  virtual ~GetAllValuesForAttributeResponse();

  GetAllValuesForAttributeResponse(const GetAllValuesForAttributeResponse& from);

  inline GetAllValuesForAttributeResponse& operator=(const GetAllValuesForAttributeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAllValuesForAttributeResponse& default_instance();

  void Swap(GetAllValuesForAttributeResponse* other);

  // implements Message ----------------------------------------------

  GetAllValuesForAttributeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAllValuesForAttributeResponse& from);
  void MergeFrom(const GetAllValuesForAttributeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Battlenet.Variant attribute_value = 1;
  inline int attribute_value_size() const;
  inline void clear_attribute_value();
  static const int kAttributeValueFieldNumber = 1;
  inline const ::Battlenet::Variant& attribute_value(int index) const;
  inline ::Battlenet::Variant* mutable_attribute_value(int index);
  inline ::Battlenet::Variant* add_attribute_value();
  inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Variant >&
      attribute_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Variant >*
      mutable_attribute_value();

  // @@protoc_insertion_point(class_scope:Battlenet.game_utilities.GetAllValuesForAttributeResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Battlenet::Variant > attribute_value_;
  friend void  protobuf_AddDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_AssignDesc_game_5futilities_5fservice_2eproto();
  friend void protobuf_ShutdownFile_game_5futilities_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetAllValuesForAttributeResponse* default_instance_;
};
// ===================================================================

class GameUtilitiesService_Stub;

class GameUtilitiesService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GameUtilitiesService() {};
 public:
  virtual ~GameUtilitiesService();

  typedef GameUtilitiesService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void ProcessClientRequest(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::ClientRequest* request,
                       ::Battlenet::game_utilities::ClientResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void PresenceChannelCreated(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::PresenceChannelCreatedRequest* request,
                       ::Battlenet::NoData* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPlayerVariables(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::GetPlayerVariablesRequest* request,
                       ::Battlenet::game_utilities::GetPlayerVariablesResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ProcessServerRequest(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::ServerRequest* request,
                       ::Battlenet::game_utilities::ServerResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void OnGameAccountOnline(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::GameAccountOnlineNotification* request,
                       ::Battlenet::NO_RESPONSE* response,
                       ::google::protobuf::Closure* done);
  virtual void OnGameAccountOffline(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::GameAccountOfflineNotification* request,
                       ::Battlenet::NO_RESPONSE* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAchievementsFile(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::GetAchievementsFileRequest* request,
                       ::Battlenet::game_utilities::GetAchievementsFileResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAllValuesForAttribute(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::GetAllValuesForAttributeRequest* request,
                       ::Battlenet::game_utilities::GetAllValuesForAttributeResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameUtilitiesService);
};

class GameUtilitiesService_Stub : public GameUtilitiesService {
 public:
  GameUtilitiesService_Stub(::google::protobuf::RpcChannel* channel);
  GameUtilitiesService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~GameUtilitiesService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements GameUtilitiesService ------------------------------------------

  void ProcessClientRequest(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::ClientRequest* request,
                       ::Battlenet::game_utilities::ClientResponse* response,
                       ::google::protobuf::Closure* done);
  void PresenceChannelCreated(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::PresenceChannelCreatedRequest* request,
                       ::Battlenet::NoData* response,
                       ::google::protobuf::Closure* done);
  void GetPlayerVariables(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::GetPlayerVariablesRequest* request,
                       ::Battlenet::game_utilities::GetPlayerVariablesResponse* response,
                       ::google::protobuf::Closure* done);
  void ProcessServerRequest(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::ServerRequest* request,
                       ::Battlenet::game_utilities::ServerResponse* response,
                       ::google::protobuf::Closure* done);
  void OnGameAccountOnline(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::GameAccountOnlineNotification* request,
                       ::Battlenet::NO_RESPONSE* response,
                       ::google::protobuf::Closure* done);
  void OnGameAccountOffline(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::GameAccountOfflineNotification* request,
                       ::Battlenet::NO_RESPONSE* response,
                       ::google::protobuf::Closure* done);
  void GetAchievementsFile(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::GetAchievementsFileRequest* request,
                       ::Battlenet::game_utilities::GetAchievementsFileResponse* response,
                       ::google::protobuf::Closure* done);
  void GetAllValuesForAttribute(::google::protobuf::RpcController* controller,
                       const ::Battlenet::game_utilities::GetAllValuesForAttributeRequest* request,
                       ::Battlenet::game_utilities::GetAllValuesForAttributeResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameUtilitiesService_Stub);
};


// ===================================================================


// ===================================================================

// ClientRequest

// repeated .Battlenet.Attribute attribute = 1;
inline int ClientRequest::attribute_size() const {
  return attribute_.size();
}
inline void ClientRequest::clear_attribute() {
  attribute_.Clear();
}
inline const ::Battlenet::Attribute& ClientRequest::attribute(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.ClientRequest.attribute)
  return attribute_.Get(index);
}
inline ::Battlenet::Attribute* ClientRequest::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.ClientRequest.attribute)
  return attribute_.Mutable(index);
}
inline ::Battlenet::Attribute* ClientRequest::add_attribute() {
  // @@protoc_insertion_point(field_add:Battlenet.game_utilities.ClientRequest.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >&
ClientRequest::attribute() const {
  // @@protoc_insertion_point(field_list:Battlenet.game_utilities.ClientRequest.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >*
ClientRequest::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.game_utilities.ClientRequest.attribute)
  return &attribute_;
}

// optional .Battlenet.ProcessId host = 2;
inline bool ClientRequest::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientRequest::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientRequest::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientRequest::clear_host() {
  if (host_ != NULL) host_->::Battlenet::ProcessId::Clear();
  clear_has_host();
}
inline const ::Battlenet::ProcessId& ClientRequest::host() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.ClientRequest.host)
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::Battlenet::ProcessId* ClientRequest::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::Battlenet::ProcessId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.ClientRequest.host)
  return host_;
}
inline ::Battlenet::ProcessId* ClientRequest::release_host() {
  clear_has_host();
  ::Battlenet::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_host(::Battlenet::ProcessId* host) {
  delete host_;
  host_ = host;
  if (host) {
    set_has_host();
  } else {
    clear_has_host();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.ClientRequest.host)
}

// optional .Battlenet.EntityId account_id = 3;
inline bool ClientRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientRequest::clear_account_id() {
  if (account_id_ != NULL) account_id_->::Battlenet::EntityId::Clear();
  clear_has_account_id();
}
inline const ::Battlenet::EntityId& ClientRequest::account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.ClientRequest.account_id)
  return account_id_ != NULL ? *account_id_ : *default_instance_->account_id_;
}
inline ::Battlenet::EntityId* ClientRequest::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == NULL) account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.ClientRequest.account_id)
  return account_id_;
}
inline ::Battlenet::EntityId* ClientRequest::release_account_id() {
  clear_has_account_id();
  ::Battlenet::EntityId* temp = account_id_;
  account_id_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_account_id(::Battlenet::EntityId* account_id) {
  delete account_id_;
  account_id_ = account_id;
  if (account_id) {
    set_has_account_id();
  } else {
    clear_has_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.ClientRequest.account_id)
}

// optional .Battlenet.EntityId game_account_id = 4;
inline bool ClientRequest::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientRequest::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientRequest::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientRequest::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::Battlenet::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::Battlenet::EntityId& ClientRequest::game_account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.ClientRequest.game_account_id)
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::Battlenet::EntityId* ClientRequest::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.ClientRequest.game_account_id)
  return game_account_id_;
}
inline ::Battlenet::EntityId* ClientRequest::release_game_account_id() {
  clear_has_game_account_id();
  ::Battlenet::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_game_account_id(::Battlenet::EntityId* game_account_id) {
  delete game_account_id_;
  game_account_id_ = game_account_id;
  if (game_account_id) {
    set_has_game_account_id();
  } else {
    clear_has_game_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.ClientRequest.game_account_id)
}

// optional fixed32 program = 5;
inline bool ClientRequest::has_program() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientRequest::set_has_program() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientRequest::clear_has_program() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientRequest::clear_program() {
  program_ = 0u;
  clear_has_program();
}
inline ::google::protobuf::uint32 ClientRequest::program() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.ClientRequest.program)
  return program_;
}
inline void ClientRequest::set_program(::google::protobuf::uint32 value) {
  set_has_program();
  program_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.game_utilities.ClientRequest.program)
}

// optional .Battlenet.game_utilities.ClientInfo client_info = 6;
inline bool ClientRequest::has_client_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientRequest::set_has_client_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientRequest::clear_has_client_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientRequest::clear_client_info() {
  if (client_info_ != NULL) client_info_->::Battlenet::game_utilities::ClientInfo::Clear();
  clear_has_client_info();
}
inline const ::Battlenet::game_utilities::ClientInfo& ClientRequest::client_info() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.ClientRequest.client_info)
  return client_info_ != NULL ? *client_info_ : *default_instance_->client_info_;
}
inline ::Battlenet::game_utilities::ClientInfo* ClientRequest::mutable_client_info() {
  set_has_client_info();
  if (client_info_ == NULL) client_info_ = new ::Battlenet::game_utilities::ClientInfo;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.ClientRequest.client_info)
  return client_info_;
}
inline ::Battlenet::game_utilities::ClientInfo* ClientRequest::release_client_info() {
  clear_has_client_info();
  ::Battlenet::game_utilities::ClientInfo* temp = client_info_;
  client_info_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_client_info(::Battlenet::game_utilities::ClientInfo* client_info) {
  delete client_info_;
  client_info_ = client_info;
  if (client_info) {
    set_has_client_info();
  } else {
    clear_has_client_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.ClientRequest.client_info)
}

// -------------------------------------------------------------------

// ClientResponse

// repeated .Battlenet.Attribute attribute = 1;
inline int ClientResponse::attribute_size() const {
  return attribute_.size();
}
inline void ClientResponse::clear_attribute() {
  attribute_.Clear();
}
inline const ::Battlenet::Attribute& ClientResponse::attribute(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.ClientResponse.attribute)
  return attribute_.Get(index);
}
inline ::Battlenet::Attribute* ClientResponse::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.ClientResponse.attribute)
  return attribute_.Mutable(index);
}
inline ::Battlenet::Attribute* ClientResponse::add_attribute() {
  // @@protoc_insertion_point(field_add:Battlenet.game_utilities.ClientResponse.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >&
ClientResponse::attribute() const {
  // @@protoc_insertion_point(field_list:Battlenet.game_utilities.ClientResponse.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >*
ClientResponse::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.game_utilities.ClientResponse.attribute)
  return &attribute_;
}

// -------------------------------------------------------------------

// ServerRequest

// repeated .Battlenet.Attribute attribute = 1;
inline int ServerRequest::attribute_size() const {
  return attribute_.size();
}
inline void ServerRequest::clear_attribute() {
  attribute_.Clear();
}
inline const ::Battlenet::Attribute& ServerRequest::attribute(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.ServerRequest.attribute)
  return attribute_.Get(index);
}
inline ::Battlenet::Attribute* ServerRequest::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.ServerRequest.attribute)
  return attribute_.Mutable(index);
}
inline ::Battlenet::Attribute* ServerRequest::add_attribute() {
  // @@protoc_insertion_point(field_add:Battlenet.game_utilities.ServerRequest.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >&
ServerRequest::attribute() const {
  // @@protoc_insertion_point(field_list:Battlenet.game_utilities.ServerRequest.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >*
ServerRequest::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.game_utilities.ServerRequest.attribute)
  return &attribute_;
}

// required fixed32 program = 2;
inline bool ServerRequest::has_program() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerRequest::set_has_program() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerRequest::clear_has_program() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerRequest::clear_program() {
  program_ = 0u;
  clear_has_program();
}
inline ::google::protobuf::uint32 ServerRequest::program() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.ServerRequest.program)
  return program_;
}
inline void ServerRequest::set_program(::google::protobuf::uint32 value) {
  set_has_program();
  program_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.game_utilities.ServerRequest.program)
}

// optional .Battlenet.ProcessId host = 3;
inline bool ServerRequest::has_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerRequest::set_has_host() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerRequest::clear_has_host() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerRequest::clear_host() {
  if (host_ != NULL) host_->::Battlenet::ProcessId::Clear();
  clear_has_host();
}
inline const ::Battlenet::ProcessId& ServerRequest::host() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.ServerRequest.host)
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::Battlenet::ProcessId* ServerRequest::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::Battlenet::ProcessId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.ServerRequest.host)
  return host_;
}
inline ::Battlenet::ProcessId* ServerRequest::release_host() {
  clear_has_host();
  ::Battlenet::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}
inline void ServerRequest::set_allocated_host(::Battlenet::ProcessId* host) {
  delete host_;
  host_ = host;
  if (host) {
    set_has_host();
  } else {
    clear_has_host();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.ServerRequest.host)
}

// -------------------------------------------------------------------

// ServerResponse

// repeated .Battlenet.Attribute attribute = 1;
inline int ServerResponse::attribute_size() const {
  return attribute_.size();
}
inline void ServerResponse::clear_attribute() {
  attribute_.Clear();
}
inline const ::Battlenet::Attribute& ServerResponse::attribute(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.ServerResponse.attribute)
  return attribute_.Get(index);
}
inline ::Battlenet::Attribute* ServerResponse::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.ServerResponse.attribute)
  return attribute_.Mutable(index);
}
inline ::Battlenet::Attribute* ServerResponse::add_attribute() {
  // @@protoc_insertion_point(field_add:Battlenet.game_utilities.ServerResponse.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >&
ServerResponse::attribute() const {
  // @@protoc_insertion_point(field_list:Battlenet.game_utilities.ServerResponse.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Attribute >*
ServerResponse::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.game_utilities.ServerResponse.attribute)
  return &attribute_;
}

// -------------------------------------------------------------------

// PresenceChannelCreatedRequest

// required .Battlenet.EntityId id = 1;
inline bool PresenceChannelCreatedRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PresenceChannelCreatedRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PresenceChannelCreatedRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PresenceChannelCreatedRequest::clear_id() {
  if (id_ != NULL) id_->::Battlenet::EntityId::Clear();
  clear_has_id();
}
inline const ::Battlenet::EntityId& PresenceChannelCreatedRequest::id() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.PresenceChannelCreatedRequest.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::Battlenet::EntityId* PresenceChannelCreatedRequest::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.PresenceChannelCreatedRequest.id)
  return id_;
}
inline ::Battlenet::EntityId* PresenceChannelCreatedRequest::release_id() {
  clear_has_id();
  ::Battlenet::EntityId* temp = id_;
  id_ = NULL;
  return temp;
}
inline void PresenceChannelCreatedRequest::set_allocated_id(::Battlenet::EntityId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.PresenceChannelCreatedRequest.id)
}

// optional .Battlenet.EntityId game_account_id = 3;
inline bool PresenceChannelCreatedRequest::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PresenceChannelCreatedRequest::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PresenceChannelCreatedRequest::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PresenceChannelCreatedRequest::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::Battlenet::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::Battlenet::EntityId& PresenceChannelCreatedRequest::game_account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.PresenceChannelCreatedRequest.game_account_id)
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::Battlenet::EntityId* PresenceChannelCreatedRequest::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.PresenceChannelCreatedRequest.game_account_id)
  return game_account_id_;
}
inline ::Battlenet::EntityId* PresenceChannelCreatedRequest::release_game_account_id() {
  clear_has_game_account_id();
  ::Battlenet::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}
inline void PresenceChannelCreatedRequest::set_allocated_game_account_id(::Battlenet::EntityId* game_account_id) {
  delete game_account_id_;
  game_account_id_ = game_account_id;
  if (game_account_id) {
    set_has_game_account_id();
  } else {
    clear_has_game_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.PresenceChannelCreatedRequest.game_account_id)
}

// optional .Battlenet.EntityId account_id = 4;
inline bool PresenceChannelCreatedRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PresenceChannelCreatedRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PresenceChannelCreatedRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PresenceChannelCreatedRequest::clear_account_id() {
  if (account_id_ != NULL) account_id_->::Battlenet::EntityId::Clear();
  clear_has_account_id();
}
inline const ::Battlenet::EntityId& PresenceChannelCreatedRequest::account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.PresenceChannelCreatedRequest.account_id)
  return account_id_ != NULL ? *account_id_ : *default_instance_->account_id_;
}
inline ::Battlenet::EntityId* PresenceChannelCreatedRequest::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == NULL) account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.PresenceChannelCreatedRequest.account_id)
  return account_id_;
}
inline ::Battlenet::EntityId* PresenceChannelCreatedRequest::release_account_id() {
  clear_has_account_id();
  ::Battlenet::EntityId* temp = account_id_;
  account_id_ = NULL;
  return temp;
}
inline void PresenceChannelCreatedRequest::set_allocated_account_id(::Battlenet::EntityId* account_id) {
  delete account_id_;
  account_id_ = account_id;
  if (account_id) {
    set_has_account_id();
  } else {
    clear_has_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.PresenceChannelCreatedRequest.account_id)
}

// optional .Battlenet.ProcessId host = 5;
inline bool PresenceChannelCreatedRequest::has_host() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PresenceChannelCreatedRequest::set_has_host() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PresenceChannelCreatedRequest::clear_has_host() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PresenceChannelCreatedRequest::clear_host() {
  if (host_ != NULL) host_->::Battlenet::ProcessId::Clear();
  clear_has_host();
}
inline const ::Battlenet::ProcessId& PresenceChannelCreatedRequest::host() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.PresenceChannelCreatedRequest.host)
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::Battlenet::ProcessId* PresenceChannelCreatedRequest::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::Battlenet::ProcessId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.PresenceChannelCreatedRequest.host)
  return host_;
}
inline ::Battlenet::ProcessId* PresenceChannelCreatedRequest::release_host() {
  clear_has_host();
  ::Battlenet::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}
inline void PresenceChannelCreatedRequest::set_allocated_host(::Battlenet::ProcessId* host) {
  delete host_;
  host_ = host;
  if (host) {
    set_has_host();
  } else {
    clear_has_host();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.PresenceChannelCreatedRequest.host)
}

// -------------------------------------------------------------------

// GetPlayerVariablesRequest

// repeated .Battlenet.game_utilities.PlayerVariables player_variables = 1;
inline int GetPlayerVariablesRequest::player_variables_size() const {
  return player_variables_.size();
}
inline void GetPlayerVariablesRequest::clear_player_variables() {
  player_variables_.Clear();
}
inline const ::Battlenet::game_utilities::PlayerVariables& GetPlayerVariablesRequest::player_variables(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GetPlayerVariablesRequest.player_variables)
  return player_variables_.Get(index);
}
inline ::Battlenet::game_utilities::PlayerVariables* GetPlayerVariablesRequest::mutable_player_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GetPlayerVariablesRequest.player_variables)
  return player_variables_.Mutable(index);
}
inline ::Battlenet::game_utilities::PlayerVariables* GetPlayerVariablesRequest::add_player_variables() {
  // @@protoc_insertion_point(field_add:Battlenet.game_utilities.GetPlayerVariablesRequest.player_variables)
  return player_variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::game_utilities::PlayerVariables >&
GetPlayerVariablesRequest::player_variables() const {
  // @@protoc_insertion_point(field_list:Battlenet.game_utilities.GetPlayerVariablesRequest.player_variables)
  return player_variables_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::game_utilities::PlayerVariables >*
GetPlayerVariablesRequest::mutable_player_variables() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.game_utilities.GetPlayerVariablesRequest.player_variables)
  return &player_variables_;
}

// optional .Battlenet.ProcessId host = 2;
inline bool GetPlayerVariablesRequest::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPlayerVariablesRequest::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPlayerVariablesRequest::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPlayerVariablesRequest::clear_host() {
  if (host_ != NULL) host_->::Battlenet::ProcessId::Clear();
  clear_has_host();
}
inline const ::Battlenet::ProcessId& GetPlayerVariablesRequest::host() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GetPlayerVariablesRequest.host)
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::Battlenet::ProcessId* GetPlayerVariablesRequest::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::Battlenet::ProcessId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GetPlayerVariablesRequest.host)
  return host_;
}
inline ::Battlenet::ProcessId* GetPlayerVariablesRequest::release_host() {
  clear_has_host();
  ::Battlenet::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}
inline void GetPlayerVariablesRequest::set_allocated_host(::Battlenet::ProcessId* host) {
  delete host_;
  host_ = host;
  if (host) {
    set_has_host();
  } else {
    clear_has_host();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.GetPlayerVariablesRequest.host)
}

// -------------------------------------------------------------------

// GetPlayerVariablesResponse

// repeated .Battlenet.game_utilities.PlayerVariables player_variables = 1;
inline int GetPlayerVariablesResponse::player_variables_size() const {
  return player_variables_.size();
}
inline void GetPlayerVariablesResponse::clear_player_variables() {
  player_variables_.Clear();
}
inline const ::Battlenet::game_utilities::PlayerVariables& GetPlayerVariablesResponse::player_variables(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GetPlayerVariablesResponse.player_variables)
  return player_variables_.Get(index);
}
inline ::Battlenet::game_utilities::PlayerVariables* GetPlayerVariablesResponse::mutable_player_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GetPlayerVariablesResponse.player_variables)
  return player_variables_.Mutable(index);
}
inline ::Battlenet::game_utilities::PlayerVariables* GetPlayerVariablesResponse::add_player_variables() {
  // @@protoc_insertion_point(field_add:Battlenet.game_utilities.GetPlayerVariablesResponse.player_variables)
  return player_variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::game_utilities::PlayerVariables >&
GetPlayerVariablesResponse::player_variables() const {
  // @@protoc_insertion_point(field_list:Battlenet.game_utilities.GetPlayerVariablesResponse.player_variables)
  return player_variables_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::game_utilities::PlayerVariables >*
GetPlayerVariablesResponse::mutable_player_variables() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.game_utilities.GetPlayerVariablesResponse.player_variables)
  return &player_variables_;
}

// -------------------------------------------------------------------

// GameAccountOnlineNotification

// required .Battlenet.EntityId game_account_id = 1;
inline bool GameAccountOnlineNotification::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameAccountOnlineNotification::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameAccountOnlineNotification::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameAccountOnlineNotification::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::Battlenet::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::Battlenet::EntityId& GameAccountOnlineNotification::game_account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GameAccountOnlineNotification.game_account_id)
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::Battlenet::EntityId* GameAccountOnlineNotification::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GameAccountOnlineNotification.game_account_id)
  return game_account_id_;
}
inline ::Battlenet::EntityId* GameAccountOnlineNotification::release_game_account_id() {
  clear_has_game_account_id();
  ::Battlenet::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}
inline void GameAccountOnlineNotification::set_allocated_game_account_id(::Battlenet::EntityId* game_account_id) {
  delete game_account_id_;
  game_account_id_ = game_account_id;
  if (game_account_id) {
    set_has_game_account_id();
  } else {
    clear_has_game_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.GameAccountOnlineNotification.game_account_id)
}

// optional .Battlenet.ProcessId host = 2;
inline bool GameAccountOnlineNotification::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameAccountOnlineNotification::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameAccountOnlineNotification::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameAccountOnlineNotification::clear_host() {
  if (host_ != NULL) host_->::Battlenet::ProcessId::Clear();
  clear_has_host();
}
inline const ::Battlenet::ProcessId& GameAccountOnlineNotification::host() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GameAccountOnlineNotification.host)
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::Battlenet::ProcessId* GameAccountOnlineNotification::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::Battlenet::ProcessId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GameAccountOnlineNotification.host)
  return host_;
}
inline ::Battlenet::ProcessId* GameAccountOnlineNotification::release_host() {
  clear_has_host();
  ::Battlenet::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}
inline void GameAccountOnlineNotification::set_allocated_host(::Battlenet::ProcessId* host) {
  delete host_;
  host_ = host;
  if (host) {
    set_has_host();
  } else {
    clear_has_host();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.GameAccountOnlineNotification.host)
}

// optional string session_id = 3;
inline bool GameAccountOnlineNotification::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameAccountOnlineNotification::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameAccountOnlineNotification::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameAccountOnlineNotification::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& GameAccountOnlineNotification::session_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GameAccountOnlineNotification.session_id)
  return *session_id_;
}
inline void GameAccountOnlineNotification::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set:Battlenet.game_utilities.GameAccountOnlineNotification.session_id)
}
inline void GameAccountOnlineNotification::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Battlenet.game_utilities.GameAccountOnlineNotification.session_id)
}
inline void GameAccountOnlineNotification::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Battlenet.game_utilities.GameAccountOnlineNotification.session_id)
}
inline ::std::string* GameAccountOnlineNotification::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GameAccountOnlineNotification.session_id)
  return session_id_;
}
inline ::std::string* GameAccountOnlineNotification::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameAccountOnlineNotification::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.GameAccountOnlineNotification.session_id)
}

// -------------------------------------------------------------------

// GameAccountOfflineNotification

// required .Battlenet.EntityId game_account_id = 1;
inline bool GameAccountOfflineNotification::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameAccountOfflineNotification::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameAccountOfflineNotification::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameAccountOfflineNotification::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::Battlenet::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::Battlenet::EntityId& GameAccountOfflineNotification::game_account_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GameAccountOfflineNotification.game_account_id)
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::Battlenet::EntityId* GameAccountOfflineNotification::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GameAccountOfflineNotification.game_account_id)
  return game_account_id_;
}
inline ::Battlenet::EntityId* GameAccountOfflineNotification::release_game_account_id() {
  clear_has_game_account_id();
  ::Battlenet::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}
inline void GameAccountOfflineNotification::set_allocated_game_account_id(::Battlenet::EntityId* game_account_id) {
  delete game_account_id_;
  game_account_id_ = game_account_id;
  if (game_account_id) {
    set_has_game_account_id();
  } else {
    clear_has_game_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.GameAccountOfflineNotification.game_account_id)
}

// optional .Battlenet.ProcessId host = 2;
inline bool GameAccountOfflineNotification::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameAccountOfflineNotification::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameAccountOfflineNotification::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameAccountOfflineNotification::clear_host() {
  if (host_ != NULL) host_->::Battlenet::ProcessId::Clear();
  clear_has_host();
}
inline const ::Battlenet::ProcessId& GameAccountOfflineNotification::host() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GameAccountOfflineNotification.host)
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::Battlenet::ProcessId* GameAccountOfflineNotification::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::Battlenet::ProcessId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GameAccountOfflineNotification.host)
  return host_;
}
inline ::Battlenet::ProcessId* GameAccountOfflineNotification::release_host() {
  clear_has_host();
  ::Battlenet::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}
inline void GameAccountOfflineNotification::set_allocated_host(::Battlenet::ProcessId* host) {
  delete host_;
  host_ = host;
  if (host) {
    set_has_host();
  } else {
    clear_has_host();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.GameAccountOfflineNotification.host)
}

// optional string session_id = 3;
inline bool GameAccountOfflineNotification::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameAccountOfflineNotification::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameAccountOfflineNotification::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameAccountOfflineNotification::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& GameAccountOfflineNotification::session_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GameAccountOfflineNotification.session_id)
  return *session_id_;
}
inline void GameAccountOfflineNotification::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set:Battlenet.game_utilities.GameAccountOfflineNotification.session_id)
}
inline void GameAccountOfflineNotification::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Battlenet.game_utilities.GameAccountOfflineNotification.session_id)
}
inline void GameAccountOfflineNotification::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Battlenet.game_utilities.GameAccountOfflineNotification.session_id)
}
inline ::std::string* GameAccountOfflineNotification::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GameAccountOfflineNotification.session_id)
  return session_id_;
}
inline ::std::string* GameAccountOfflineNotification::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameAccountOfflineNotification::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.GameAccountOfflineNotification.session_id)
}

// -------------------------------------------------------------------

// GetAchievementsFileRequest

// optional .Battlenet.ProcessId host = 1;
inline bool GetAchievementsFileRequest::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAchievementsFileRequest::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAchievementsFileRequest::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAchievementsFileRequest::clear_host() {
  if (host_ != NULL) host_->::Battlenet::ProcessId::Clear();
  clear_has_host();
}
inline const ::Battlenet::ProcessId& GetAchievementsFileRequest::host() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GetAchievementsFileRequest.host)
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::Battlenet::ProcessId* GetAchievementsFileRequest::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::Battlenet::ProcessId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GetAchievementsFileRequest.host)
  return host_;
}
inline ::Battlenet::ProcessId* GetAchievementsFileRequest::release_host() {
  clear_has_host();
  ::Battlenet::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}
inline void GetAchievementsFileRequest::set_allocated_host(::Battlenet::ProcessId* host) {
  delete host_;
  host_ = host;
  if (host) {
    set_has_host();
  } else {
    clear_has_host();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.GetAchievementsFileRequest.host)
}

// -------------------------------------------------------------------

// GetAchievementsFileResponse

// optional .Battlenet.ContentHandle content_handle = 1;
inline bool GetAchievementsFileResponse::has_content_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAchievementsFileResponse::set_has_content_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAchievementsFileResponse::clear_has_content_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAchievementsFileResponse::clear_content_handle() {
  if (content_handle_ != NULL) content_handle_->::Battlenet::ContentHandle::Clear();
  clear_has_content_handle();
}
inline const ::Battlenet::ContentHandle& GetAchievementsFileResponse::content_handle() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GetAchievementsFileResponse.content_handle)
  return content_handle_ != NULL ? *content_handle_ : *default_instance_->content_handle_;
}
inline ::Battlenet::ContentHandle* GetAchievementsFileResponse::mutable_content_handle() {
  set_has_content_handle();
  if (content_handle_ == NULL) content_handle_ = new ::Battlenet::ContentHandle;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GetAchievementsFileResponse.content_handle)
  return content_handle_;
}
inline ::Battlenet::ContentHandle* GetAchievementsFileResponse::release_content_handle() {
  clear_has_content_handle();
  ::Battlenet::ContentHandle* temp = content_handle_;
  content_handle_ = NULL;
  return temp;
}
inline void GetAchievementsFileResponse::set_allocated_content_handle(::Battlenet::ContentHandle* content_handle) {
  delete content_handle_;
  content_handle_ = content_handle;
  if (content_handle) {
    set_has_content_handle();
  } else {
    clear_has_content_handle();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.GetAchievementsFileResponse.content_handle)
}

// -------------------------------------------------------------------

// GetAllValuesForAttributeRequest

// optional string attribute_key = 1;
inline bool GetAllValuesForAttributeRequest::has_attribute_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAllValuesForAttributeRequest::set_has_attribute_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAllValuesForAttributeRequest::clear_has_attribute_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAllValuesForAttributeRequest::clear_attribute_key() {
  if (attribute_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attribute_key_->clear();
  }
  clear_has_attribute_key();
}
inline const ::std::string& GetAllValuesForAttributeRequest::attribute_key() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GetAllValuesForAttributeRequest.attribute_key)
  return *attribute_key_;
}
inline void GetAllValuesForAttributeRequest::set_attribute_key(const ::std::string& value) {
  set_has_attribute_key();
  if (attribute_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attribute_key_ = new ::std::string;
  }
  attribute_key_->assign(value);
  // @@protoc_insertion_point(field_set:Battlenet.game_utilities.GetAllValuesForAttributeRequest.attribute_key)
}
inline void GetAllValuesForAttributeRequest::set_attribute_key(const char* value) {
  set_has_attribute_key();
  if (attribute_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attribute_key_ = new ::std::string;
  }
  attribute_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:Battlenet.game_utilities.GetAllValuesForAttributeRequest.attribute_key)
}
inline void GetAllValuesForAttributeRequest::set_attribute_key(const char* value, size_t size) {
  set_has_attribute_key();
  if (attribute_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attribute_key_ = new ::std::string;
  }
  attribute_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Battlenet.game_utilities.GetAllValuesForAttributeRequest.attribute_key)
}
inline ::std::string* GetAllValuesForAttributeRequest::mutable_attribute_key() {
  set_has_attribute_key();
  if (attribute_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attribute_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GetAllValuesForAttributeRequest.attribute_key)
  return attribute_key_;
}
inline ::std::string* GetAllValuesForAttributeRequest::release_attribute_key() {
  clear_has_attribute_key();
  if (attribute_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attribute_key_;
    attribute_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetAllValuesForAttributeRequest::set_allocated_attribute_key(::std::string* attribute_key) {
  if (attribute_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attribute_key_;
  }
  if (attribute_key) {
    set_has_attribute_key();
    attribute_key_ = attribute_key;
  } else {
    clear_has_attribute_key();
    attribute_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.GetAllValuesForAttributeRequest.attribute_key)
}

// optional .Battlenet.EntityId agent_id = 2;
inline bool GetAllValuesForAttributeRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAllValuesForAttributeRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAllValuesForAttributeRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAllValuesForAttributeRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::Battlenet::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::Battlenet::EntityId& GetAllValuesForAttributeRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GetAllValuesForAttributeRequest.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::Battlenet::EntityId* GetAllValuesForAttributeRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::Battlenet::EntityId;
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GetAllValuesForAttributeRequest.agent_id)
  return agent_id_;
}
inline ::Battlenet::EntityId* GetAllValuesForAttributeRequest::release_agent_id() {
  clear_has_agent_id();
  ::Battlenet::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void GetAllValuesForAttributeRequest::set_allocated_agent_id(::Battlenet::EntityId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Battlenet.game_utilities.GetAllValuesForAttributeRequest.agent_id)
}

// optional fixed32 program = 5;
inline bool GetAllValuesForAttributeRequest::has_program() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAllValuesForAttributeRequest::set_has_program() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAllValuesForAttributeRequest::clear_has_program() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAllValuesForAttributeRequest::clear_program() {
  program_ = 0u;
  clear_has_program();
}
inline ::google::protobuf::uint32 GetAllValuesForAttributeRequest::program() const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GetAllValuesForAttributeRequest.program)
  return program_;
}
inline void GetAllValuesForAttributeRequest::set_program(::google::protobuf::uint32 value) {
  set_has_program();
  program_ = value;
  // @@protoc_insertion_point(field_set:Battlenet.game_utilities.GetAllValuesForAttributeRequest.program)
}

// -------------------------------------------------------------------

// GetAllValuesForAttributeResponse

// repeated .Battlenet.Variant attribute_value = 1;
inline int GetAllValuesForAttributeResponse::attribute_value_size() const {
  return attribute_value_.size();
}
inline void GetAllValuesForAttributeResponse::clear_attribute_value() {
  attribute_value_.Clear();
}
inline const ::Battlenet::Variant& GetAllValuesForAttributeResponse::attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:Battlenet.game_utilities.GetAllValuesForAttributeResponse.attribute_value)
  return attribute_value_.Get(index);
}
inline ::Battlenet::Variant* GetAllValuesForAttributeResponse::mutable_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:Battlenet.game_utilities.GetAllValuesForAttributeResponse.attribute_value)
  return attribute_value_.Mutable(index);
}
inline ::Battlenet::Variant* GetAllValuesForAttributeResponse::add_attribute_value() {
  // @@protoc_insertion_point(field_add:Battlenet.game_utilities.GetAllValuesForAttributeResponse.attribute_value)
  return attribute_value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Battlenet::Variant >&
GetAllValuesForAttributeResponse::attribute_value() const {
  // @@protoc_insertion_point(field_list:Battlenet.game_utilities.GetAllValuesForAttributeResponse.attribute_value)
  return attribute_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::Battlenet::Variant >*
GetAllValuesForAttributeResponse::mutable_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:Battlenet.game_utilities.GetAllValuesForAttributeResponse.attribute_value)
  return &attribute_value_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_utilities
}  // namespace Battlenet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5futilities_5fservice_2eproto__INCLUDED
