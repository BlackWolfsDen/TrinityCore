// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "channel_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace channel {

namespace {

const ::google::protobuf::Descriptor* ChannelId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelId_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListChannelsOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListChannelsOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChannelState_PrivacyLevel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MemberState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Member_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_channel_5ftypes_2eproto() {
  protobuf_AddDesc_channel_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "channel_types.proto");
  GOOGLE_CHECK(file != NULL);
  ChannelId_descriptor_ = file->message_type(0);
  static const int ChannelId_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelId, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelId, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelId, id_),
  };
  ChannelId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelId_descriptor_,
      ChannelId::default_instance_,
      ChannelId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelId));
  Message_descriptor_ = file->message_type(1);
  static const int Message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, role_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  ListChannelsOptions_descriptor_ = file->message_type(2);
  static const int ListChannelsOptions_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChannelsOptions, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChannelsOptions, max_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChannelsOptions, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChannelsOptions, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChannelsOptions, locale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChannelsOptions, capacity_full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChannelsOptions, attribute_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChannelsOptions, channel_type_),
  };
  ListChannelsOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListChannelsOptions_descriptor_,
      ListChannelsOptions::default_instance_,
      ListChannelsOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChannelsOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChannelsOptions, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListChannelsOptions, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListChannelsOptions));
  ChannelDescription_descriptor_ = file->message_type(3);
  static const int ChannelDescription_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDescription, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDescription, current_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDescription, state_),
  };
  ChannelDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelDescription_descriptor_,
      ChannelDescription::default_instance_,
      ChannelDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelDescription));
  ChannelInfo_descriptor_ = file->message_type(4);
  static const int ChannelInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, member_),
  };
  ChannelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelInfo_descriptor_,
      ChannelInfo::default_instance_,
      ChannelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelInfo));
  ChannelState_descriptor_ = file->message_type(5);
  static const int ChannelState_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, max_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, min_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, invitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, max_invitations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, privacy_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, delegate_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, channel_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, allow_offline_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, subscribe_to_presence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, destroy_on_founder_leave_),
  };
  ChannelState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelState_descriptor_,
      ChannelState::default_instance_,
      ChannelState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelState));
  ChannelState_PrivacyLevel_descriptor_ = ChannelState_descriptor_->enum_type(0);
  MemberState_descriptor_ = file->message_type(6);
  static const int MemberState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberState, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberState, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberState, privileges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberState, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberState, deprecated_hidden_),
  };
  MemberState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberState_descriptor_,
      MemberState::default_instance_,
      MemberState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberState, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberState, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberState));
  Member_descriptor_ = file->message_type(7);
  static const int Member_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, state_),
  };
  Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Member_descriptor_,
      Member::default_instance_,
      Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Member));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_channel_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelId_descriptor_, &ChannelId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListChannelsOptions_descriptor_, &ListChannelsOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelDescription_descriptor_, &ChannelDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelInfo_descriptor_, &ChannelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelState_descriptor_, &ChannelState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberState_descriptor_, &MemberState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Member_descriptor_, &Member::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_channel_5ftypes_2eproto() {
  delete ChannelId::default_instance_;
  delete ChannelId_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
  delete ListChannelsOptions::default_instance_;
  delete ListChannelsOptions_reflection_;
  delete ChannelDescription::default_instance_;
  delete ChannelDescription_reflection_;
  delete ChannelInfo::default_instance_;
  delete ChannelInfo_reflection_;
  delete ChannelState::default_instance_;
  delete ChannelState_reflection_;
  delete ChannelState::_default_channel_type_;
  delete MemberState::default_instance_;
  delete MemberState_reflection_;
  delete Member::default_instance_;
  delete Member_reflection_;
}

void protobuf_AddDesc_channel_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Battlenet::protobuf_AddDesc_attribute_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_entity_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_invitation_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023channel_types.proto\022\021Battlenet.channel"
    "\032\025attribute_types.proto\032\022entity_types.pr"
    "oto\032\026invitation_types.proto\032\017rpc_types.p"
    "roto\"I\n\tChannelId\022\014\n\004type\030\001 \001(\r\022\"\n\004host\030"
    "\002 \001(\0132\024.Battlenet.ProcessId\022\n\n\002id\030\003 \001(\007\""
    "G\n\007Message\022\'\n\tattribute\030\001 \003(\0132\024.Battlene"
    "t.Attribute\022\014\n\004role\030\002 \001(\r*\005\010d\020\220N\"\337\001\n\023Lis"
    "tChannelsOptions\022\026\n\013start_index\030\001 \001(\r:\0010"
    "\022\027\n\013max_results\030\002 \001(\r:\00216\022\014\n\004name\030\003 \001(\t\022"
    "\017\n\007program\030\004 \001(\007\022\016\n\006locale\030\005 \001(\007\022\025\n\rcapa"
    "city_full\030\006 \001(\r\0224\n\020attribute_filter\030\007 \002("
    "\0132\032.Battlenet.AttributeFilter\022\024\n\014channel"
    "_type\030\010 \001(\t*\005\010d\020\220N\"\206\001\n\022ChannelDescriptio"
    "n\022\'\n\nchannel_id\030\001 \002(\0132\023.Battlenet.Entity"
    "Id\022\027\n\017current_members\030\002 \001(\r\022.\n\005state\030\003 \001"
    "(\0132\037.Battlenet.channel.ChannelState\"{\n\013C"
    "hannelInfo\022:\n\013description\030\001 \002(\0132%.Battle"
    "net.channel.ChannelDescription\022)\n\006member"
    "\030\002 \003(\0132\031.Battlenet.channel.Member*\005\010d\020\220N"
    "\"\365\004\n\014ChannelState\022\023\n\013max_members\030\001 \001(\r\022\023"
    "\n\013min_members\030\002 \001(\r\022\'\n\tattribute\030\003 \003(\0132\024"
    ".Battlenet.Attribute\022)\n\ninvitation\030\004 \003(\013"
    "2\025.Battlenet.Invitation\022\027\n\017max_invitatio"
    "ns\030\005 \001(\r\022\016\n\006reason\030\006 \001(\r\022W\n\rprivacy_leve"
    "l\030\007 \001(\0162,.Battlenet.channel.ChannelState"
    ".PrivacyLevel:\022PRIVACY_LEVEL_OPEN\022\014\n\004nam"
    "e\030\010 \001(\t\022\025\n\rdelegate_name\030\t \001(\t\022\035\n\014channe"
    "l_type\030\n \001(\t:\007default\022\022\n\007program\030\013 \001(\007:\001"
    "0\022$\n\025allow_offline_members\030\014 \001(\010:\005false\022"
    "#\n\025subscribe_to_presence\030\r \001(\010:\004true\022\'\n\030"
    "destroy_on_founder_leave\030\016 \001(\010:\005false\"\221\001"
    "\n\014PrivacyLevel\022\026\n\022PRIVACY_LEVEL_OPEN\020\001\022,"
    "\n(PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIE"
    "ND\020\002\022!\n\035PRIVACY_LEVEL_OPEN_INVITATION\020\003\022"
    "\030\n\024PRIVACY_LEVEL_CLOSED\020\004*\005\010d\020\220N\"\262\001\n\013Mem"
    "berState\022\'\n\tattribute\030\001 \003(\0132\024.Battlenet."
    "Attribute\022\020\n\004role\030\002 \003(\rB\002\020\001\022\025\n\nprivilege"
    "s\030\003 \001(\004:\0010\022$\n\004info\030\004 \001(\0132\026.Battlenet.Acc"
    "ountInfo\022$\n\021DEPRECATED_hidden\030\005 \001(\010:\005fal"
    "seB\002\030\001*\005\010d\020\220N\"^\n\006Member\022%\n\010identity\030\001 \002("
    "\0132\023.Battlenet.Identity\022-\n\005state\030\002 \002(\0132\036."
    "Battlenet.channel.MemberStateB\002H\002", 1673);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "channel_types.proto", &protobuf_RegisterTypes);
  ChannelId::default_instance_ = new ChannelId();
  Message::default_instance_ = new Message();
  ListChannelsOptions::default_instance_ = new ListChannelsOptions();
  ChannelDescription::default_instance_ = new ChannelDescription();
  ChannelInfo::default_instance_ = new ChannelInfo();
  ChannelState::_default_channel_type_ =
      new ::std::string("default", 7);
  ChannelState::default_instance_ = new ChannelState();
  MemberState::default_instance_ = new MemberState();
  Member::default_instance_ = new Member();
  ChannelId::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ListChannelsOptions::default_instance_->InitAsDefaultInstance();
  ChannelDescription::default_instance_->InitAsDefaultInstance();
  ChannelInfo::default_instance_->InitAsDefaultInstance();
  ChannelState::default_instance_->InitAsDefaultInstance();
  MemberState::default_instance_->InitAsDefaultInstance();
  Member::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_channel_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_channel_5ftypes_2eproto {
  StaticDescriptorInitializer_channel_5ftypes_2eproto() {
    protobuf_AddDesc_channel_5ftypes_2eproto();
  }
} static_descriptor_initializer_channel_5ftypes_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChannelId::kTypeFieldNumber;
const int ChannelId::kHostFieldNumber;
const int ChannelId::kIdFieldNumber;
#endif  // !_MSC_VER

ChannelId::ChannelId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.ChannelId)
}

void ChannelId::InitAsDefaultInstance() {
  host_ = const_cast< ::Battlenet::ProcessId*>(&::Battlenet::ProcessId::default_instance());
}

ChannelId::ChannelId(const ChannelId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.ChannelId)
}

void ChannelId::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  host_ = NULL;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelId::~ChannelId() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.ChannelId)
  SharedDtor();
}

void ChannelId::SharedDtor() {
  if (this != default_instance_) {
    delete host_;
  }
}

void ChannelId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelId_descriptor_;
}

const ChannelId& ChannelId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5ftypes_2eproto();
  return *default_instance_;
}

ChannelId* ChannelId::default_instance_ = NULL;

ChannelId* ChannelId::New() const {
  return new ChannelId;
}

void ChannelId::Swap(ChannelId* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ChannelId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelId_descriptor_;
  metadata.reflection = ChannelId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kAttributeFieldNumber;
const int Message::kRoleFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.Message)
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  role_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5ftypes_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Swap(Message* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListChannelsOptions::kStartIndexFieldNumber;
const int ListChannelsOptions::kMaxResultsFieldNumber;
const int ListChannelsOptions::kNameFieldNumber;
const int ListChannelsOptions::kProgramFieldNumber;
const int ListChannelsOptions::kLocaleFieldNumber;
const int ListChannelsOptions::kCapacityFullFieldNumber;
const int ListChannelsOptions::kAttributeFilterFieldNumber;
const int ListChannelsOptions::kChannelTypeFieldNumber;
#endif  // !_MSC_VER

ListChannelsOptions::ListChannelsOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.ListChannelsOptions)
}

void ListChannelsOptions::InitAsDefaultInstance() {
  attribute_filter_ = const_cast< ::Battlenet::AttributeFilter*>(&::Battlenet::AttributeFilter::default_instance());
}

ListChannelsOptions::ListChannelsOptions(const ListChannelsOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.ListChannelsOptions)
}

void ListChannelsOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_index_ = 0u;
  max_results_ = 16u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  program_ = 0u;
  locale_ = 0u;
  capacity_full_ = 0u;
  attribute_filter_ = NULL;
  channel_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListChannelsOptions::~ListChannelsOptions() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.ListChannelsOptions)
  SharedDtor();
}

void ListChannelsOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (channel_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_type_;
  }
  if (this != default_instance_) {
    delete attribute_filter_;
  }
}

void ListChannelsOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListChannelsOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListChannelsOptions_descriptor_;
}

const ListChannelsOptions& ListChannelsOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5ftypes_2eproto();
  return *default_instance_;
}

ListChannelsOptions* ListChannelsOptions::default_instance_ = NULL;

ListChannelsOptions* ListChannelsOptions::New() const {
  return new ListChannelsOptions;
}

void ListChannelsOptions::Swap(ListChannelsOptions* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ListChannelsOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListChannelsOptions_descriptor_;
  metadata.reflection = ListChannelsOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChannelDescription::kChannelIdFieldNumber;
const int ChannelDescription::kCurrentMembersFieldNumber;
const int ChannelDescription::kStateFieldNumber;
#endif  // !_MSC_VER

ChannelDescription::ChannelDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.ChannelDescription)
}

void ChannelDescription::InitAsDefaultInstance() {
  channel_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  state_ = const_cast< ::Battlenet::channel::ChannelState*>(&::Battlenet::channel::ChannelState::default_instance());
}

ChannelDescription::ChannelDescription(const ChannelDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.ChannelDescription)
}

void ChannelDescription::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = NULL;
  current_members_ = 0u;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelDescription::~ChannelDescription() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.ChannelDescription)
  SharedDtor();
}

void ChannelDescription::SharedDtor() {
  if (this != default_instance_) {
    delete channel_id_;
    delete state_;
  }
}

void ChannelDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelDescription_descriptor_;
}

const ChannelDescription& ChannelDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5ftypes_2eproto();
  return *default_instance_;
}

ChannelDescription* ChannelDescription::default_instance_ = NULL;

ChannelDescription* ChannelDescription::New() const {
  return new ChannelDescription;
}

void ChannelDescription::Swap(ChannelDescription* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ChannelDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelDescription_descriptor_;
  metadata.reflection = ChannelDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChannelInfo::kDescriptionFieldNumber;
const int ChannelInfo::kMemberFieldNumber;
#endif  // !_MSC_VER

ChannelInfo::ChannelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.ChannelInfo)
}

void ChannelInfo::InitAsDefaultInstance() {
  description_ = const_cast< ::Battlenet::channel::ChannelDescription*>(&::Battlenet::channel::ChannelDescription::default_instance());
}

ChannelInfo::ChannelInfo(const ChannelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.ChannelInfo)
}

void ChannelInfo::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelInfo::~ChannelInfo() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.ChannelInfo)
  SharedDtor();
}

void ChannelInfo::SharedDtor() {
  if (this != default_instance_) {
    delete description_;
  }
}

void ChannelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelInfo_descriptor_;
}

const ChannelInfo& ChannelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5ftypes_2eproto();
  return *default_instance_;
}

ChannelInfo* ChannelInfo::default_instance_ = NULL;

ChannelInfo* ChannelInfo::New() const {
  return new ChannelInfo;
}

void ChannelInfo::Swap(ChannelInfo* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ChannelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelInfo_descriptor_;
  metadata.reflection = ChannelInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChannelState_PrivacyLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelState_PrivacyLevel_descriptor_;
}
bool ChannelState_PrivacyLevel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChannelState_PrivacyLevel ChannelState::PRIVACY_LEVEL_OPEN;
const ChannelState_PrivacyLevel ChannelState::PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND;
const ChannelState_PrivacyLevel ChannelState::PRIVACY_LEVEL_OPEN_INVITATION;
const ChannelState_PrivacyLevel ChannelState::PRIVACY_LEVEL_CLOSED;
const ChannelState_PrivacyLevel ChannelState::PrivacyLevel_MIN;
const ChannelState_PrivacyLevel ChannelState::PrivacyLevel_MAX;
const int ChannelState::PrivacyLevel_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* ChannelState::_default_channel_type_ = NULL;
#ifndef _MSC_VER
const int ChannelState::kMaxMembersFieldNumber;
const int ChannelState::kMinMembersFieldNumber;
const int ChannelState::kAttributeFieldNumber;
const int ChannelState::kInvitationFieldNumber;
const int ChannelState::kMaxInvitationsFieldNumber;
const int ChannelState::kReasonFieldNumber;
const int ChannelState::kPrivacyLevelFieldNumber;
const int ChannelState::kNameFieldNumber;
const int ChannelState::kDelegateNameFieldNumber;
const int ChannelState::kChannelTypeFieldNumber;
const int ChannelState::kProgramFieldNumber;
const int ChannelState::kAllowOfflineMembersFieldNumber;
const int ChannelState::kSubscribeToPresenceFieldNumber;
const int ChannelState::kDestroyOnFounderLeaveFieldNumber;
#endif  // !_MSC_VER

ChannelState::ChannelState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.ChannelState)
}

void ChannelState::InitAsDefaultInstance() {
}

ChannelState::ChannelState(const ChannelState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.ChannelState)
}

void ChannelState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  max_members_ = 0u;
  min_members_ = 0u;
  max_invitations_ = 0u;
  reason_ = 0u;
  privacy_level_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delegate_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_type_ = const_cast< ::std::string*>(_default_channel_type_);
  program_ = 0u;
  allow_offline_members_ = false;
  subscribe_to_presence_ = true;
  destroy_on_founder_leave_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelState::~ChannelState() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.ChannelState)
  SharedDtor();
}

void ChannelState::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (delegate_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete delegate_name_;
  }
  if (channel_type_ != _default_channel_type_) {
    delete channel_type_;
  }
  if (this != default_instance_) {
  }
}

void ChannelState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelState_descriptor_;
}

const ChannelState& ChannelState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5ftypes_2eproto();
  return *default_instance_;
}

ChannelState* ChannelState::default_instance_ = NULL;

ChannelState* ChannelState::New() const {
  return new ChannelState;
}

void ChannelState::Swap(ChannelState* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ChannelState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelState_descriptor_;
  metadata.reflection = ChannelState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberState::kAttributeFieldNumber;
const int MemberState::kRoleFieldNumber;
const int MemberState::kPrivilegesFieldNumber;
const int MemberState::kInfoFieldNumber;
const int MemberState::kDEPRECATEDHiddenFieldNumber;
#endif  // !_MSC_VER

MemberState::MemberState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.MemberState)
}

void MemberState::InitAsDefaultInstance() {
  info_ = const_cast< ::Battlenet::AccountInfo*>(&::Battlenet::AccountInfo::default_instance());
}

MemberState::MemberState(const MemberState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.MemberState)
}

void MemberState::SharedCtor() {
  _cached_size_ = 0;
  privileges_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  deprecated_hidden_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberState::~MemberState() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.MemberState)
  SharedDtor();
}

void MemberState::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void MemberState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberState_descriptor_;
}

const MemberState& MemberState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5ftypes_2eproto();
  return *default_instance_;
}

MemberState* MemberState::default_instance_ = NULL;

MemberState* MemberState::New() const {
  return new MemberState;
}

void MemberState::Swap(MemberState* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata MemberState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberState_descriptor_;
  metadata.reflection = MemberState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Member::kIdentityFieldNumber;
const int Member::kStateFieldNumber;
#endif  // !_MSC_VER

Member::Member()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.channel.Member)
}

void Member::InitAsDefaultInstance() {
  identity_ = const_cast< ::Battlenet::Identity*>(&::Battlenet::Identity::default_instance());
  state_ = const_cast< ::Battlenet::channel::MemberState*>(&::Battlenet::channel::MemberState::default_instance());
}

Member::Member(const Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.channel.Member)
}

void Member::SharedCtor() {
  _cached_size_ = 0;
  identity_ = NULL;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:Battlenet.channel.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  if (this != default_instance_) {
    delete identity_;
    delete state_;
  }
}

void Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Member_descriptor_;
}

const Member& Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5ftypes_2eproto();
  return *default_instance_;
}

Member* Member::default_instance_ = NULL;

Member* Member::New() const {
  return new Member;
}

void Member::Swap(Member* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Member_descriptor_;
  metadata.reflection = Member_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel
}  // namespace Battlenet

// @@protoc_insertion_point(global_scope)
