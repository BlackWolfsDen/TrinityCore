syntax = "proto2";

import "attribute_types.proto";
import "entity_types.proto";
import "friends_types.proto";
import "invitation_types.proto";
import "role_types.proto";
import "rpc_types.proto";
package Battlenet.friends;

option optimize_for = CODE_SIZE;
option cc_generic_services = false;

message SubscribeRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required uint64 object_id = 2;
}

message SubscribeResponse {
  optional uint32 max_friends = 1;
  optional uint32 max_received_invitations = 2;
  optional uint32 max_sent_invitations = 3;
  repeated .Battlenet.Role role = 4;
  repeated .Battlenet.friends.Friend friends = 5;
  repeated .Battlenet.Invitation sent_invitations = 6;
  repeated .Battlenet.Invitation received_invitations = 7;
}

message UnsubscribeRequest {
  optional .Battlenet.EntityId agent_id = 1;
  optional uint64 object_id = 2;
}

message GenericFriendRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.EntityId target_id = 2;
}

message GenericFriendResponse {
  optional .Battlenet.friends.Friend target_friend = 1;
}

message AssignRoleRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.EntityId target_id = 2;
  repeated int32 role = 3;
}

message ViewFriendsRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.EntityId target_id = 2;
  repeated uint32 role = 3 [packed = true];
}

message ViewFriendsResponse {
  repeated .Battlenet.friends.Friend friends = 1;
}

message UpdateFriendStateRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.EntityId target_id = 2;
  repeated .Battlenet.Attribute attribute = 3;
  optional uint64 attributes_epoch = 4;
}

message FriendNotification {
  required .Battlenet.friends.Friend target = 1;
  optional .Battlenet.EntityId game_account_id = 2;
  optional .Battlenet.ProcessId peer = 4;
  optional .Battlenet.EntityId account_id = 5;
}

message UpdateFriendStateNotification {
  required .Battlenet.friends.Friend changed_friend = 1;
  optional .Battlenet.EntityId game_account_id = 2;
  optional .Battlenet.ProcessId peer = 4;
  optional .Battlenet.EntityId account_id = 5;
}

message InvitationNotification {
  required .Battlenet.Invitation invitation = 1;
  optional .Battlenet.EntityId game_account_id = 2;
  optional uint32 reason = 3 [default = 0];
  optional .Battlenet.ProcessId peer = 4;
  optional .Battlenet.EntityId account_id = 5;
}

service FriendsService {
  option (.Battlenet.original_fully_qualified_descriptor_name) = "bnet.protocol.friends.FriendsService";
  rpc Subscribe(.Battlenet.friends.SubscribeRequest) returns (.Battlenet.friends.SubscribeResponse) {
    option (.Battlenet.method_id) = 1;
  }
  rpc SendInvitation(.Battlenet.SendInvitationRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 2;
  }
  rpc AcceptInvitation(.Battlenet.GenericInvitationRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 3;
  }
  rpc RevokeInvitation(.Battlenet.GenericInvitationRequest) returns (.Battlenet.NoData) {
    option deprecated = true;
    option (.Battlenet.method_id) = 4;
  }
  rpc DeclineInvitation(.Battlenet.GenericInvitationRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 5;
  }
  rpc IgnoreInvitation(.Battlenet.GenericInvitationRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 6;
  }
  rpc AssignRole(.Battlenet.friends.AssignRoleRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 7;
  }
  rpc RemoveFriend(.Battlenet.friends.GenericFriendRequest) returns (.Battlenet.friends.GenericFriendResponse) {
    option (.Battlenet.method_id) = 8;
  }
  rpc ViewFriends(.Battlenet.friends.ViewFriendsRequest) returns (.Battlenet.friends.ViewFriendsResponse) {
    option (.Battlenet.method_id) = 9;
  }
  rpc UpdateFriendState(.Battlenet.friends.UpdateFriendStateRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 10;
  }
  rpc Unsubscribe(.Battlenet.friends.UnsubscribeRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 11;
  }
  rpc RevokeAllInvitations(.Battlenet.friends.GenericFriendRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 12;
  }
}

service FriendsListener {
  option (.Battlenet.original_fully_qualified_descriptor_name) = "bnet.protocol.friends.FriendsNotify";
  rpc OnFriendAdded(.Battlenet.friends.FriendNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 1;
  }
  rpc OnFriendRemoved(.Battlenet.friends.FriendNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 2;
  }
  rpc OnReceivedInvitationAdded(.Battlenet.friends.InvitationNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 3;
  }
  rpc OnReceivedInvitationRemoved(.Battlenet.friends.InvitationNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 4;
  }
  rpc OnSentInvitationAdded(.Battlenet.friends.InvitationNotification) returns (.Battlenet.NO_RESPONSE) {
    option deprecated = true;
    option (.Battlenet.method_id) = 5;
  }
  rpc OnSentInvitationRemoved(.Battlenet.friends.InvitationNotification) returns (.Battlenet.NO_RESPONSE) {
    option deprecated = true;
    option (.Battlenet.method_id) = 6;
  }
  rpc OnUpdateFriendState(.Battlenet.friends.UpdateFriendStateNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 7;
  }
}


