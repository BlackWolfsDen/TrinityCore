syntax = "proto2";

import "user_manager_types.proto";
import "entity_types.proto";
import "role_types.proto";
import "rpc_types.proto";
package Battlenet.user_manager;

option optimize_for = CODE_SIZE;
option cc_generic_services = false;

message SubscribeRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required uint64 object_id = 2;
}

message SubscribeResponse {
  repeated .Battlenet.user_manager.BlockedPlayer blocked_players = 1;
  repeated .Battlenet.user_manager.RecentPlayer recent_players = 2;
  repeated .Battlenet.Role role = 3;
}

message UnsubscribeRequest {
  optional .Battlenet.EntityId agent_id = 1;
  optional uint64 object_id = 2;
}

message AddRecentPlayersRequest {
  repeated .Battlenet.user_manager.RecentPlayer players = 1;
  optional .Battlenet.EntityId agent_id = 2;
  optional uint32 program = 3;
}

message AddRecentPlayersResponse {
  repeated .Battlenet.user_manager.RecentPlayer players_added = 1;
  repeated fixed32 players_removed = 3;
}

message ClearRecentPlayersRequest {
  optional .Battlenet.EntityId agent_id = 1;
  optional uint32 program = 2;
}

message ClearRecentPlayersResponse {
  repeated fixed32 players_removed = 1;
}

message BlockPlayerRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.EntityId target_id = 2;
  optional uint32 role = 3;
}

message UnblockPlayerRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.EntityId target_id = 2;
}

message BlockedPlayerAddedNotification {
  required .Battlenet.user_manager.BlockedPlayer player = 1;
  optional .Battlenet.EntityId game_account_id = 2;
  optional .Battlenet.EntityId account_id = 3;
}

message BlockedPlayerRemovedNotification {
  required .Battlenet.user_manager.BlockedPlayer player = 1;
  optional .Battlenet.EntityId game_account_id = 2;
  optional .Battlenet.EntityId account_id = 3;
}

message RecentPlayersAddedNotification {
  repeated .Battlenet.user_manager.RecentPlayer player = 1;
}

message RecentPlayersRemovedNotification {
  repeated .Battlenet.user_manager.RecentPlayer player = 1;
}

service UserManagerService {
  option (.Battlenet.original_fully_qualified_descriptor_name) = "bnet.protocol.user_manager.UserManagerService";
  rpc Subscribe(.Battlenet.user_manager.SubscribeRequest) returns (.Battlenet.user_manager.SubscribeResponse) {
    option (.Battlenet.method_id) = 1;
  }
  rpc AddRecentPlayers(.Battlenet.user_manager.AddRecentPlayersRequest) returns (.Battlenet.user_manager.AddRecentPlayersResponse) {
    option (.Battlenet.method_id) = 10;
  }
  rpc ClearRecentPlayers(.Battlenet.user_manager.ClearRecentPlayersRequest) returns (.Battlenet.user_manager.ClearRecentPlayersResponse) {
    option (.Battlenet.method_id) = 11;
  }
  rpc BlockPlayer(.Battlenet.user_manager.BlockPlayerRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 20;
  }
  rpc UnblockPlayer(.Battlenet.user_manager.UnblockPlayerRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 21;
  }
  rpc BlockPlayerForSession(.Battlenet.user_manager.BlockPlayerRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 40;
  }
  rpc LoadBlockList(.Battlenet.EntityId) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 50;
  }
  rpc Unsubscribe(.Battlenet.user_manager.UnsubscribeRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 51;
  }
}

service UserManagerListener {
  option (.Battlenet.original_fully_qualified_descriptor_name) = "bnet.protocol.user_manager.UserManagerNotify";
  rpc OnBlockedPlayerAdded(.Battlenet.user_manager.BlockedPlayerAddedNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 1;
  }
  rpc OnBlockedPlayerRemoved(.Battlenet.user_manager.BlockedPlayerRemovedNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 2;
  }
  rpc OnRecentPlayersAdded(.Battlenet.user_manager.RecentPlayersAddedNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 11;
  }
  rpc OnRecentPlayersRemoved(.Battlenet.user_manager.RecentPlayersRemovedNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 12;
  }
}


