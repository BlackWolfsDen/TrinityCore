syntax = "proto2";

import "entity_types.proto";
import "presence_types.proto";
import "rpc_types.proto";
package Battlenet.presence;

option optimize_for = CODE_SIZE;
option cc_generic_services = false;

message SubscribeRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.EntityId entity_id = 2;
  required uint64 object_id = 3;
  repeated fixed32 program = 4;
  optional bool flag_public = 5 [default = true, deprecated = true];
}

message SubscribeNotificationRequest {
  required .Battlenet.EntityId entity_id = 1;
}

message UnsubscribeRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.EntityId entity_id = 2;
  optional uint64 object_id = 3;
}

message UpdateRequest {
  required .Battlenet.EntityId entity_id = 1;
  repeated .Battlenet.presence.FieldOperation field_operation = 2;
  optional bool no_create = 3 [default = false];
  optional .Battlenet.EntityId agent_id = 4;
}

message QueryRequest {
  required .Battlenet.EntityId entity_id = 1;
  repeated .Battlenet.presence.FieldKey key = 2;
  optional .Battlenet.EntityId agent_id = 3;
}

message QueryResponse {
  repeated .Battlenet.presence.Field field = 2;
}

message OwnershipRequest {
  required .Battlenet.EntityId entity_id = 1;
  optional bool release_ownership = 2 [default = false];
}

service PresenceService {
  option (.Battlenet.original_fully_qualified_descriptor_name) = "bnet.protocol.presence.PresenceService";
  rpc Subscribe(.Battlenet.presence.SubscribeRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 1;
  }
  rpc Unsubscribe(.Battlenet.presence.UnsubscribeRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 2;
  }
  rpc Update(.Battlenet.presence.UpdateRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 3;
  }
  rpc Query(.Battlenet.presence.QueryRequest) returns (.Battlenet.presence.QueryResponse) {
    option (.Battlenet.method_id) = 4;
  }
  rpc Ownership(.Battlenet.presence.OwnershipRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 5;
  }
  rpc SubscribeNotification(.Battlenet.presence.SubscribeNotificationRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 7;
  }
}


