syntax = "proto2";

import "account_types.proto";
import "entity_types.proto";
import "channel_types.proto";
import "rpc_types.proto";
package Battlenet.channel;

option optimize_for = CODE_SIZE;
option cc_generic_services = false;

message AddMemberRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.Identity member_identity = 2;
  required .Battlenet.channel.MemberState member_state = 3;
  required uint64 object_id = 4;
  optional bool subscribe = 5 [default = true];
}

message RemoveMemberRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.EntityId member_id = 2;
  optional uint32 reason = 3;
}

message UnsubscribeMemberRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.EntityId member_id = 2;
}

message SendMessageRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.channel.Message message = 2;
  optional uint64 required_privileges = 3 [default = 0];
}

message UpdateChannelStateRequest {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.channel.ChannelState state_change = 2;
}

message UpdateMemberStateRequest {
  optional .Battlenet.EntityId agent_id = 1;
  repeated .Battlenet.channel.Member state_change = 2;
  repeated uint32 removed_role = 3 [packed = true];
}

message DissolveRequest {
  optional .Battlenet.EntityId agent_id = 1;
  optional uint32 reason = 2;
}

message SetRolesRequest {
  optional .Battlenet.EntityId agent_id = 1;
  repeated uint32 role = 2 [packed = true];
  repeated .Battlenet.EntityId member_id = 3;
}

message JoinNotification {
  optional .Battlenet.channel.Member self = 1;
  repeated .Battlenet.channel.Member member = 2;
  required .Battlenet.channel.ChannelState channel_state = 3;
  optional .Battlenet.channel.ChannelId channel_id = 4;
  optional .Battlenet.account.Identity subscriber = 5;
}

message MemberAddedNotification {
  required .Battlenet.channel.Member member = 1;
  optional .Battlenet.channel.ChannelId channel_id = 2;
  optional .Battlenet.account.Identity subscriber = 3;
}

message LeaveNotification {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.EntityId member_id = 2;
  optional uint32 reason = 3;
  optional .Battlenet.channel.ChannelId channel_id = 4;
  optional .Battlenet.account.Identity subscriber = 5;
}

message MemberRemovedNotification {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.EntityId member_id = 2;
  optional uint32 reason = 3;
  optional .Battlenet.channel.ChannelId channel_id = 4;
  optional .Battlenet.account.Identity subscriber = 5;
}

message SendMessageNotification {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.channel.Message message = 2;
  optional uint64 required_privileges = 3 [default = 0];
  optional string identity = 4;
  optional .Battlenet.channel.ChannelId channel_id = 5;
  optional .Battlenet.account.Identity subscriber = 6;
}

message UpdateChannelStateNotification {
  optional .Battlenet.EntityId agent_id = 1;
  required .Battlenet.channel.ChannelState state_change = 2;
  optional .Battlenet.channel.ChannelId channel_id = 3;
  optional .Battlenet.account.Identity subscriber = 4;
}

message UpdateMemberStateNotification {
  optional .Battlenet.EntityId agent_id = 1;
  repeated .Battlenet.channel.Member state_change = 2;
  repeated uint32 removed_role = 3 [packed = true];
  optional .Battlenet.channel.ChannelId channel_id = 4;
  optional .Battlenet.account.Identity subscriber = 5;
}

service ChannelService {
  option (.Battlenet.original_fully_qualified_descriptor_name) = "bnet.protocol.channel.Channel";
  rpc AddMember(.Battlenet.channel.AddMemberRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 1;
  }
  rpc RemoveMember(.Battlenet.channel.RemoveMemberRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 2;
  }
  rpc SendMessage(.Battlenet.channel.SendMessageRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 3;
  }
  rpc UpdateChannelState(.Battlenet.channel.UpdateChannelStateRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 4;
  }
  rpc UpdateMemberState(.Battlenet.channel.UpdateMemberStateRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 5;
  }
  rpc Dissolve(.Battlenet.channel.DissolveRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 6;
  }
  rpc SetRoles(.Battlenet.channel.SetRolesRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 7;
  }
  rpc UnsubscribeMember(.Battlenet.channel.UnsubscribeMemberRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 8;
  }
}

service ChannelListener {
  option (.Battlenet.original_fully_qualified_descriptor_name) = "bnet.protocol.channel.ChannelSubscriber";
  rpc OnJoin(.Battlenet.channel.JoinNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 1;
  }
  rpc OnMemberAdded(.Battlenet.channel.MemberAddedNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 2;
  }
  rpc OnLeave(.Battlenet.channel.LeaveNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 3;
  }
  rpc OnMemberRemoved(.Battlenet.channel.MemberRemovedNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 4;
  }
  rpc OnSendMessage(.Battlenet.channel.SendMessageNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 5;
  }
  rpc OnUpdateChannelState(.Battlenet.channel.UpdateChannelStateNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 6;
  }
  rpc OnUpdateMemberState(.Battlenet.channel.UpdateMemberStateNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 7;
  }
}


