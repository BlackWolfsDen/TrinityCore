syntax = "proto2";

import "account_types.proto";
import "content_handle_types.proto";
import "entity_types.proto";
import "rpc_types.proto";
package Battlenet.authentication;

option optimize_for = CODE_SIZE;
option cc_generic_services = true;

message ModuleLoadRequest {
  required .Battlenet.ContentHandle module_handle = 1;
  optional bytes message = 2;
}

message ModuleNotification {
  optional int32 module_id = 2;
  optional uint32 result = 3;
}

message ModuleMessageRequest {
  required int32 module_id = 1;
  optional bytes message = 2;
}

message LogonRequest {
  optional string program = 1;
  optional string platform = 2;
  optional string locale = 3;
  optional string email = 4;
  optional string version = 5;
  optional int32 application_version = 6;
  optional bool public_computer = 7;
  optional bytes sso_id = 8;
  optional bool disconnect_on_cookie_fail = 9 [default = false];
  optional bool allow_logon_queue_notifications = 10 [default = false];
  optional bool web_client_verification = 11 [default = false];
  optional bytes cached_web_credentials = 12;
  optional bool enable_cookie = 13 [default = true];
  optional string user_agent = 14;
}

message LogonResult {
  required uint32 error_code = 1;
  optional .Battlenet.EntityId account_id = 2;
  repeated .Battlenet.EntityId game_account_id = 3;
  optional string email = 4;
  repeated uint32 available_region = 5;
  optional uint32 connected_region = 6;
  optional string battle_tag = 7;
  optional string geoip_country = 8;
  optional bytes session_key = 9;
  optional bool restricted_mode = 10;
}

message GenerateSSOTokenRequest {
  optional fixed32 program = 1;
}

message GenerateSSOTokenResponse {
  optional bytes sso_id = 1;
  optional bytes sso_secret = 2;
}

message LogonUpdateRequest {
  required uint32 error_code = 1;
}

message LogonQueueUpdateRequest {
  required uint32 position = 1;
  required uint64 estimated_time = 2;
  required uint64 eta_deviation_in_sec = 3;
}

message AccountSettingsNotification {
  repeated .Battlenet.account.AccountLicense licenses = 1;
  optional bool is_using_rid = 2;
  optional bool is_playing_from_igr = 3;
  optional bool can_receive_voice = 4;
  optional bool can_send_voice = 5;
}

message ServerStateChangeRequest {
  required uint32 state = 1;
  required uint64 event_time = 2;
}

message VersionInfo {
  optional uint32 number = 1;
  optional string patch = 2;
  optional bool is_optional = 3;
  optional uint64 kick_time = 4;
}

message VersionInfoNotification {
  optional .Battlenet.authentication.VersionInfo version_info = 1;
}

message MemModuleLoadRequest {
  required .Battlenet.ContentHandle handle = 1;
  required bytes key = 2;
  required bytes input = 3;
}

message MemModuleLoadResponse {
  required bytes data = 1;
}

message SelectGameAccountRequest {
  required .Battlenet.EntityId game_account_id = 1;
}

message GameAccountSelectedRequest {
  required uint32 result = 1;
  optional .Battlenet.EntityId game_account_id = 2;
}

message GenerateWebCredentialsRequest {
  optional fixed32 program = 1;
}

message GenerateWebCredentialsResponse {
  optional bytes web_credentials = 1;
}

message VerifyWebCredentialsRequest {
  optional bytes web_credentials = 1;
}

service AuthenticationListener {
  option (.Battlenet.original_fully_qualified_descriptor_name) = "bnet.protocol.authentication.AuthenticationClient";
  rpc OnModuleLoad(.Battlenet.authentication.ModuleLoadRequest) returns (.Battlenet.NO_RESPONSE) {
    option deprecated = true;
    option (.Battlenet.method_id) = 1;
  }
  rpc OnModuleMessage(.Battlenet.authentication.ModuleMessageRequest) returns (.Battlenet.NoData) {
    option deprecated = true;
    option (.Battlenet.method_id) = 2;
  }
  rpc OnServerStateChange(.Battlenet.authentication.ServerStateChangeRequest) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 4;
  }
  rpc OnLogonComplete(.Battlenet.authentication.LogonResult) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 5;
  }
  rpc OnMemModuleLoad(.Battlenet.authentication.MemModuleLoadRequest) returns (.Battlenet.authentication.MemModuleLoadResponse) {
    option (.Battlenet.method_id) = 6;
  }
  rpc OnLogonUpdate(.Battlenet.authentication.LogonUpdateRequest) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 10;
  }
  rpc OnVersionInfoUpdated(.Battlenet.authentication.VersionInfoNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 11;
  }
  rpc OnLogonQueueUpdate(.Battlenet.authentication.LogonQueueUpdateRequest) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 12;
  }
  rpc OnLogonQueueEnd(.Battlenet.NoData) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 13;
  }
  rpc OnGameAccountSelected(.Battlenet.authentication.GameAccountSelectedRequest) returns (.Battlenet.NO_RESPONSE) {
    option deprecated = true;
    option (.Battlenet.method_id) = 14;
  }
}

service AuthenticationService {
  option (.Battlenet.original_fully_qualified_descriptor_name) = "bnet.protocol.authentication.AuthenticationServer";
  rpc Logon(.Battlenet.authentication.LogonRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 1;
  }
  rpc ModuleNotify(.Battlenet.authentication.ModuleNotification) returns (.Battlenet.NoData) {
    option deprecated = true;
    option (.Battlenet.method_id) = 2;
  }
  rpc ModuleMessage(.Battlenet.authentication.ModuleMessageRequest) returns (.Battlenet.NoData) {
    option deprecated = true;
    option (.Battlenet.method_id) = 3;
  }
  rpc SelectGameAccount_DEPRECATED(.Battlenet.EntityId) returns (.Battlenet.NoData) {
    option deprecated = true;
    option (.Battlenet.method_id) = 4;
  }
  rpc GenerateSSOToken(.Battlenet.authentication.GenerateSSOTokenRequest) returns (.Battlenet.authentication.GenerateSSOTokenResponse) {
    option (.Battlenet.method_id) = 5;
  }
  rpc SelectGameAccount(.Battlenet.authentication.SelectGameAccountRequest) returns (.Battlenet.NoData) {
    option deprecated = true;
    option (.Battlenet.method_id) = 6;
  }
  rpc VerifyWebCredentials(.Battlenet.authentication.VerifyWebCredentialsRequest) returns (.Battlenet.NoData) {
    option (.Battlenet.method_id) = 7;
  }
  rpc GenerateWebCredentials(.Battlenet.authentication.GenerateWebCredentialsRequest) returns (.Battlenet.authentication.GenerateWebCredentialsResponse) {
    option (.Battlenet.method_id) = 8;
  }
}


