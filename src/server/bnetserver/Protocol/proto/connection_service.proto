syntax = "proto2";

import "content_handle_types.proto";
import "rpc_types.proto";
package Battlenet.connection;

option optimize_for = CODE_SIZE;
option cc_generic_services = true;

message ConnectRequest {
  optional .Battlenet.ProcessId client_id = 1;
  optional .Battlenet.connection.BindRequest bind_request = 2;
  optional bool use_bindless_rpc = 3 [default = true];
}

message ConnectionMeteringContentHandles {
  repeated .Battlenet.ContentHandle content_handle = 1;
}

message ConnectResponse {
  required .Battlenet.ProcessId server_id = 1;
  optional .Battlenet.ProcessId client_id = 2;
  optional uint32 bind_result = 3;
  optional .Battlenet.connection.BindResponse bind_response = 4;
  optional .Battlenet.connection.ConnectionMeteringContentHandles content_handle_array = 5;
  optional uint64 server_time = 6;
  optional bool use_bindless_rpc = 7 [default = false];
  optional .Battlenet.connection.ConnectionMeteringContentHandles binary_content_handle_array = 8;
}

message BoundService {
  required fixed32 hash = 1;
  required uint32 id = 2;
}

message BindRequest {
  repeated fixed32 deprecated_imported_service_hash = 1 [packed = true, deprecated = true];
  repeated .Battlenet.connection.BoundService deprecated_exported_service = 2 [deprecated = true];
  repeated .Battlenet.connection.BoundService exported_service = 3;
  repeated .Battlenet.connection.BoundService imported_service = 4;
}

message BindResponse {
  repeated uint32 imported_service_id = 1 [packed = true, deprecated = true];
}

message EchoRequest {
  optional fixed64 time = 1;
  optional bool network_only = 2 [default = false];
  optional bytes payload = 3;
}

message EchoResponse {
  optional fixed64 time = 1;
  optional bytes payload = 2;
}

message DisconnectRequest {
  required uint32 error_code = 1;
}

message DisconnectNotification {
  required uint32 error_code = 1;
  optional string reason = 2;
}

message EncryptRequest {
}

service ConnectionService {
  option (.Battlenet.original_fully_qualified_descriptor_name) = "bnet.protocol.connection.ConnectionService";
  rpc Connect(.Battlenet.connection.ConnectRequest) returns (.Battlenet.connection.ConnectResponse) {
    option (.Battlenet.method_id) = 1;
  }
  rpc Bind(.Battlenet.connection.BindRequest) returns (.Battlenet.connection.BindResponse) {
    option deprecated = true;
    option (.Battlenet.method_id) = 2;
  }
  rpc Echo(.Battlenet.connection.EchoRequest) returns (.Battlenet.connection.EchoResponse) {
    option (.Battlenet.method_id) = 3;
  }
  rpc ForceDisconnect(.Battlenet.connection.DisconnectNotification) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 4;
  }
  rpc KeepAlive(.Battlenet.NoData) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 5;
  }
  rpc Encrypt(.Battlenet.connection.EncryptRequest) returns (.Battlenet.NoData) {
    option deprecated = true;
    option (.Battlenet.method_id) = 6;
  }
  rpc RequestDisconnect(.Battlenet.connection.DisconnectRequest) returns (.Battlenet.NO_RESPONSE) {
    option (.Battlenet.method_id) = 7;
  }
}


