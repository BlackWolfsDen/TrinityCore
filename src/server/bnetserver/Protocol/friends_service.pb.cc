// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friends_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friends_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace friends {

namespace {

const ::google::protobuf::Descriptor* SubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericFriendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssignRoleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssignRoleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewFriendsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewFriendsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewFriendsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewFriendsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFriendStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFriendStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFriendStateNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFriendStateNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvitationNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvitationNotification_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* FriendsService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* FriendsListener_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_friends_5fservice_2eproto() {
  protobuf_AddDesc_friends_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friends_service.proto");
  GOOGLE_CHECK(file != NULL);
  SubscribeRequest_descriptor_ = file->message_type(0);
  static const int SubscribeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, object_id_),
  };
  SubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeRequest_descriptor_,
      SubscribeRequest::default_instance_,
      SubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeRequest));
  SubscribeResponse_descriptor_ = file->message_type(1);
  static const int SubscribeResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, max_friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, max_received_invitations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, max_sent_invitations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, sent_invitations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, received_invitations_),
  };
  SubscribeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeResponse_descriptor_,
      SubscribeResponse::default_instance_,
      SubscribeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeResponse));
  UnsubscribeRequest_descriptor_ = file->message_type(2);
  static const int UnsubscribeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, object_id_),
  };
  UnsubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsubscribeRequest_descriptor_,
      UnsubscribeRequest::default_instance_,
      UnsubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsubscribeRequest));
  GenericFriendRequest_descriptor_ = file->message_type(3);
  static const int GenericFriendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendRequest, target_id_),
  };
  GenericFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenericFriendRequest_descriptor_,
      GenericFriendRequest::default_instance_,
      GenericFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenericFriendRequest));
  GenericFriendResponse_descriptor_ = file->message_type(4);
  static const int GenericFriendResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendResponse, target_friend_),
  };
  GenericFriendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenericFriendResponse_descriptor_,
      GenericFriendResponse::default_instance_,
      GenericFriendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenericFriendResponse));
  AssignRoleRequest_descriptor_ = file->message_type(5);
  static const int AssignRoleRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignRoleRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignRoleRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignRoleRequest, role_),
  };
  AssignRoleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssignRoleRequest_descriptor_,
      AssignRoleRequest::default_instance_,
      AssignRoleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignRoleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignRoleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssignRoleRequest));
  ViewFriendsRequest_descriptor_ = file->message_type(6);
  static const int ViewFriendsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsRequest, role_),
  };
  ViewFriendsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewFriendsRequest_descriptor_,
      ViewFriendsRequest::default_instance_,
      ViewFriendsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewFriendsRequest));
  ViewFriendsResponse_descriptor_ = file->message_type(7);
  static const int ViewFriendsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsResponse, friends_),
  };
  ViewFriendsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewFriendsResponse_descriptor_,
      ViewFriendsResponse::default_instance_,
      ViewFriendsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewFriendsResponse));
  UpdateFriendStateRequest_descriptor_ = file->message_type(8);
  static const int UpdateFriendStateRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateRequest, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateRequest, attributes_epoch_),
  };
  UpdateFriendStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFriendStateRequest_descriptor_,
      UpdateFriendStateRequest::default_instance_,
      UpdateFriendStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFriendStateRequest));
  FriendNotification_descriptor_ = file->message_type(9);
  static const int FriendNotification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendNotification, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendNotification, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendNotification, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendNotification, account_id_),
  };
  FriendNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendNotification_descriptor_,
      FriendNotification::default_instance_,
      FriendNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendNotification));
  UpdateFriendStateNotification_descriptor_ = file->message_type(10);
  static const int UpdateFriendStateNotification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateNotification, changed_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateNotification, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateNotification, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateNotification, account_id_),
  };
  UpdateFriendStateNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFriendStateNotification_descriptor_,
      UpdateFriendStateNotification::default_instance_,
      UpdateFriendStateNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFriendStateNotification));
  InvitationNotification_descriptor_ = file->message_type(11);
  static const int InvitationNotification_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationNotification, invitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationNotification, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationNotification, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationNotification, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationNotification, account_id_),
  };
  InvitationNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvitationNotification_descriptor_,
      InvitationNotification::default_instance_,
      InvitationNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitationNotification));
  FriendsService_descriptor_ = file->service(0);
  FriendsListener_descriptor_ = file->service(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friends_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeRequest_descriptor_, &SubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeResponse_descriptor_, &SubscribeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsubscribeRequest_descriptor_, &UnsubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenericFriendRequest_descriptor_, &GenericFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenericFriendResponse_descriptor_, &GenericFriendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssignRoleRequest_descriptor_, &AssignRoleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewFriendsRequest_descriptor_, &ViewFriendsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewFriendsResponse_descriptor_, &ViewFriendsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFriendStateRequest_descriptor_, &UpdateFriendStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendNotification_descriptor_, &FriendNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFriendStateNotification_descriptor_, &UpdateFriendStateNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitationNotification_descriptor_, &InvitationNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friends_5fservice_2eproto() {
  delete SubscribeRequest::default_instance_;
  delete SubscribeRequest_reflection_;
  delete SubscribeResponse::default_instance_;
  delete SubscribeResponse_reflection_;
  delete UnsubscribeRequest::default_instance_;
  delete UnsubscribeRequest_reflection_;
  delete GenericFriendRequest::default_instance_;
  delete GenericFriendRequest_reflection_;
  delete GenericFriendResponse::default_instance_;
  delete GenericFriendResponse_reflection_;
  delete AssignRoleRequest::default_instance_;
  delete AssignRoleRequest_reflection_;
  delete ViewFriendsRequest::default_instance_;
  delete ViewFriendsRequest_reflection_;
  delete ViewFriendsResponse::default_instance_;
  delete ViewFriendsResponse_reflection_;
  delete UpdateFriendStateRequest::default_instance_;
  delete UpdateFriendStateRequest_reflection_;
  delete FriendNotification::default_instance_;
  delete FriendNotification_reflection_;
  delete UpdateFriendStateNotification::default_instance_;
  delete UpdateFriendStateNotification_reflection_;
  delete InvitationNotification::default_instance_;
  delete InvitationNotification_reflection_;
}

void protobuf_AddDesc_friends_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Battlenet::protobuf_AddDesc_attribute_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_entity_5ftypes_2eproto();
  ::Battlenet::friends::protobuf_AddDesc_friends_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_invitation_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_role_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025friends_service.proto\022\021Battlenet.frien"
    "ds\032\025attribute_types.proto\032\022entity_types."
    "proto\032\023friends_types.proto\032\026invitation_t"
    "ypes.proto\032\020role_types.proto\032\017rpc_types."
    "proto\"L\n\020SubscribeRequest\022%\n\010agent_id\030\001 "
    "\001(\0132\023.Battlenet.EntityId\022\021\n\tobject_id\030\002 "
    "\002(\004\"\231\002\n\021SubscribeResponse\022\023\n\013max_friends"
    "\030\001 \001(\r\022 \n\030max_received_invitations\030\002 \001(\r"
    "\022\034\n\024max_sent_invitations\030\003 \001(\r\022\035\n\004role\030\004"
    " \003(\0132\017.Battlenet.Role\022*\n\007friends\030\005 \003(\0132\031"
    ".Battlenet.friends.Friend\022/\n\020sent_invita"
    "tions\030\006 \003(\0132\025.Battlenet.Invitation\0223\n\024re"
    "ceived_invitations\030\007 \003(\0132\025.Battlenet.Inv"
    "itation\"N\n\022UnsubscribeRequest\022%\n\010agent_i"
    "d\030\001 \001(\0132\023.Battlenet.EntityId\022\021\n\tobject_i"
    "d\030\002 \001(\004\"e\n\024GenericFriendRequest\022%\n\010agent"
    "_id\030\001 \001(\0132\023.Battlenet.EntityId\022&\n\ttarget"
    "_id\030\002 \002(\0132\023.Battlenet.EntityId\"I\n\025Generi"
    "cFriendResponse\0220\n\rtarget_friend\030\001 \001(\0132\031"
    ".Battlenet.friends.Friend\"p\n\021AssignRoleR"
    "equest\022%\n\010agent_id\030\001 \001(\0132\023.Battlenet.Ent"
    "ityId\022&\n\ttarget_id\030\002 \002(\0132\023.Battlenet.Ent"
    "ityId\022\014\n\004role\030\003 \003(\005\"u\n\022ViewFriendsReques"
    "t\022%\n\010agent_id\030\001 \001(\0132\023.Battlenet.EntityId"
    "\022&\n\ttarget_id\030\002 \002(\0132\023.Battlenet.EntityId"
    "\022\020\n\004role\030\003 \003(\rB\002\020\001\"A\n\023ViewFriendsRespons"
    "e\022*\n\007friends\030\001 \003(\0132\031.Battlenet.friends.F"
    "riend\"\254\001\n\030UpdateFriendStateRequest\022%\n\010ag"
    "ent_id\030\001 \001(\0132\023.Battlenet.EntityId\022&\n\ttar"
    "get_id\030\002 \002(\0132\023.Battlenet.EntityId\022\'\n\tatt"
    "ribute\030\003 \003(\0132\024.Battlenet.Attribute\022\030\n\020at"
    "tributes_epoch\030\004 \001(\004\"\272\001\n\022FriendNotificat"
    "ion\022)\n\006target\030\001 \002(\0132\031.Battlenet.friends."
    "Friend\022,\n\017game_account_id\030\002 \001(\0132\023.Battle"
    "net.EntityId\022\"\n\004peer\030\004 \001(\0132\024.Battlenet.P"
    "rocessId\022\'\n\naccount_id\030\005 \001(\0132\023.Battlenet"
    ".EntityId\"\315\001\n\035UpdateFriendStateNotificat"
    "ion\0221\n\016changed_friend\030\001 \002(\0132\031.Battlenet."
    "friends.Friend\022,\n\017game_account_id\030\002 \001(\0132"
    "\023.Battlenet.EntityId\022\"\n\004peer\030\004 \001(\0132\024.Bat"
    "tlenet.ProcessId\022\'\n\naccount_id\030\005 \001(\0132\023.B"
    "attlenet.EntityId\"\321\001\n\026InvitationNotifica"
    "tion\022)\n\ninvitation\030\001 \002(\0132\025.Battlenet.Inv"
    "itation\022,\n\017game_account_id\030\002 \001(\0132\023.Battl"
    "enet.EntityId\022\021\n\006reason\030\003 \001(\r:\0010\022\"\n\004peer"
    "\030\004 \001(\0132\024.Battlenet.ProcessId\022\'\n\naccount_"
    "id\030\005 \001(\0132\023.Battlenet.EntityId2\316\010\n\016Friend"
    "sService\022\\\n\tSubscribe\022#.Battlenet.friend"
    "s.SubscribeRequest\032$.Battlenet.friends.S"
    "ubscribeResponse\"\004\200\265\030\001\022K\n\016SendInvitation"
    "\022 .Battlenet.SendInvitationRequest\032\021.Bat"
    "tlenet.NoData\"\004\200\265\030\002\022P\n\020AcceptInvitation\022"
    "#.Battlenet.GenericInvitationRequest\032\021.B"
    "attlenet.NoData\"\004\200\265\030\003\022S\n\020RevokeInvitatio"
    "n\022#.Battlenet.GenericInvitationRequest\032\021"
    ".Battlenet.NoData\"\007\210\002\001\200\265\030\004\022Q\n\021DeclineInv"
    "itation\022#.Battlenet.GenericInvitationReq"
    "uest\032\021.Battlenet.NoData\"\004\200\265\030\005\022P\n\020IgnoreI"
    "nvitation\022#.Battlenet.GenericInvitationR"
    "equest\032\021.Battlenet.NoData\"\004\200\265\030\006\022K\n\nAssig"
    "nRole\022$.Battlenet.friends.AssignRoleRequ"
    "est\032\021.Battlenet.NoData\"\004\200\265\030\007\022g\n\014RemoveFr"
    "iend\022\'.Battlenet.friends.GenericFriendRe"
    "quest\032(.Battlenet.friends.GenericFriendR"
    "esponse\"\004\200\265\030\010\022b\n\013ViewFriends\022%.Battlenet"
    ".friends.ViewFriendsRequest\032&.Battlenet."
    "friends.ViewFriendsResponse\"\004\200\265\030\t\022Y\n\021Upd"
    "ateFriendState\022+.Battlenet.friends.Updat"
    "eFriendStateRequest\032\021.Battlenet.NoData\"\004"
    "\200\265\030\n\022M\n\013Unsubscribe\022%.Battlenet.friends."
    "UnsubscribeRequest\032\021.Battlenet.NoData\"\004\200"
    "\265\030\013\022X\n\024RevokeAllInvitations\022\'.Battlenet."
    "friends.GenericFriendRequest\032\021.Battlenet"
    ".NoData\"\004\200\265\030\014\032\'\312>$bnet.protocol.friends."
    "FriendsService2\350\005\n\017FriendsListener\022T\n\rOn"
    "FriendAdded\022%.Battlenet.friends.FriendNo"
    "tification\032\026.Battlenet.NO_RESPONSE\"\004\200\265\030\001"
    "\022V\n\017OnFriendRemoved\022%.Battlenet.friends."
    "FriendNotification\032\026.Battlenet.NO_RESPON"
    "SE\"\004\200\265\030\002\022d\n\031OnReceivedInvitationAdded\022)."
    "Battlenet.friends.InvitationNotification"
    "\032\026.Battlenet.NO_RESPONSE\"\004\200\265\030\003\022f\n\033OnRece"
    "ivedInvitationRemoved\022).Battlenet.friend"
    "s.InvitationNotification\032\026.Battlenet.NO_"
    "RESPONSE\"\004\200\265\030\004\022c\n\025OnSentInvitationAdded\022"
    ").Battlenet.friends.InvitationNotificati"
    "on\032\026.Battlenet.NO_RESPONSE\"\007\210\002\001\200\265\030\005\022e\n\027O"
    "nSentInvitationRemoved\022).Battlenet.frien"
    "ds.InvitationNotification\032\026.Battlenet.NO"
    "_RESPONSE\"\007\210\002\001\200\265\030\006\022e\n\023OnUpdateFriendStat"
    "e\0220.Battlenet.friends.UpdateFriendStateN"
    "otification\032\026.Battlenet.NO_RESPONSE\"\004\200\265\030"
    "\007\032&\312>#bnet.protocol.friends.FriendsNotif"
    "yB\005H\002\200\001\001", 3728);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friends_service.proto", &protobuf_RegisterTypes);
  SubscribeRequest::default_instance_ = new SubscribeRequest();
  SubscribeResponse::default_instance_ = new SubscribeResponse();
  UnsubscribeRequest::default_instance_ = new UnsubscribeRequest();
  GenericFriendRequest::default_instance_ = new GenericFriendRequest();
  GenericFriendResponse::default_instance_ = new GenericFriendResponse();
  AssignRoleRequest::default_instance_ = new AssignRoleRequest();
  ViewFriendsRequest::default_instance_ = new ViewFriendsRequest();
  ViewFriendsResponse::default_instance_ = new ViewFriendsResponse();
  UpdateFriendStateRequest::default_instance_ = new UpdateFriendStateRequest();
  FriendNotification::default_instance_ = new FriendNotification();
  UpdateFriendStateNotification::default_instance_ = new UpdateFriendStateNotification();
  InvitationNotification::default_instance_ = new InvitationNotification();
  SubscribeRequest::default_instance_->InitAsDefaultInstance();
  SubscribeResponse::default_instance_->InitAsDefaultInstance();
  UnsubscribeRequest::default_instance_->InitAsDefaultInstance();
  GenericFriendRequest::default_instance_->InitAsDefaultInstance();
  GenericFriendResponse::default_instance_->InitAsDefaultInstance();
  AssignRoleRequest::default_instance_->InitAsDefaultInstance();
  ViewFriendsRequest::default_instance_->InitAsDefaultInstance();
  ViewFriendsResponse::default_instance_->InitAsDefaultInstance();
  UpdateFriendStateRequest::default_instance_->InitAsDefaultInstance();
  FriendNotification::default_instance_->InitAsDefaultInstance();
  UpdateFriendStateNotification::default_instance_->InitAsDefaultInstance();
  InvitationNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friends_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friends_5fservice_2eproto {
  StaticDescriptorInitializer_friends_5fservice_2eproto() {
    protobuf_AddDesc_friends_5fservice_2eproto();
  }
} static_descriptor_initializer_friends_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SubscribeRequest::kAgentIdFieldNumber;
const int SubscribeRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

SubscribeRequest::SubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.friends.SubscribeRequest)
}

void SubscribeRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.friends.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.friends.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void SubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRequest_descriptor_;
}

const SubscribeRequest& SubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_5fservice_2eproto();
  return *default_instance_;
}

SubscribeRequest* SubscribeRequest::default_instance_ = NULL;

SubscribeRequest* SubscribeRequest::New() const {
  return new SubscribeRequest;
}

void SubscribeRequest::Swap(SubscribeRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeRequest_descriptor_;
  metadata.reflection = SubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeResponse::kMaxFriendsFieldNumber;
const int SubscribeResponse::kMaxReceivedInvitationsFieldNumber;
const int SubscribeResponse::kMaxSentInvitationsFieldNumber;
const int SubscribeResponse::kRoleFieldNumber;
const int SubscribeResponse::kFriendsFieldNumber;
const int SubscribeResponse::kSentInvitationsFieldNumber;
const int SubscribeResponse::kReceivedInvitationsFieldNumber;
#endif  // !_MSC_VER

SubscribeResponse::SubscribeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.friends.SubscribeResponse)
}

void SubscribeResponse::InitAsDefaultInstance() {
}

SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.friends.SubscribeResponse)
}

void SubscribeResponse::SharedCtor() {
  _cached_size_ = 0;
  max_friends_ = 0u;
  max_received_invitations_ = 0u;
  max_sent_invitations_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.friends.SubscribeResponse)
  SharedDtor();
}

void SubscribeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeResponse_descriptor_;
}

const SubscribeResponse& SubscribeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_5fservice_2eproto();
  return *default_instance_;
}

SubscribeResponse* SubscribeResponse::default_instance_ = NULL;

SubscribeResponse* SubscribeResponse::New() const {
  return new SubscribeResponse;
}

void SubscribeResponse::Swap(SubscribeResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SubscribeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeResponse_descriptor_;
  metadata.reflection = SubscribeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsubscribeRequest::kAgentIdFieldNumber;
const int UnsubscribeRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

UnsubscribeRequest::UnsubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.friends.UnsubscribeRequest)
}

void UnsubscribeRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.friends.UnsubscribeRequest)
}

void UnsubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsubscribeRequest::~UnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.friends.UnsubscribeRequest)
  SharedDtor();
}

void UnsubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsubscribeRequest_descriptor_;
}

const UnsubscribeRequest& UnsubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_5fservice_2eproto();
  return *default_instance_;
}

UnsubscribeRequest* UnsubscribeRequest::default_instance_ = NULL;

UnsubscribeRequest* UnsubscribeRequest::New() const {
  return new UnsubscribeRequest;
}

void UnsubscribeRequest::Swap(UnsubscribeRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UnsubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsubscribeRequest_descriptor_;
  metadata.reflection = UnsubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenericFriendRequest::kAgentIdFieldNumber;
const int GenericFriendRequest::kTargetIdFieldNumber;
#endif  // !_MSC_VER

GenericFriendRequest::GenericFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.friends.GenericFriendRequest)
}

void GenericFriendRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  target_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

GenericFriendRequest::GenericFriendRequest(const GenericFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.friends.GenericFriendRequest)
}

void GenericFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericFriendRequest::~GenericFriendRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.friends.GenericFriendRequest)
  SharedDtor();
}

void GenericFriendRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
  }
}

void GenericFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericFriendRequest_descriptor_;
}

const GenericFriendRequest& GenericFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_5fservice_2eproto();
  return *default_instance_;
}

GenericFriendRequest* GenericFriendRequest::default_instance_ = NULL;

GenericFriendRequest* GenericFriendRequest::New() const {
  return new GenericFriendRequest;
}

void GenericFriendRequest::Swap(GenericFriendRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GenericFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericFriendRequest_descriptor_;
  metadata.reflection = GenericFriendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenericFriendResponse::kTargetFriendFieldNumber;
#endif  // !_MSC_VER

GenericFriendResponse::GenericFriendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.friends.GenericFriendResponse)
}

void GenericFriendResponse::InitAsDefaultInstance() {
  target_friend_ = const_cast< ::Battlenet::friends::Friend*>(&::Battlenet::friends::Friend::default_instance());
}

GenericFriendResponse::GenericFriendResponse(const GenericFriendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.friends.GenericFriendResponse)
}

void GenericFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  target_friend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericFriendResponse::~GenericFriendResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.friends.GenericFriendResponse)
  SharedDtor();
}

void GenericFriendResponse::SharedDtor() {
  if (this != default_instance_) {
    delete target_friend_;
  }
}

void GenericFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericFriendResponse_descriptor_;
}

const GenericFriendResponse& GenericFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_5fservice_2eproto();
  return *default_instance_;
}

GenericFriendResponse* GenericFriendResponse::default_instance_ = NULL;

GenericFriendResponse* GenericFriendResponse::New() const {
  return new GenericFriendResponse;
}

void GenericFriendResponse::Swap(GenericFriendResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GenericFriendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericFriendResponse_descriptor_;
  metadata.reflection = GenericFriendResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssignRoleRequest::kAgentIdFieldNumber;
const int AssignRoleRequest::kTargetIdFieldNumber;
const int AssignRoleRequest::kRoleFieldNumber;
#endif  // !_MSC_VER

AssignRoleRequest::AssignRoleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.friends.AssignRoleRequest)
}

void AssignRoleRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  target_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

AssignRoleRequest::AssignRoleRequest(const AssignRoleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.friends.AssignRoleRequest)
}

void AssignRoleRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssignRoleRequest::~AssignRoleRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.friends.AssignRoleRequest)
  SharedDtor();
}

void AssignRoleRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
  }
}

void AssignRoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssignRoleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssignRoleRequest_descriptor_;
}

const AssignRoleRequest& AssignRoleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_5fservice_2eproto();
  return *default_instance_;
}

AssignRoleRequest* AssignRoleRequest::default_instance_ = NULL;

AssignRoleRequest* AssignRoleRequest::New() const {
  return new AssignRoleRequest;
}

void AssignRoleRequest::Swap(AssignRoleRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AssignRoleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssignRoleRequest_descriptor_;
  metadata.reflection = AssignRoleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ViewFriendsRequest::kAgentIdFieldNumber;
const int ViewFriendsRequest::kTargetIdFieldNumber;
const int ViewFriendsRequest::kRoleFieldNumber;
#endif  // !_MSC_VER

ViewFriendsRequest::ViewFriendsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.friends.ViewFriendsRequest)
}

void ViewFriendsRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  target_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

ViewFriendsRequest::ViewFriendsRequest(const ViewFriendsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.friends.ViewFriendsRequest)
}

void ViewFriendsRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewFriendsRequest::~ViewFriendsRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.friends.ViewFriendsRequest)
  SharedDtor();
}

void ViewFriendsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
  }
}

void ViewFriendsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewFriendsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewFriendsRequest_descriptor_;
}

const ViewFriendsRequest& ViewFriendsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_5fservice_2eproto();
  return *default_instance_;
}

ViewFriendsRequest* ViewFriendsRequest::default_instance_ = NULL;

ViewFriendsRequest* ViewFriendsRequest::New() const {
  return new ViewFriendsRequest;
}

void ViewFriendsRequest::Swap(ViewFriendsRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ViewFriendsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewFriendsRequest_descriptor_;
  metadata.reflection = ViewFriendsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ViewFriendsResponse::kFriendsFieldNumber;
#endif  // !_MSC_VER

ViewFriendsResponse::ViewFriendsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.friends.ViewFriendsResponse)
}

void ViewFriendsResponse::InitAsDefaultInstance() {
}

ViewFriendsResponse::ViewFriendsResponse(const ViewFriendsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.friends.ViewFriendsResponse)
}

void ViewFriendsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewFriendsResponse::~ViewFriendsResponse() {
  // @@protoc_insertion_point(destructor:Battlenet.friends.ViewFriendsResponse)
  SharedDtor();
}

void ViewFriendsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ViewFriendsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewFriendsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewFriendsResponse_descriptor_;
}

const ViewFriendsResponse& ViewFriendsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_5fservice_2eproto();
  return *default_instance_;
}

ViewFriendsResponse* ViewFriendsResponse::default_instance_ = NULL;

ViewFriendsResponse* ViewFriendsResponse::New() const {
  return new ViewFriendsResponse;
}

void ViewFriendsResponse::Swap(ViewFriendsResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ViewFriendsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewFriendsResponse_descriptor_;
  metadata.reflection = ViewFriendsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFriendStateRequest::kAgentIdFieldNumber;
const int UpdateFriendStateRequest::kTargetIdFieldNumber;
const int UpdateFriendStateRequest::kAttributeFieldNumber;
const int UpdateFriendStateRequest::kAttributesEpochFieldNumber;
#endif  // !_MSC_VER

UpdateFriendStateRequest::UpdateFriendStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.friends.UpdateFriendStateRequest)
}

void UpdateFriendStateRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  target_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

UpdateFriendStateRequest::UpdateFriendStateRequest(const UpdateFriendStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.friends.UpdateFriendStateRequest)
}

void UpdateFriendStateRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  attributes_epoch_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFriendStateRequest::~UpdateFriendStateRequest() {
  // @@protoc_insertion_point(destructor:Battlenet.friends.UpdateFriendStateRequest)
  SharedDtor();
}

void UpdateFriendStateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
  }
}

void UpdateFriendStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFriendStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFriendStateRequest_descriptor_;
}

const UpdateFriendStateRequest& UpdateFriendStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_5fservice_2eproto();
  return *default_instance_;
}

UpdateFriendStateRequest* UpdateFriendStateRequest::default_instance_ = NULL;

UpdateFriendStateRequest* UpdateFriendStateRequest::New() const {
  return new UpdateFriendStateRequest;
}

void UpdateFriendStateRequest::Swap(UpdateFriendStateRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UpdateFriendStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFriendStateRequest_descriptor_;
  metadata.reflection = UpdateFriendStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendNotification::kTargetFieldNumber;
const int FriendNotification::kGameAccountIdFieldNumber;
const int FriendNotification::kPeerFieldNumber;
const int FriendNotification::kAccountIdFieldNumber;
#endif  // !_MSC_VER

FriendNotification::FriendNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.friends.FriendNotification)
}

void FriendNotification::InitAsDefaultInstance() {
  target_ = const_cast< ::Battlenet::friends::Friend*>(&::Battlenet::friends::Friend::default_instance());
  game_account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  peer_ = const_cast< ::Battlenet::ProcessId*>(&::Battlenet::ProcessId::default_instance());
  account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

FriendNotification::FriendNotification(const FriendNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.friends.FriendNotification)
}

void FriendNotification::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  game_account_id_ = NULL;
  peer_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendNotification::~FriendNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.friends.FriendNotification)
  SharedDtor();
}

void FriendNotification::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
    delete game_account_id_;
    delete peer_;
    delete account_id_;
  }
}

void FriendNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendNotification_descriptor_;
}

const FriendNotification& FriendNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_5fservice_2eproto();
  return *default_instance_;
}

FriendNotification* FriendNotification::default_instance_ = NULL;

FriendNotification* FriendNotification::New() const {
  return new FriendNotification;
}

void FriendNotification::Swap(FriendNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata FriendNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendNotification_descriptor_;
  metadata.reflection = FriendNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFriendStateNotification::kChangedFriendFieldNumber;
const int UpdateFriendStateNotification::kGameAccountIdFieldNumber;
const int UpdateFriendStateNotification::kPeerFieldNumber;
const int UpdateFriendStateNotification::kAccountIdFieldNumber;
#endif  // !_MSC_VER

UpdateFriendStateNotification::UpdateFriendStateNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.friends.UpdateFriendStateNotification)
}

void UpdateFriendStateNotification::InitAsDefaultInstance() {
  changed_friend_ = const_cast< ::Battlenet::friends::Friend*>(&::Battlenet::friends::Friend::default_instance());
  game_account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  peer_ = const_cast< ::Battlenet::ProcessId*>(&::Battlenet::ProcessId::default_instance());
  account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

UpdateFriendStateNotification::UpdateFriendStateNotification(const UpdateFriendStateNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.friends.UpdateFriendStateNotification)
}

void UpdateFriendStateNotification::SharedCtor() {
  _cached_size_ = 0;
  changed_friend_ = NULL;
  game_account_id_ = NULL;
  peer_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFriendStateNotification::~UpdateFriendStateNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.friends.UpdateFriendStateNotification)
  SharedDtor();
}

void UpdateFriendStateNotification::SharedDtor() {
  if (this != default_instance_) {
    delete changed_friend_;
    delete game_account_id_;
    delete peer_;
    delete account_id_;
  }
}

void UpdateFriendStateNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFriendStateNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFriendStateNotification_descriptor_;
}

const UpdateFriendStateNotification& UpdateFriendStateNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_5fservice_2eproto();
  return *default_instance_;
}

UpdateFriendStateNotification* UpdateFriendStateNotification::default_instance_ = NULL;

UpdateFriendStateNotification* UpdateFriendStateNotification::New() const {
  return new UpdateFriendStateNotification;
}

void UpdateFriendStateNotification::Swap(UpdateFriendStateNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UpdateFriendStateNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFriendStateNotification_descriptor_;
  metadata.reflection = UpdateFriendStateNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvitationNotification::kInvitationFieldNumber;
const int InvitationNotification::kGameAccountIdFieldNumber;
const int InvitationNotification::kReasonFieldNumber;
const int InvitationNotification::kPeerFieldNumber;
const int InvitationNotification::kAccountIdFieldNumber;
#endif  // !_MSC_VER

InvitationNotification::InvitationNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.friends.InvitationNotification)
}

void InvitationNotification::InitAsDefaultInstance() {
  invitation_ = const_cast< ::Battlenet::Invitation*>(&::Battlenet::Invitation::default_instance());
  game_account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  peer_ = const_cast< ::Battlenet::ProcessId*>(&::Battlenet::ProcessId::default_instance());
  account_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
}

InvitationNotification::InvitationNotification(const InvitationNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.friends.InvitationNotification)
}

void InvitationNotification::SharedCtor() {
  _cached_size_ = 0;
  invitation_ = NULL;
  game_account_id_ = NULL;
  reason_ = 0u;
  peer_ = NULL;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitationNotification::~InvitationNotification() {
  // @@protoc_insertion_point(destructor:Battlenet.friends.InvitationNotification)
  SharedDtor();
}

void InvitationNotification::SharedDtor() {
  if (this != default_instance_) {
    delete invitation_;
    delete game_account_id_;
    delete peer_;
    delete account_id_;
  }
}

void InvitationNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitationNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitationNotification_descriptor_;
}

const InvitationNotification& InvitationNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_5fservice_2eproto();
  return *default_instance_;
}

InvitationNotification* InvitationNotification::default_instance_ = NULL;

InvitationNotification* InvitationNotification::New() const {
  return new InvitationNotification;
}

void InvitationNotification::Swap(InvitationNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata InvitationNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvitationNotification_descriptor_;
  metadata.reflection = InvitationNotification_reflection_;
  return metadata;
}


// ===================================================================

FriendsService::~FriendsService() {}

const ::google::protobuf::ServiceDescriptor* FriendsService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* FriendsService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsService_descriptor_;
}

void FriendsService::Subscribe(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::SubscribeRequest*,
                         ::Battlenet::friends::SubscribeResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Subscribe() not implemented.");
  done->Run();
}

void FriendsService::SendInvitation(::google::protobuf::RpcController* controller,
                         const ::Battlenet::SendInvitationRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendInvitation() not implemented.");
  done->Run();
}

void FriendsService::AcceptInvitation(::google::protobuf::RpcController* controller,
                         const ::Battlenet::GenericInvitationRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AcceptInvitation() not implemented.");
  done->Run();
}

void FriendsService::RevokeInvitation(::google::protobuf::RpcController* controller,
                         const ::Battlenet::GenericInvitationRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RevokeInvitation() not implemented.");
  done->Run();
}

void FriendsService::DeclineInvitation(::google::protobuf::RpcController* controller,
                         const ::Battlenet::GenericInvitationRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeclineInvitation() not implemented.");
  done->Run();
}

void FriendsService::IgnoreInvitation(::google::protobuf::RpcController* controller,
                         const ::Battlenet::GenericInvitationRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IgnoreInvitation() not implemented.");
  done->Run();
}

void FriendsService::AssignRole(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::AssignRoleRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AssignRole() not implemented.");
  done->Run();
}

void FriendsService::RemoveFriend(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::GenericFriendRequest*,
                         ::Battlenet::friends::GenericFriendResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveFriend() not implemented.");
  done->Run();
}

void FriendsService::ViewFriends(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::ViewFriendsRequest*,
                         ::Battlenet::friends::ViewFriendsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ViewFriends() not implemented.");
  done->Run();
}

void FriendsService::UpdateFriendState(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::UpdateFriendStateRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateFriendState() not implemented.");
  done->Run();
}

void FriendsService::Unsubscribe(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::UnsubscribeRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Unsubscribe() not implemented.");
  done->Run();
}

void FriendsService::RevokeAllInvitations(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::GenericFriendRequest*,
                         ::Battlenet::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RevokeAllInvitations() not implemented.");
  done->Run();
}

void FriendsService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), FriendsService_descriptor_);
  switch(method->index()) {
    case 0:
      Subscribe(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::SubscribeRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::friends::SubscribeResponse*>(response),
             done);
      break;
    case 1:
      SendInvitation(controller,
             ::google::protobuf::down_cast<const ::Battlenet::SendInvitationRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 2:
      AcceptInvitation(controller,
             ::google::protobuf::down_cast<const ::Battlenet::GenericInvitationRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 3:
      RevokeInvitation(controller,
             ::google::protobuf::down_cast<const ::Battlenet::GenericInvitationRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 4:
      DeclineInvitation(controller,
             ::google::protobuf::down_cast<const ::Battlenet::GenericInvitationRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 5:
      IgnoreInvitation(controller,
             ::google::protobuf::down_cast<const ::Battlenet::GenericInvitationRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 6:
      AssignRole(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::AssignRoleRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 7:
      RemoveFriend(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::GenericFriendRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::friends::GenericFriendResponse*>(response),
             done);
      break;
    case 8:
      ViewFriends(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::ViewFriendsRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::friends::ViewFriendsResponse*>(response),
             done);
      break;
    case 9:
      UpdateFriendState(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::UpdateFriendStateRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 10:
      Unsubscribe(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::UnsubscribeRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    case 11:
      RevokeAllInvitations(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::GenericFriendRequest*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NoData*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FriendsService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::friends::SubscribeRequest::default_instance();
    case 1:
      return ::Battlenet::SendInvitationRequest::default_instance();
    case 2:
      return ::Battlenet::GenericInvitationRequest::default_instance();
    case 3:
      return ::Battlenet::GenericInvitationRequest::default_instance();
    case 4:
      return ::Battlenet::GenericInvitationRequest::default_instance();
    case 5:
      return ::Battlenet::GenericInvitationRequest::default_instance();
    case 6:
      return ::Battlenet::friends::AssignRoleRequest::default_instance();
    case 7:
      return ::Battlenet::friends::GenericFriendRequest::default_instance();
    case 8:
      return ::Battlenet::friends::ViewFriendsRequest::default_instance();
    case 9:
      return ::Battlenet::friends::UpdateFriendStateRequest::default_instance();
    case 10:
      return ::Battlenet::friends::UnsubscribeRequest::default_instance();
    case 11:
      return ::Battlenet::friends::GenericFriendRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& FriendsService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::friends::SubscribeResponse::default_instance();
    case 1:
      return ::Battlenet::NoData::default_instance();
    case 2:
      return ::Battlenet::NoData::default_instance();
    case 3:
      return ::Battlenet::NoData::default_instance();
    case 4:
      return ::Battlenet::NoData::default_instance();
    case 5:
      return ::Battlenet::NoData::default_instance();
    case 6:
      return ::Battlenet::NoData::default_instance();
    case 7:
      return ::Battlenet::friends::GenericFriendResponse::default_instance();
    case 8:
      return ::Battlenet::friends::ViewFriendsResponse::default_instance();
    case 9:
      return ::Battlenet::NoData::default_instance();
    case 10:
      return ::Battlenet::NoData::default_instance();
    case 11:
      return ::Battlenet::NoData::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

FriendsService_Stub::FriendsService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendsService_Stub::FriendsService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FriendsService_Stub::~FriendsService_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendsService_Stub::Subscribe(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::SubscribeRequest* request,
                              ::Battlenet::friends::SubscribeResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendsService_Stub::SendInvitation(::google::protobuf::RpcController* controller,
                              const ::Battlenet::SendInvitationRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FriendsService_Stub::AcceptInvitation(::google::protobuf::RpcController* controller,
                              const ::Battlenet::GenericInvitationRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FriendsService_Stub::RevokeInvitation(::google::protobuf::RpcController* controller,
                              const ::Battlenet::GenericInvitationRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void FriendsService_Stub::DeclineInvitation(::google::protobuf::RpcController* controller,
                              const ::Battlenet::GenericInvitationRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void FriendsService_Stub::IgnoreInvitation(::google::protobuf::RpcController* controller,
                              const ::Battlenet::GenericInvitationRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void FriendsService_Stub::AssignRole(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::AssignRoleRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void FriendsService_Stub::RemoveFriend(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::GenericFriendRequest* request,
                              ::Battlenet::friends::GenericFriendResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void FriendsService_Stub::ViewFriends(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::ViewFriendsRequest* request,
                              ::Battlenet::friends::ViewFriendsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void FriendsService_Stub::UpdateFriendState(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::UpdateFriendStateRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void FriendsService_Stub::Unsubscribe(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::UnsubscribeRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void FriendsService_Stub::RevokeAllInvitations(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::GenericFriendRequest* request,
                              ::Battlenet::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
// ===================================================================

FriendsListener::~FriendsListener() {}

const ::google::protobuf::ServiceDescriptor* FriendsListener::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsListener_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* FriendsListener::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsListener_descriptor_;
}

void FriendsListener::OnFriendAdded(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::FriendNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnFriendAdded() not implemented.");
  done->Run();
}

void FriendsListener::OnFriendRemoved(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::FriendNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnFriendRemoved() not implemented.");
  done->Run();
}

void FriendsListener::OnReceivedInvitationAdded(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::InvitationNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnReceivedInvitationAdded() not implemented.");
  done->Run();
}

void FriendsListener::OnReceivedInvitationRemoved(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::InvitationNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnReceivedInvitationRemoved() not implemented.");
  done->Run();
}

void FriendsListener::OnSentInvitationAdded(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::InvitationNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnSentInvitationAdded() not implemented.");
  done->Run();
}

void FriendsListener::OnSentInvitationRemoved(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::InvitationNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnSentInvitationRemoved() not implemented.");
  done->Run();
}

void FriendsListener::OnUpdateFriendState(::google::protobuf::RpcController* controller,
                         const ::Battlenet::friends::UpdateFriendStateNotification*,
                         ::Battlenet::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OnUpdateFriendState() not implemented.");
  done->Run();
}

void FriendsListener::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), FriendsListener_descriptor_);
  switch(method->index()) {
    case 0:
      OnFriendAdded(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::FriendNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 1:
      OnFriendRemoved(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::FriendNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 2:
      OnReceivedInvitationAdded(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::InvitationNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 3:
      OnReceivedInvitationRemoved(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::InvitationNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 4:
      OnSentInvitationAdded(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::InvitationNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 5:
      OnSentInvitationRemoved(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::InvitationNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    case 6:
      OnUpdateFriendState(controller,
             ::google::protobuf::down_cast<const ::Battlenet::friends::UpdateFriendStateNotification*>(request),
             ::google::protobuf::down_cast< ::Battlenet::NO_RESPONSE*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FriendsListener::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::friends::FriendNotification::default_instance();
    case 1:
      return ::Battlenet::friends::FriendNotification::default_instance();
    case 2:
      return ::Battlenet::friends::InvitationNotification::default_instance();
    case 3:
      return ::Battlenet::friends::InvitationNotification::default_instance();
    case 4:
      return ::Battlenet::friends::InvitationNotification::default_instance();
    case 5:
      return ::Battlenet::friends::InvitationNotification::default_instance();
    case 6:
      return ::Battlenet::friends::UpdateFriendStateNotification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& FriendsListener::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 1:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 2:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 3:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 4:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 5:
      return ::Battlenet::NO_RESPONSE::default_instance();
    case 6:
      return ::Battlenet::NO_RESPONSE::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

FriendsListener_Stub::FriendsListener_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendsListener_Stub::FriendsListener_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FriendsListener_Stub::~FriendsListener_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendsListener_Stub::OnFriendAdded(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::FriendNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendsListener_Stub::OnFriendRemoved(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::FriendNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FriendsListener_Stub::OnReceivedInvitationAdded(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::InvitationNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FriendsListener_Stub::OnReceivedInvitationRemoved(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::InvitationNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void FriendsListener_Stub::OnSentInvitationAdded(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::InvitationNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void FriendsListener_Stub::OnSentInvitationRemoved(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::InvitationNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void FriendsListener_Stub::OnUpdateFriendState(::google::protobuf::RpcController* controller,
                              const ::Battlenet::friends::UpdateFriendStateNotification* request,
                              ::Battlenet::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace friends
}  // namespace Battlenet

// @@protoc_insertion_point(global_scope)
