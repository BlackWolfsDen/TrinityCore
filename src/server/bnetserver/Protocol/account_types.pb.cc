// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "account_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Battlenet {
namespace account {

namespace {

const ::google::protobuf::Descriptor* AccountId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountId_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLicense_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLicense_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountCredential_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountCredential_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountBlob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountBlob_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountBlobList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountBlobList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAccountHandle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAccountHandle_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAccountLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAccountLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAccountBlob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAccountBlob_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAccountBlobList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAccountBlobList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountReference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountReference_reflection_ = NULL;
const ::google::protobuf::Descriptor* Identity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Identity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProgramTag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProgramTag_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionTag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionTag_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountFieldTags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountFieldTags_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAccountFieldTags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAccountFieldTags_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountFieldOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountFieldOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAccountFieldOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAccountFieldOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriberReference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriberReference_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivacyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivacyInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PrivacyInfo_GameInfoPrivacy_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ParentalControlInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParentalControlInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameLevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameLevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameTimeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameTimeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameTimeRemainingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameTimeRemainingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* RAFInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RAFInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameSessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameSessionUpdateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSessionUpdateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameSessionLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSessionLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAIS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAIS_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAccountList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAccountList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountState_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountStateTagged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountStateTagged_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAccountState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAccountState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAccountStateTagged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAccountStateTagged_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthorizedData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthorizedData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IdentityVerificationStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_account_5ftypes_2eproto() {
  protobuf_AddDesc_account_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "account_types.proto");
  GOOGLE_CHECK(file != NULL);
  AccountId_descriptor_ = file->message_type(0);
  static const int AccountId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountId, id_),
  };
  AccountId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountId_descriptor_,
      AccountId::default_instance_,
      AccountId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountId));
  AccountLicense_descriptor_ = file->message_type(1);
  static const int AccountLicense_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLicense, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLicense, expires_),
  };
  AccountLicense_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLicense_descriptor_,
      AccountLicense::default_instance_,
      AccountLicense_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLicense, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLicense, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLicense));
  AccountCredential_descriptor_ = file->message_type(2);
  static const int AccountCredential_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCredential, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCredential, data_),
  };
  AccountCredential_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountCredential_descriptor_,
      AccountCredential::default_instance_,
      AccountCredential_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCredential, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountCredential, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountCredential));
  AccountBlob_descriptor_ = file->message_type(3);
  static const int AccountBlob_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, secure_release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, whitelist_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, whitelist_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, full_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, licenses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, credentials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, account_links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, battle_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, default_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, legal_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, legal_locale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, cache_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, parental_control_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, preferred_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, identity_check_status_),
  };
  AccountBlob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountBlob_descriptor_,
      AccountBlob::default_instance_,
      AccountBlob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountBlob));
  AccountBlobList_descriptor_ = file->message_type(4);
  static const int AccountBlobList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlobList, blob_),
  };
  AccountBlobList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountBlobList_descriptor_,
      AccountBlobList::default_instance_,
      AccountBlobList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlobList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlobList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountBlobList));
  GameAccountHandle_descriptor_ = file->message_type(5);
  static const int GameAccountHandle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountHandle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountHandle, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountHandle, region_),
  };
  GameAccountHandle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAccountHandle_descriptor_,
      GameAccountHandle::default_instance_,
      GameAccountHandle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountHandle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountHandle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAccountHandle));
  GameAccountLink_descriptor_ = file->message_type(6);
  static const int GameAccountLink_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountLink, game_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountLink, name_),
  };
  GameAccountLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAccountLink_descriptor_,
      GameAccountLink::default_instance_,
      GameAccountLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAccountLink));
  GameAccountBlob_descriptor_ = file->message_type(7);
  static const int GameAccountBlob_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, game_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, realm_permissions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, billing_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, cache_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, subscription_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, units_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, status_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, box_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, box_level_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, licenses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, raf_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, raf_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, raf_expiration_),
  };
  GameAccountBlob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAccountBlob_descriptor_,
      GameAccountBlob::default_instance_,
      GameAccountBlob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAccountBlob));
  GameAccountBlobList_descriptor_ = file->message_type(8);
  static const int GameAccountBlobList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlobList, blob_),
  };
  GameAccountBlobList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAccountBlobList_descriptor_,
      GameAccountBlobList::default_instance_,
      GameAccountBlobList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlobList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountBlobList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAccountBlobList));
  AccountReference_descriptor_ = file->message_type(9);
  static const int AccountReference_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountReference, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountReference, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountReference, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountReference, battle_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountReference, region_),
  };
  AccountReference_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountReference_descriptor_,
      AccountReference::default_instance_,
      AccountReference_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountReference, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountReference, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountReference));
  Identity_descriptor_ = file->message_type(10);
  static const int Identity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identity, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identity, game_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identity, process_),
  };
  Identity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Identity_descriptor_,
      Identity::default_instance_,
      Identity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Identity));
  ProgramTag_descriptor_ = file->message_type(11);
  static const int ProgramTag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramTag, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramTag, tag_),
  };
  ProgramTag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProgramTag_descriptor_,
      ProgramTag::default_instance_,
      ProgramTag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramTag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramTag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProgramTag));
  RegionTag_descriptor_ = file->message_type(12);
  static const int RegionTag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionTag, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionTag, tag_),
  };
  RegionTag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionTag_descriptor_,
      RegionTag::default_instance_,
      RegionTag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionTag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionTag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionTag));
  AccountFieldTags_descriptor_ = file->message_type(13);
  static const int AccountFieldTags_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldTags, account_level_info_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldTags, privacy_info_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldTags, parental_control_info_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldTags, game_level_info_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldTags, game_status_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldTags, game_account_tags_),
  };
  AccountFieldTags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountFieldTags_descriptor_,
      AccountFieldTags::default_instance_,
      AccountFieldTags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldTags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldTags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountFieldTags));
  GameAccountFieldTags_descriptor_ = file->message_type(14);
  static const int GameAccountFieldTags_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFieldTags, game_level_info_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFieldTags, game_time_info_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFieldTags, game_status_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFieldTags, raf_info_tag_),
  };
  GameAccountFieldTags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAccountFieldTags_descriptor_,
      GameAccountFieldTags::default_instance_,
      GameAccountFieldTags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFieldTags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFieldTags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAccountFieldTags));
  AccountFieldOptions_descriptor_ = file->message_type(15);
  static const int AccountFieldOptions_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldOptions, all_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldOptions, field_account_level_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldOptions, field_privacy_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldOptions, field_parental_control_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldOptions, field_game_level_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldOptions, field_game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldOptions, field_game_accounts_),
  };
  AccountFieldOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountFieldOptions_descriptor_,
      AccountFieldOptions::default_instance_,
      AccountFieldOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountFieldOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountFieldOptions));
  GameAccountFieldOptions_descriptor_ = file->message_type(16);
  static const int GameAccountFieldOptions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFieldOptions, all_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFieldOptions, field_game_level_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFieldOptions, field_game_time_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFieldOptions, field_game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFieldOptions, field_raf_info_),
  };
  GameAccountFieldOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAccountFieldOptions_descriptor_,
      GameAccountFieldOptions::default_instance_,
      GameAccountFieldOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFieldOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountFieldOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAccountFieldOptions));
  SubscriberReference_descriptor_ = file->message_type(17);
  static const int SubscriberReference_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberReference, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberReference, entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberReference, account_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberReference, account_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberReference, game_account_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberReference, game_account_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberReference, subscriber_id_),
  };
  SubscriberReference_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriberReference_descriptor_,
      SubscriberReference::default_instance_,
      SubscriberReference_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberReference, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberReference, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriberReference));
  AccountLevelInfo_descriptor_ = file->message_type(18);
  static const int AccountLevelInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLevelInfo, licenses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLevelInfo, default_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLevelInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLevelInfo, preferred_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLevelInfo, full_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLevelInfo, battle_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLevelInfo, muted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLevelInfo, manual_review_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLevelInfo, account_paid_any_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLevelInfo, identity_check_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLevelInfo, email_),
  };
  AccountLevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLevelInfo_descriptor_,
      AccountLevelInfo::default_instance_,
      AccountLevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLevelInfo));
  PrivacyInfo_descriptor_ = file->message_type(19);
  static const int PrivacyInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivacyInfo, is_using_rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivacyInfo, is_real_id_visible_for_view_friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivacyInfo, is_hidden_from_friend_finder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivacyInfo, game_info_privacy_),
  };
  PrivacyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrivacyInfo_descriptor_,
      PrivacyInfo::default_instance_,
      PrivacyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivacyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivacyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrivacyInfo));
  PrivacyInfo_GameInfoPrivacy_descriptor_ = PrivacyInfo_descriptor_->enum_type(0);
  ParentalControlInfo_descriptor_ = file->message_type(20);
  static const int ParentalControlInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentalControlInfo, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentalControlInfo, minutes_per_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentalControlInfo, minutes_per_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentalControlInfo, can_receive_voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentalControlInfo, can_send_voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentalControlInfo, play_schedule_),
  };
  ParentalControlInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParentalControlInfo_descriptor_,
      ParentalControlInfo::default_instance_,
      ParentalControlInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentalControlInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentalControlInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParentalControlInfo));
  GameLevelInfo_descriptor_ = file->message_type(21);
  static const int GameLevelInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLevelInfo, is_trial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLevelInfo, is_lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLevelInfo, is_restricted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLevelInfo, is_beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLevelInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLevelInfo, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLevelInfo, licenses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLevelInfo, realm_permissions_),
  };
  GameLevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameLevelInfo_descriptor_,
      GameLevelInfo::default_instance_,
      GameLevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameLevelInfo));
  GameTimeInfo_descriptor_ = file->message_type(22);
  static const int GameTimeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeInfo, is_unlimited_play_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeInfo, play_time_expires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeInfo, is_subscription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeInfo, is_recurring_subscription_),
  };
  GameTimeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameTimeInfo_descriptor_,
      GameTimeInfo::default_instance_,
      GameTimeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameTimeInfo));
  GameTimeRemainingInfo_descriptor_ = file->message_type(23);
  static const int GameTimeRemainingInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeRemainingInfo, minutes_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeRemainingInfo, parental_daily_minutes_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeRemainingInfo, parental_weekly_minutes_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeRemainingInfo, seconds_remaining_until_kick_),
  };
  GameTimeRemainingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameTimeRemainingInfo_descriptor_,
      GameTimeRemainingInfo::default_instance_,
      GameTimeRemainingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeRemainingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeRemainingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameTimeRemainingInfo));
  GameStatus_descriptor_ = file->message_type(24);
  static const int GameStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, is_suspended_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, is_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, suspension_expires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, is_locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, is_bam_unlockable_),
  };
  GameStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStatus_descriptor_,
      GameStatus::default_instance_,
      GameStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStatus));
  RAFInfo_descriptor_ = file->message_type(25);
  static const int RAFInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RAFInfo, raf_info_),
  };
  RAFInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RAFInfo_descriptor_,
      RAFInfo::default_instance_,
      RAFInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RAFInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RAFInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RAFInfo));
  GameSessionInfo_descriptor_ = file->message_type(26);
  static const int GameSessionInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionInfo, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionInfo, has_benefactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionInfo, is_using_igr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionInfo, parental_controls_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionInfo, start_time_sec_),
  };
  GameSessionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameSessionInfo_descriptor_,
      GameSessionInfo::default_instance_,
      GameSessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameSessionInfo));
  GameSessionUpdateInfo_descriptor_ = file->message_type(27);
  static const int GameSessionUpdateInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionUpdateInfo, cais_),
  };
  GameSessionUpdateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameSessionUpdateInfo_descriptor_,
      GameSessionUpdateInfo::default_instance_,
      GameSessionUpdateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionUpdateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionUpdateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameSessionUpdateInfo));
  GameSessionLocation_descriptor_ = file->message_type(28);
  static const int GameSessionLocation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionLocation, ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionLocation, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionLocation, city_),
  };
  GameSessionLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameSessionLocation_descriptor_,
      GameSessionLocation::default_instance_,
      GameSessionLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameSessionLocation));
  CAIS_descriptor_ = file->message_type(29);
  static const int CAIS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAIS, played_minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAIS, rested_minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAIS, last_heard_time_),
  };
  CAIS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAIS_descriptor_,
      CAIS::default_instance_,
      CAIS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAIS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAIS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAIS));
  GameAccountList_descriptor_ = file->message_type(30);
  static const int GameAccountList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountList, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountList, handle_),
  };
  GameAccountList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAccountList_descriptor_,
      GameAccountList::default_instance_,
      GameAccountList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAccountList));
  AccountState_descriptor_ = file->message_type(31);
  static const int AccountState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountState, account_level_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountState, privacy_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountState, parental_control_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountState, game_level_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountState, game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountState, game_accounts_),
  };
  AccountState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountState_descriptor_,
      AccountState::default_instance_,
      AccountState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountState));
  AccountStateTagged_descriptor_ = file->message_type(32);
  static const int AccountStateTagged_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStateTagged, account_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStateTagged, account_tags_),
  };
  AccountStateTagged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountStateTagged_descriptor_,
      AccountStateTagged::default_instance_,
      AccountStateTagged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStateTagged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountStateTagged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountStateTagged));
  GameAccountState_descriptor_ = file->message_type(33);
  static const int GameAccountState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountState, game_level_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountState, game_time_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountState, game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountState, raf_info_),
  };
  GameAccountState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAccountState_descriptor_,
      GameAccountState::default_instance_,
      GameAccountState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAccountState));
  GameAccountStateTagged_descriptor_ = file->message_type(34);
  static const int GameAccountStateTagged_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountStateTagged, game_account_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountStateTagged, game_account_tags_),
  };
  GameAccountStateTagged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAccountStateTagged_descriptor_,
      GameAccountStateTagged::default_instance_,
      GameAccountStateTagged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountStateTagged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAccountStateTagged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAccountStateTagged));
  AuthorizedData_descriptor_ = file->message_type(35);
  static const int AuthorizedData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizedData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizedData, license_),
  };
  AuthorizedData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthorizedData_descriptor_,
      AuthorizedData::default_instance_,
      AuthorizedData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizedData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizedData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthorizedData));
  IdentityVerificationStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_account_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountId_descriptor_, &AccountId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLicense_descriptor_, &AccountLicense::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountCredential_descriptor_, &AccountCredential::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountBlob_descriptor_, &AccountBlob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountBlobList_descriptor_, &AccountBlobList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAccountHandle_descriptor_, &GameAccountHandle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAccountLink_descriptor_, &GameAccountLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAccountBlob_descriptor_, &GameAccountBlob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAccountBlobList_descriptor_, &GameAccountBlobList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountReference_descriptor_, &AccountReference::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Identity_descriptor_, &Identity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProgramTag_descriptor_, &ProgramTag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionTag_descriptor_, &RegionTag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountFieldTags_descriptor_, &AccountFieldTags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAccountFieldTags_descriptor_, &GameAccountFieldTags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountFieldOptions_descriptor_, &AccountFieldOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAccountFieldOptions_descriptor_, &GameAccountFieldOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriberReference_descriptor_, &SubscriberReference::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLevelInfo_descriptor_, &AccountLevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrivacyInfo_descriptor_, &PrivacyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParentalControlInfo_descriptor_, &ParentalControlInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameLevelInfo_descriptor_, &GameLevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameTimeInfo_descriptor_, &GameTimeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameTimeRemainingInfo_descriptor_, &GameTimeRemainingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStatus_descriptor_, &GameStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RAFInfo_descriptor_, &RAFInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameSessionInfo_descriptor_, &GameSessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameSessionUpdateInfo_descriptor_, &GameSessionUpdateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameSessionLocation_descriptor_, &GameSessionLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAIS_descriptor_, &CAIS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAccountList_descriptor_, &GameAccountList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountState_descriptor_, &AccountState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountStateTagged_descriptor_, &AccountStateTagged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAccountState_descriptor_, &GameAccountState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAccountStateTagged_descriptor_, &GameAccountStateTagged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthorizedData_descriptor_, &AuthorizedData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_account_5ftypes_2eproto() {
  delete AccountId::default_instance_;
  delete AccountId_reflection_;
  delete AccountLicense::default_instance_;
  delete AccountLicense_reflection_;
  delete AccountCredential::default_instance_;
  delete AccountCredential_reflection_;
  delete AccountBlob::default_instance_;
  delete AccountBlob_reflection_;
  delete AccountBlobList::default_instance_;
  delete AccountBlobList_reflection_;
  delete GameAccountHandle::default_instance_;
  delete GameAccountHandle_reflection_;
  delete GameAccountLink::default_instance_;
  delete GameAccountLink_reflection_;
  delete GameAccountBlob::default_instance_;
  delete GameAccountBlob_reflection_;
  delete GameAccountBlobList::default_instance_;
  delete GameAccountBlobList_reflection_;
  delete AccountReference::default_instance_;
  delete AccountReference_reflection_;
  delete Identity::default_instance_;
  delete Identity_reflection_;
  delete ProgramTag::default_instance_;
  delete ProgramTag_reflection_;
  delete RegionTag::default_instance_;
  delete RegionTag_reflection_;
  delete AccountFieldTags::default_instance_;
  delete AccountFieldTags_reflection_;
  delete GameAccountFieldTags::default_instance_;
  delete GameAccountFieldTags_reflection_;
  delete AccountFieldOptions::default_instance_;
  delete AccountFieldOptions_reflection_;
  delete GameAccountFieldOptions::default_instance_;
  delete GameAccountFieldOptions_reflection_;
  delete SubscriberReference::default_instance_;
  delete SubscriberReference_reflection_;
  delete AccountLevelInfo::default_instance_;
  delete AccountLevelInfo_reflection_;
  delete PrivacyInfo::default_instance_;
  delete PrivacyInfo_reflection_;
  delete ParentalControlInfo::default_instance_;
  delete ParentalControlInfo_reflection_;
  delete GameLevelInfo::default_instance_;
  delete GameLevelInfo_reflection_;
  delete GameTimeInfo::default_instance_;
  delete GameTimeInfo_reflection_;
  delete GameTimeRemainingInfo::default_instance_;
  delete GameTimeRemainingInfo_reflection_;
  delete GameStatus::default_instance_;
  delete GameStatus_reflection_;
  delete RAFInfo::default_instance_;
  delete RAFInfo_reflection_;
  delete GameSessionInfo::default_instance_;
  delete GameSessionInfo_reflection_;
  delete GameSessionUpdateInfo::default_instance_;
  delete GameSessionUpdateInfo_reflection_;
  delete GameSessionLocation::default_instance_;
  delete GameSessionLocation_reflection_;
  delete CAIS::default_instance_;
  delete CAIS_reflection_;
  delete GameAccountList::default_instance_;
  delete GameAccountList_reflection_;
  delete AccountState::default_instance_;
  delete AccountState_reflection_;
  delete AccountStateTagged::default_instance_;
  delete AccountStateTagged_reflection_;
  delete GameAccountState::default_instance_;
  delete GameAccountState_reflection_;
  delete GameAccountStateTagged::default_instance_;
  delete GameAccountStateTagged_reflection_;
  delete AuthorizedData::default_instance_;
  delete AuthorizedData_reflection_;
}

void protobuf_AddDesc_account_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Battlenet::protobuf_AddDesc_entity_5ftypes_2eproto();
  ::Battlenet::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023account_types.proto\022\021Battlenet.account"
    "\032\022entity_types.proto\032\017rpc_types.proto\"\027\n"
    "\tAccountId\022\n\n\002id\030\001 \002(\007\"-\n\016AccountLicense"
    "\022\n\n\002id\030\001 \002(\r\022\017\n\007expires\030\002 \001(\004\"-\n\021Account"
    "Credential\022\n\n\002id\030\001 \002(\r\022\014\n\004data\030\002 \001(\014\"\201\005\n"
    "\013AccountBlob\022\n\n\002id\030\002 \002(\007\022\016\n\006region\030\003 \002(\r"
    "\022\r\n\005email\030\004 \003(\t\022\r\n\005flags\030\005 \002(\004\022\026\n\016secure"
    "_release\030\006 \001(\004\022\027\n\017whitelist_start\030\007 \001(\004\022"
    "\025\n\rwhitelist_end\030\010 \001(\004\022\021\n\tfull_name\030\n \002("
    "\t\0223\n\010licenses\030\024 \003(\0132!.Battlenet.account."
    "AccountLicense\0229\n\013credentials\030\025 \003(\0132$.Ba"
    "ttlenet.account.AccountCredential\0229\n\racc"
    "ount_links\030\026 \003(\0132\".Battlenet.account.Gam"
    "eAccountLink\022\022\n\nbattle_tag\030\027 \001(\t\022\030\n\020defa"
    "ult_currency\030\031 \001(\007\022\024\n\014legal_region\030\032 \001(\r"
    "\022\024\n\014legal_locale\030\033 \001(\007\022\030\n\020cache_expirati"
    "on\030\036 \002(\004\022E\n\025parental_control_info\030\037 \001(\0132"
    "&.Battlenet.account.ParentalControlInfo\022"
    "\017\n\007country\030  \001(\t\022\030\n\020preferred_region\030! \001"
    "(\r\022L\n\025identity_check_status\030\" \001(\0162-.Batt"
    "lenet.account.IdentityVerificationStatus"
    "\"\?\n\017AccountBlobList\022,\n\004blob\030\001 \003(\0132\036.Batt"
    "lenet.account.AccountBlob\"@\n\021GameAccount"
    "Handle\022\n\n\002id\030\001 \002(\007\022\017\n\007program\030\002 \002(\007\022\016\n\006r"
    "egion\030\003 \002(\r\"[\n\017GameAccountLink\022:\n\014game_a"
    "ccount\030\001 \002(\0132$.Battlenet.account.GameAcc"
    "ountHandle\022\014\n\004name\030\002 \002(\t\"\313\003\n\017GameAccount"
    "Blob\022:\n\014game_account\030\001 \002(\0132$.Battlenet.a"
    "ccount.GameAccountHandle\022\016\n\004name\030\002 \001(\t:\000"
    "\022\034\n\021realm_permissions\030\003 \001(\r:\0010\022\016\n\006status"
    "\030\004 \002(\r\022\020\n\005flags\030\005 \001(\004:\0010\022\030\n\rbilling_flag"
    "s\030\006 \001(\r:\0010\022\030\n\020cache_expiration\030\007 \002(\004\022\037\n\027"
    "subscription_expiration\030\n \001(\004\022\027\n\017units_r"
    "emaining\030\013 \001(\r\022\031\n\021status_expiration\030\014 \001("
    "\004\022\021\n\tbox_level\030\r \001(\r\022\034\n\024box_level_expira"
    "tion\030\016 \001(\004\0223\n\010licenses\030\024 \003(\0132!.Battlenet"
    ".account.AccountLicense\022\023\n\013raf_account\030\025"
    " \001(\007\022\020\n\010raf_info\030\026 \001(\014\022\026\n\016raf_expiration"
    "\030\027 \001(\004\"G\n\023GameAccountBlobList\0220\n\004blob\030\001 "
    "\003(\0132\".Battlenet.account.GameAccountBlob\""
    "\212\001\n\020AccountReference\022\n\n\002id\030\001 \001(\007\022\r\n\005emai"
    "l\030\002 \001(\t\0224\n\006handle\030\003 \001(\0132$.Battlenet.acco"
    "unt.GameAccountHandle\022\022\n\nbattle_tag\030\004 \001("
    "\t\022\021\n\006region\030\n \001(\r:\0010\"\234\001\n\010Identity\022-\n\007acc"
    "ount\030\001 \001(\0132\034.Battlenet.account.AccountId"
    "\022:\n\014game_account\030\002 \001(\0132$.Battlenet.accou"
    "nt.GameAccountHandle\022%\n\007process\030\003 \001(\0132\024."
    "Battlenet.ProcessId\"*\n\nProgramTag\022\017\n\007pro"
    "gram\030\001 \001(\007\022\013\n\003tag\030\002 \001(\007\"(\n\tRegionTag\022\016\n\006"
    "region\030\001 \001(\007\022\013\n\003tag\030\002 \001(\007\"\236\002\n\020AccountFie"
    "ldTags\022\036\n\026account_level_info_tag\030\002 \001(\007\022\030"
    "\n\020privacy_info_tag\030\003 \001(\007\022!\n\031parental_con"
    "trol_info_tag\030\004 \001(\007\022;\n\024game_level_info_t"
    "ags\030\007 \003(\0132\035.Battlenet.account.ProgramTag"
    "\0227\n\020game_status_tags\030\t \003(\0132\035.Battlenet.a"
    "ccount.ProgramTag\0227\n\021game_account_tags\030\013"
    " \003(\0132\034.Battlenet.account.RegionTag\"~\n\024Ga"
    "meAccountFieldTags\022\033\n\023game_level_info_ta"
    "g\030\002 \001(\007\022\032\n\022game_time_info_tag\030\003 \001(\007\022\027\n\017g"
    "ame_status_tag\030\004 \001(\007\022\024\n\014raf_info_tag\030\005 \001"
    "(\007\"\343\001\n\023AccountFieldOptions\022\022\n\nall_fields"
    "\030\001 \001(\010\022 \n\030field_account_level_info\030\002 \001(\010"
    "\022\032\n\022field_privacy_info\030\003 \001(\010\022#\n\033field_pa"
    "rental_control_info\030\004 \001(\010\022\035\n\025field_game_"
    "level_info\030\006 \001(\010\022\031\n\021field_game_status\030\007 "
    "\001(\010\022\033\n\023field_game_accounts\030\010 \001(\010\"\235\001\n\027Gam"
    "eAccountFieldOptions\022\022\n\nall_fields\030\001 \001(\010"
    "\022\035\n\025field_game_level_info\030\002 \001(\010\022\034\n\024field"
    "_game_time_info\030\003 \001(\010\022\031\n\021field_game_stat"
    "us\030\004 \001(\010\022\026\n\016field_raf_info\030\005 \001(\010\"\367\002\n\023Sub"
    "scriberReference\022\024\n\tobject_id\030\001 \001(\004:\0010\022&"
    "\n\tentity_id\030\002 \001(\0132\023.Battlenet.EntityId\022\?"
    "\n\017account_options\030\003 \001(\0132&.Battlenet.acco"
    "unt.AccountFieldOptions\0229\n\014account_tags\030"
    "\004 \001(\0132#.Battlenet.account.AccountFieldTa"
    "gs\022H\n\024game_account_options\030\005 \001(\0132*.Battl"
    "enet.account.GameAccountFieldOptions\022B\n\021"
    "game_account_tags\030\006 \001(\0132\'.Battlenet.acco"
    "unt.GameAccountFieldTags\022\030\n\rsubscriber_i"
    "d\030\007 \001(\004:\0010\"\320\002\n\020AccountLevelInfo\0223\n\010licen"
    "ses\030\003 \003(\0132!.Battlenet.account.AccountLic"
    "ense\022\030\n\020default_currency\030\004 \001(\007\022\017\n\007countr"
    "y\030\005 \001(\t\022\030\n\020preferred_region\030\006 \001(\r\022\021\n\tful"
    "l_name\030\007 \001(\t\022\022\n\nbattle_tag\030\010 \001(\t\022\r\n\005mute"
    "d\030\t \001(\010\022\025\n\rmanual_review\030\n \001(\010\022\030\n\020accoun"
    "t_paid_any\030\013 \001(\010\022L\n\025identity_check_statu"
    "s\030\014 \001(\0162-.Battlenet.account.IdentityVeri"
    "ficationStatus\022\r\n\005email\030\r \001(\t\"\240\002\n\013Privac"
    "yInfo\022\024\n\014is_using_rid\030\003 \001(\010\022+\n#is_real_i"
    "d_visible_for_view_friends\030\004 \001(\010\022$\n\034is_h"
    "idden_from_friend_finder\030\005 \001(\010\022Z\n\021game_i"
    "nfo_privacy\030\006 \001(\0162..Battlenet.account.Pr"
    "ivacyInfo.GameInfoPrivacy:\017PRIVACY_FRIEN"
    "DS\"L\n\017GameInfoPrivacy\022\016\n\nPRIVACY_ME\020\000\022\023\n"
    "\017PRIVACY_FRIENDS\020\001\022\024\n\020PRIVACY_EVERYONE\020\002"
    "\"\244\001\n\023ParentalControlInfo\022\020\n\010timezone\030\003 \001"
    "(\t\022\027\n\017minutes_per_day\030\004 \001(\r\022\030\n\020minutes_p"
    "er_week\030\005 \001(\r\022\031\n\021can_receive_voice\030\006 \001(\010"
    "\022\026\n\016can_send_voice\030\007 \001(\010\022\025\n\rplay_schedul"
    "e\030\010 \003(\010\"\315\001\n\rGameLevelInfo\022\020\n\010is_trial\030\004 "
    "\001(\010\022\023\n\013is_lifetime\030\005 \001(\010\022\025\n\ris_restricte"
    "d\030\006 \001(\010\022\017\n\007is_beta\030\007 \001(\010\022\014\n\004name\030\010 \001(\t\022\017"
    "\n\007program\030\t \001(\007\0223\n\010licenses\030\n \003(\0132!.Batt"
    "lenet.account.AccountLicense\022\031\n\021realm_pe"
    "rmissions\030\013 \001(\r\"\205\001\n\014GameTimeInfo\022\036\n\026is_u"
    "nlimited_play_time\030\003 \001(\010\022\031\n\021play_time_ex"
    "pires\030\005 \001(\004\022\027\n\017is_subscription\030\006 \001(\010\022!\n\031"
    "is_recurring_subscription\030\007 \001(\010\"\255\001\n\025Game"
    "TimeRemainingInfo\022\031\n\021minutes_remaining\030\001"
    " \001(\r\022(\n parental_daily_minutes_remaining"
    "\030\002 \001(\r\022)\n!parental_weekly_minutes_remain"
    "ing\030\003 \001(\r\022$\n\034seconds_remaining_until_kic"
    "k\030\004 \001(\r\"\220\001\n\nGameStatus\022\024\n\014is_suspended\030\004"
    " \001(\010\022\021\n\tis_banned\030\005 \001(\010\022\032\n\022suspension_ex"
    "pires\030\006 \001(\004\022\017\n\007program\030\007 \001(\007\022\021\n\tis_locke"
    "d\030\010 \001(\010\022\031\n\021is_bam_unlockable\030\t \001(\010\"\033\n\007RA"
    "FInfo\022\020\n\010raf_info\030\001 \001(\014\"\313\001\n\017GameSessionI"
    "nfo\022\026\n\nstart_time\030\003 \001(\rB\002\030\001\0228\n\010location\030"
    "\004 \001(\0132&.Battlenet.account.GameSessionLoc"
    "ation\022\026\n\016has_benefactor\030\005 \001(\010\022\024\n\014is_usin"
    "g_igr\030\006 \001(\010\022 \n\030parental_controls_active\030"
    "\007 \001(\010\022\026\n\016start_time_sec\030\010 \001(\004\">\n\025GameSes"
    "sionUpdateInfo\022%\n\004cais\030\010 \001(\0132\027.Battlenet"
    ".account.CAIS\"H\n\023GameSessionLocation\022\022\n\n"
    "ip_address\030\001 \001(\t\022\017\n\007country\030\002 \001(\r\022\014\n\004cit"
    "y\030\003 \001(\t\"O\n\004CAIS\022\026\n\016played_minutes\030\001 \001(\r\022"
    "\026\n\016rested_minutes\030\002 \001(\r\022\027\n\017last_heard_ti"
    "me\030\003 \001(\004\"W\n\017GameAccountList\022\016\n\006region\030\003 "
    "\001(\r\0224\n\006handle\030\004 \003(\0132$.Battlenet.account."
    "GameAccountHandle\"\366\002\n\014AccountState\022\?\n\022ac"
    "count_level_info\030\001 \001(\0132#.Battlenet.accou"
    "nt.AccountLevelInfo\0224\n\014privacy_info\030\002 \001("
    "\0132\036.Battlenet.account.PrivacyInfo\022E\n\025par"
    "ental_control_info\030\003 \001(\0132&.Battlenet.acc"
    "ount.ParentalControlInfo\0229\n\017game_level_i"
    "nfo\030\005 \003(\0132 .Battlenet.account.GameLevelI"
    "nfo\0222\n\013game_status\030\006 \003(\0132\035.Battlenet.acc"
    "ount.GameStatus\0229\n\rgame_accounts\030\007 \003(\0132\""
    ".Battlenet.account.GameAccountList\"\207\001\n\022A"
    "ccountStateTagged\0226\n\raccount_state\030\001 \001(\013"
    "2\037.Battlenet.account.AccountState\0229\n\014acc"
    "ount_tags\030\002 \001(\0132#.Battlenet.account.Acco"
    "untFieldTags\"\350\001\n\020GameAccountState\0229\n\017gam"
    "e_level_info\030\001 \001(\0132 .Battlenet.account.G"
    "ameLevelInfo\0227\n\016game_time_info\030\002 \001(\0132\037.B"
    "attlenet.account.GameTimeInfo\0222\n\013game_st"
    "atus\030\003 \001(\0132\035.Battlenet.account.GameStatu"
    "s\022,\n\010raf_info\030\004 \001(\0132\032.Battlenet.account."
    "RAFInfo\"\235\001\n\026GameAccountStateTagged\022\?\n\022ga"
    "me_account_state\030\001 \001(\0132#.Battlenet.accou"
    "nt.GameAccountState\022B\n\021game_account_tags"
    "\030\002 \001(\0132\'.Battlenet.account.GameAccountFi"
    "eldTags\"/\n\016AuthorizedData\022\014\n\004data\030\001 \001(\t\022"
    "\017\n\007license\030\002 \003(\r*\216\001\n\032IdentityVerificatio"
    "nStatus\022\021\n\rIDENT_NO_DATA\020\000\022\021\n\rIDENT_PEND"
    "ING\020\001\022\020\n\014IDENT_FAILED\020\004\022\021\n\rIDENT_SUCCESS"
    "\020\005\022\022\n\016IDENT_SUCC_MNL\020\006\022\021\n\rIDENT_UNKNOWN\020"
    "\007B\002H\002", 6285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "account_types.proto", &protobuf_RegisterTypes);
  AccountId::default_instance_ = new AccountId();
  AccountLicense::default_instance_ = new AccountLicense();
  AccountCredential::default_instance_ = new AccountCredential();
  AccountBlob::default_instance_ = new AccountBlob();
  AccountBlobList::default_instance_ = new AccountBlobList();
  GameAccountHandle::default_instance_ = new GameAccountHandle();
  GameAccountLink::default_instance_ = new GameAccountLink();
  GameAccountBlob::default_instance_ = new GameAccountBlob();
  GameAccountBlobList::default_instance_ = new GameAccountBlobList();
  AccountReference::default_instance_ = new AccountReference();
  Identity::default_instance_ = new Identity();
  ProgramTag::default_instance_ = new ProgramTag();
  RegionTag::default_instance_ = new RegionTag();
  AccountFieldTags::default_instance_ = new AccountFieldTags();
  GameAccountFieldTags::default_instance_ = new GameAccountFieldTags();
  AccountFieldOptions::default_instance_ = new AccountFieldOptions();
  GameAccountFieldOptions::default_instance_ = new GameAccountFieldOptions();
  SubscriberReference::default_instance_ = new SubscriberReference();
  AccountLevelInfo::default_instance_ = new AccountLevelInfo();
  PrivacyInfo::default_instance_ = new PrivacyInfo();
  ParentalControlInfo::default_instance_ = new ParentalControlInfo();
  GameLevelInfo::default_instance_ = new GameLevelInfo();
  GameTimeInfo::default_instance_ = new GameTimeInfo();
  GameTimeRemainingInfo::default_instance_ = new GameTimeRemainingInfo();
  GameStatus::default_instance_ = new GameStatus();
  RAFInfo::default_instance_ = new RAFInfo();
  GameSessionInfo::default_instance_ = new GameSessionInfo();
  GameSessionUpdateInfo::default_instance_ = new GameSessionUpdateInfo();
  GameSessionLocation::default_instance_ = new GameSessionLocation();
  CAIS::default_instance_ = new CAIS();
  GameAccountList::default_instance_ = new GameAccountList();
  AccountState::default_instance_ = new AccountState();
  AccountStateTagged::default_instance_ = new AccountStateTagged();
  GameAccountState::default_instance_ = new GameAccountState();
  GameAccountStateTagged::default_instance_ = new GameAccountStateTagged();
  AuthorizedData::default_instance_ = new AuthorizedData();
  AccountId::default_instance_->InitAsDefaultInstance();
  AccountLicense::default_instance_->InitAsDefaultInstance();
  AccountCredential::default_instance_->InitAsDefaultInstance();
  AccountBlob::default_instance_->InitAsDefaultInstance();
  AccountBlobList::default_instance_->InitAsDefaultInstance();
  GameAccountHandle::default_instance_->InitAsDefaultInstance();
  GameAccountLink::default_instance_->InitAsDefaultInstance();
  GameAccountBlob::default_instance_->InitAsDefaultInstance();
  GameAccountBlobList::default_instance_->InitAsDefaultInstance();
  AccountReference::default_instance_->InitAsDefaultInstance();
  Identity::default_instance_->InitAsDefaultInstance();
  ProgramTag::default_instance_->InitAsDefaultInstance();
  RegionTag::default_instance_->InitAsDefaultInstance();
  AccountFieldTags::default_instance_->InitAsDefaultInstance();
  GameAccountFieldTags::default_instance_->InitAsDefaultInstance();
  AccountFieldOptions::default_instance_->InitAsDefaultInstance();
  GameAccountFieldOptions::default_instance_->InitAsDefaultInstance();
  SubscriberReference::default_instance_->InitAsDefaultInstance();
  AccountLevelInfo::default_instance_->InitAsDefaultInstance();
  PrivacyInfo::default_instance_->InitAsDefaultInstance();
  ParentalControlInfo::default_instance_->InitAsDefaultInstance();
  GameLevelInfo::default_instance_->InitAsDefaultInstance();
  GameTimeInfo::default_instance_->InitAsDefaultInstance();
  GameTimeRemainingInfo::default_instance_->InitAsDefaultInstance();
  GameStatus::default_instance_->InitAsDefaultInstance();
  RAFInfo::default_instance_->InitAsDefaultInstance();
  GameSessionInfo::default_instance_->InitAsDefaultInstance();
  GameSessionUpdateInfo::default_instance_->InitAsDefaultInstance();
  GameSessionLocation::default_instance_->InitAsDefaultInstance();
  CAIS::default_instance_->InitAsDefaultInstance();
  GameAccountList::default_instance_->InitAsDefaultInstance();
  AccountState::default_instance_->InitAsDefaultInstance();
  AccountStateTagged::default_instance_->InitAsDefaultInstance();
  GameAccountState::default_instance_->InitAsDefaultInstance();
  GameAccountStateTagged::default_instance_->InitAsDefaultInstance();
  AuthorizedData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_account_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_account_5ftypes_2eproto {
  StaticDescriptorInitializer_account_5ftypes_2eproto() {
    protobuf_AddDesc_account_5ftypes_2eproto();
  }
} static_descriptor_initializer_account_5ftypes_2eproto_;
const ::google::protobuf::EnumDescriptor* IdentityVerificationStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdentityVerificationStatus_descriptor_;
}
bool IdentityVerificationStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AccountId::kIdFieldNumber;
#endif  // !_MSC_VER

AccountId::AccountId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountId)
}

void AccountId::InitAsDefaultInstance() {
}

AccountId::AccountId(const AccountId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountId)
}

void AccountId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountId::~AccountId() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountId)
  SharedDtor();
}

void AccountId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountId_descriptor_;
}

const AccountId& AccountId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

AccountId* AccountId::default_instance_ = NULL;

AccountId* AccountId::New() const {
  return new AccountId;
}

void AccountId::Swap(AccountId* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AccountId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountId_descriptor_;
  metadata.reflection = AccountId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLicense::kIdFieldNumber;
const int AccountLicense::kExpiresFieldNumber;
#endif  // !_MSC_VER

AccountLicense::AccountLicense()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountLicense)
}

void AccountLicense::InitAsDefaultInstance() {
}

AccountLicense::AccountLicense(const AccountLicense& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountLicense)
}

void AccountLicense::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  expires_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLicense::~AccountLicense() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountLicense)
  SharedDtor();
}

void AccountLicense::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountLicense::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLicense::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLicense_descriptor_;
}

const AccountLicense& AccountLicense::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

AccountLicense* AccountLicense::default_instance_ = NULL;

AccountLicense* AccountLicense::New() const {
  return new AccountLicense;
}

void AccountLicense::Swap(AccountLicense* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AccountLicense::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLicense_descriptor_;
  metadata.reflection = AccountLicense_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountCredential::kIdFieldNumber;
const int AccountCredential::kDataFieldNumber;
#endif  // !_MSC_VER

AccountCredential::AccountCredential()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountCredential)
}

void AccountCredential::InitAsDefaultInstance() {
}

AccountCredential::AccountCredential(const AccountCredential& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountCredential)
}

void AccountCredential::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountCredential::~AccountCredential() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountCredential)
  SharedDtor();
}

void AccountCredential::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void AccountCredential::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountCredential::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountCredential_descriptor_;
}

const AccountCredential& AccountCredential::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

AccountCredential* AccountCredential::default_instance_ = NULL;

AccountCredential* AccountCredential::New() const {
  return new AccountCredential;
}

void AccountCredential::Swap(AccountCredential* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AccountCredential::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountCredential_descriptor_;
  metadata.reflection = AccountCredential_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountBlob::kIdFieldNumber;
const int AccountBlob::kRegionFieldNumber;
const int AccountBlob::kEmailFieldNumber;
const int AccountBlob::kFlagsFieldNumber;
const int AccountBlob::kSecureReleaseFieldNumber;
const int AccountBlob::kWhitelistStartFieldNumber;
const int AccountBlob::kWhitelistEndFieldNumber;
const int AccountBlob::kFullNameFieldNumber;
const int AccountBlob::kLicensesFieldNumber;
const int AccountBlob::kCredentialsFieldNumber;
const int AccountBlob::kAccountLinksFieldNumber;
const int AccountBlob::kBattleTagFieldNumber;
const int AccountBlob::kDefaultCurrencyFieldNumber;
const int AccountBlob::kLegalRegionFieldNumber;
const int AccountBlob::kLegalLocaleFieldNumber;
const int AccountBlob::kCacheExpirationFieldNumber;
const int AccountBlob::kParentalControlInfoFieldNumber;
const int AccountBlob::kCountryFieldNumber;
const int AccountBlob::kPreferredRegionFieldNumber;
const int AccountBlob::kIdentityCheckStatusFieldNumber;
#endif  // !_MSC_VER

AccountBlob::AccountBlob()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountBlob)
}

void AccountBlob::InitAsDefaultInstance() {
  parental_control_info_ = const_cast< ::Battlenet::account::ParentalControlInfo*>(&::Battlenet::account::ParentalControlInfo::default_instance());
}

AccountBlob::AccountBlob(const AccountBlob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountBlob)
}

void AccountBlob::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  region_ = 0u;
  flags_ = GOOGLE_ULONGLONG(0);
  secure_release_ = GOOGLE_ULONGLONG(0);
  whitelist_start_ = GOOGLE_ULONGLONG(0);
  whitelist_end_ = GOOGLE_ULONGLONG(0);
  full_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_currency_ = 0u;
  legal_region_ = 0u;
  legal_locale_ = 0u;
  cache_expiration_ = GOOGLE_ULONGLONG(0);
  parental_control_info_ = NULL;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_region_ = 0u;
  identity_check_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountBlob::~AccountBlob() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountBlob)
  SharedDtor();
}

void AccountBlob::SharedDtor() {
  if (full_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete full_name_;
  }
  if (battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battle_tag_;
  }
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (this != default_instance_) {
    delete parental_control_info_;
  }
}

void AccountBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountBlob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountBlob_descriptor_;
}

const AccountBlob& AccountBlob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

AccountBlob* AccountBlob::default_instance_ = NULL;

AccountBlob* AccountBlob::New() const {
  return new AccountBlob;
}

void AccountBlob::Swap(AccountBlob* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AccountBlob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountBlob_descriptor_;
  metadata.reflection = AccountBlob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountBlobList::kBlobFieldNumber;
#endif  // !_MSC_VER

AccountBlobList::AccountBlobList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountBlobList)
}

void AccountBlobList::InitAsDefaultInstance() {
}

AccountBlobList::AccountBlobList(const AccountBlobList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountBlobList)
}

void AccountBlobList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountBlobList::~AccountBlobList() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountBlobList)
  SharedDtor();
}

void AccountBlobList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountBlobList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountBlobList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountBlobList_descriptor_;
}

const AccountBlobList& AccountBlobList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

AccountBlobList* AccountBlobList::default_instance_ = NULL;

AccountBlobList* AccountBlobList::New() const {
  return new AccountBlobList;
}

void AccountBlobList::Swap(AccountBlobList* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AccountBlobList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountBlobList_descriptor_;
  metadata.reflection = AccountBlobList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAccountHandle::kIdFieldNumber;
const int GameAccountHandle::kProgramFieldNumber;
const int GameAccountHandle::kRegionFieldNumber;
#endif  // !_MSC_VER

GameAccountHandle::GameAccountHandle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameAccountHandle)
}

void GameAccountHandle::InitAsDefaultInstance() {
}

GameAccountHandle::GameAccountHandle(const GameAccountHandle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameAccountHandle)
}

void GameAccountHandle::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  program_ = 0u;
  region_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAccountHandle::~GameAccountHandle() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameAccountHandle)
  SharedDtor();
}

void GameAccountHandle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameAccountHandle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAccountHandle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAccountHandle_descriptor_;
}

const GameAccountHandle& GameAccountHandle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameAccountHandle* GameAccountHandle::default_instance_ = NULL;

GameAccountHandle* GameAccountHandle::New() const {
  return new GameAccountHandle;
}

void GameAccountHandle::Swap(GameAccountHandle* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameAccountHandle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAccountHandle_descriptor_;
  metadata.reflection = GameAccountHandle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAccountLink::kGameAccountFieldNumber;
const int GameAccountLink::kNameFieldNumber;
#endif  // !_MSC_VER

GameAccountLink::GameAccountLink()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameAccountLink)
}

void GameAccountLink::InitAsDefaultInstance() {
  game_account_ = const_cast< ::Battlenet::account::GameAccountHandle*>(&::Battlenet::account::GameAccountHandle::default_instance());
}

GameAccountLink::GameAccountLink(const GameAccountLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameAccountLink)
}

void GameAccountLink::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_account_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAccountLink::~GameAccountLink() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameAccountLink)
  SharedDtor();
}

void GameAccountLink::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete game_account_;
  }
}

void GameAccountLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAccountLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAccountLink_descriptor_;
}

const GameAccountLink& GameAccountLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameAccountLink* GameAccountLink::default_instance_ = NULL;

GameAccountLink* GameAccountLink::New() const {
  return new GameAccountLink;
}

void GameAccountLink::Swap(GameAccountLink* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameAccountLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAccountLink_descriptor_;
  metadata.reflection = GameAccountLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAccountBlob::kGameAccountFieldNumber;
const int GameAccountBlob::kNameFieldNumber;
const int GameAccountBlob::kRealmPermissionsFieldNumber;
const int GameAccountBlob::kStatusFieldNumber;
const int GameAccountBlob::kFlagsFieldNumber;
const int GameAccountBlob::kBillingFlagsFieldNumber;
const int GameAccountBlob::kCacheExpirationFieldNumber;
const int GameAccountBlob::kSubscriptionExpirationFieldNumber;
const int GameAccountBlob::kUnitsRemainingFieldNumber;
const int GameAccountBlob::kStatusExpirationFieldNumber;
const int GameAccountBlob::kBoxLevelFieldNumber;
const int GameAccountBlob::kBoxLevelExpirationFieldNumber;
const int GameAccountBlob::kLicensesFieldNumber;
const int GameAccountBlob::kRafAccountFieldNumber;
const int GameAccountBlob::kRafInfoFieldNumber;
const int GameAccountBlob::kRafExpirationFieldNumber;
#endif  // !_MSC_VER

GameAccountBlob::GameAccountBlob()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameAccountBlob)
}

void GameAccountBlob::InitAsDefaultInstance() {
  game_account_ = const_cast< ::Battlenet::account::GameAccountHandle*>(&::Battlenet::account::GameAccountHandle::default_instance());
}

GameAccountBlob::GameAccountBlob(const GameAccountBlob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameAccountBlob)
}

void GameAccountBlob::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_account_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realm_permissions_ = 0u;
  status_ = 0u;
  flags_ = GOOGLE_ULONGLONG(0);
  billing_flags_ = 0u;
  cache_expiration_ = GOOGLE_ULONGLONG(0);
  subscription_expiration_ = GOOGLE_ULONGLONG(0);
  units_remaining_ = 0u;
  status_expiration_ = GOOGLE_ULONGLONG(0);
  box_level_ = 0u;
  box_level_expiration_ = GOOGLE_ULONGLONG(0);
  raf_account_ = 0u;
  raf_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raf_expiration_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAccountBlob::~GameAccountBlob() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameAccountBlob)
  SharedDtor();
}

void GameAccountBlob::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (raf_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raf_info_;
  }
  if (this != default_instance_) {
    delete game_account_;
  }
}

void GameAccountBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAccountBlob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAccountBlob_descriptor_;
}

const GameAccountBlob& GameAccountBlob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameAccountBlob* GameAccountBlob::default_instance_ = NULL;

GameAccountBlob* GameAccountBlob::New() const {
  return new GameAccountBlob;
}

void GameAccountBlob::Swap(GameAccountBlob* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameAccountBlob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAccountBlob_descriptor_;
  metadata.reflection = GameAccountBlob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAccountBlobList::kBlobFieldNumber;
#endif  // !_MSC_VER

GameAccountBlobList::GameAccountBlobList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameAccountBlobList)
}

void GameAccountBlobList::InitAsDefaultInstance() {
}

GameAccountBlobList::GameAccountBlobList(const GameAccountBlobList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameAccountBlobList)
}

void GameAccountBlobList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAccountBlobList::~GameAccountBlobList() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameAccountBlobList)
  SharedDtor();
}

void GameAccountBlobList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameAccountBlobList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAccountBlobList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAccountBlobList_descriptor_;
}

const GameAccountBlobList& GameAccountBlobList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameAccountBlobList* GameAccountBlobList::default_instance_ = NULL;

GameAccountBlobList* GameAccountBlobList::New() const {
  return new GameAccountBlobList;
}

void GameAccountBlobList::Swap(GameAccountBlobList* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameAccountBlobList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAccountBlobList_descriptor_;
  metadata.reflection = GameAccountBlobList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountReference::kIdFieldNumber;
const int AccountReference::kEmailFieldNumber;
const int AccountReference::kHandleFieldNumber;
const int AccountReference::kBattleTagFieldNumber;
const int AccountReference::kRegionFieldNumber;
#endif  // !_MSC_VER

AccountReference::AccountReference()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountReference)
}

void AccountReference::InitAsDefaultInstance() {
  handle_ = const_cast< ::Battlenet::account::GameAccountHandle*>(&::Battlenet::account::GameAccountHandle::default_instance());
}

AccountReference::AccountReference(const AccountReference& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountReference)
}

void AccountReference::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = NULL;
  battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountReference::~AccountReference() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountReference)
  SharedDtor();
}

void AccountReference::SharedDtor() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battle_tag_;
  }
  if (this != default_instance_) {
    delete handle_;
  }
}

void AccountReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountReference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountReference_descriptor_;
}

const AccountReference& AccountReference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

AccountReference* AccountReference::default_instance_ = NULL;

AccountReference* AccountReference::New() const {
  return new AccountReference;
}

void AccountReference::Swap(AccountReference* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AccountReference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountReference_descriptor_;
  metadata.reflection = AccountReference_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Identity::kAccountFieldNumber;
const int Identity::kGameAccountFieldNumber;
const int Identity::kProcessFieldNumber;
#endif  // !_MSC_VER

Identity::Identity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.Identity)
}

void Identity::InitAsDefaultInstance() {
  account_ = const_cast< ::Battlenet::account::AccountId*>(&::Battlenet::account::AccountId::default_instance());
  game_account_ = const_cast< ::Battlenet::account::GameAccountHandle*>(&::Battlenet::account::GameAccountHandle::default_instance());
  process_ = const_cast< ::Battlenet::ProcessId*>(&::Battlenet::ProcessId::default_instance());
}

Identity::Identity(const Identity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.Identity)
}

void Identity::SharedCtor() {
  _cached_size_ = 0;
  account_ = NULL;
  game_account_ = NULL;
  process_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Identity::~Identity() {
  // @@protoc_insertion_point(destructor:Battlenet.account.Identity)
  SharedDtor();
}

void Identity::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
    delete game_account_;
    delete process_;
  }
}

void Identity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Identity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Identity_descriptor_;
}

const Identity& Identity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

Identity* Identity::default_instance_ = NULL;

Identity* Identity::New() const {
  return new Identity;
}

void Identity::Swap(Identity* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Identity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Identity_descriptor_;
  metadata.reflection = Identity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProgramTag::kProgramFieldNumber;
const int ProgramTag::kTagFieldNumber;
#endif  // !_MSC_VER

ProgramTag::ProgramTag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.ProgramTag)
}

void ProgramTag::InitAsDefaultInstance() {
}

ProgramTag::ProgramTag(const ProgramTag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.ProgramTag)
}

void ProgramTag::SharedCtor() {
  _cached_size_ = 0;
  program_ = 0u;
  tag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProgramTag::~ProgramTag() {
  // @@protoc_insertion_point(destructor:Battlenet.account.ProgramTag)
  SharedDtor();
}

void ProgramTag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProgramTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProgramTag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProgramTag_descriptor_;
}

const ProgramTag& ProgramTag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

ProgramTag* ProgramTag::default_instance_ = NULL;

ProgramTag* ProgramTag::New() const {
  return new ProgramTag;
}

void ProgramTag::Swap(ProgramTag* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ProgramTag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProgramTag_descriptor_;
  metadata.reflection = ProgramTag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionTag::kRegionFieldNumber;
const int RegionTag::kTagFieldNumber;
#endif  // !_MSC_VER

RegionTag::RegionTag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.RegionTag)
}

void RegionTag::InitAsDefaultInstance() {
}

RegionTag::RegionTag(const RegionTag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.RegionTag)
}

void RegionTag::SharedCtor() {
  _cached_size_ = 0;
  region_ = 0u;
  tag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionTag::~RegionTag() {
  // @@protoc_insertion_point(destructor:Battlenet.account.RegionTag)
  SharedDtor();
}

void RegionTag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionTag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionTag_descriptor_;
}

const RegionTag& RegionTag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

RegionTag* RegionTag::default_instance_ = NULL;

RegionTag* RegionTag::New() const {
  return new RegionTag;
}

void RegionTag::Swap(RegionTag* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata RegionTag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionTag_descriptor_;
  metadata.reflection = RegionTag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountFieldTags::kAccountLevelInfoTagFieldNumber;
const int AccountFieldTags::kPrivacyInfoTagFieldNumber;
const int AccountFieldTags::kParentalControlInfoTagFieldNumber;
const int AccountFieldTags::kGameLevelInfoTagsFieldNumber;
const int AccountFieldTags::kGameStatusTagsFieldNumber;
const int AccountFieldTags::kGameAccountTagsFieldNumber;
#endif  // !_MSC_VER

AccountFieldTags::AccountFieldTags()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountFieldTags)
}

void AccountFieldTags::InitAsDefaultInstance() {
}

AccountFieldTags::AccountFieldTags(const AccountFieldTags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountFieldTags)
}

void AccountFieldTags::SharedCtor() {
  _cached_size_ = 0;
  account_level_info_tag_ = 0u;
  privacy_info_tag_ = 0u;
  parental_control_info_tag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountFieldTags::~AccountFieldTags() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountFieldTags)
  SharedDtor();
}

void AccountFieldTags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountFieldTags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountFieldTags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountFieldTags_descriptor_;
}

const AccountFieldTags& AccountFieldTags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

AccountFieldTags* AccountFieldTags::default_instance_ = NULL;

AccountFieldTags* AccountFieldTags::New() const {
  return new AccountFieldTags;
}

void AccountFieldTags::Swap(AccountFieldTags* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AccountFieldTags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountFieldTags_descriptor_;
  metadata.reflection = AccountFieldTags_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAccountFieldTags::kGameLevelInfoTagFieldNumber;
const int GameAccountFieldTags::kGameTimeInfoTagFieldNumber;
const int GameAccountFieldTags::kGameStatusTagFieldNumber;
const int GameAccountFieldTags::kRafInfoTagFieldNumber;
#endif  // !_MSC_VER

GameAccountFieldTags::GameAccountFieldTags()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameAccountFieldTags)
}

void GameAccountFieldTags::InitAsDefaultInstance() {
}

GameAccountFieldTags::GameAccountFieldTags(const GameAccountFieldTags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameAccountFieldTags)
}

void GameAccountFieldTags::SharedCtor() {
  _cached_size_ = 0;
  game_level_info_tag_ = 0u;
  game_time_info_tag_ = 0u;
  game_status_tag_ = 0u;
  raf_info_tag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAccountFieldTags::~GameAccountFieldTags() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameAccountFieldTags)
  SharedDtor();
}

void GameAccountFieldTags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameAccountFieldTags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAccountFieldTags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAccountFieldTags_descriptor_;
}

const GameAccountFieldTags& GameAccountFieldTags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameAccountFieldTags* GameAccountFieldTags::default_instance_ = NULL;

GameAccountFieldTags* GameAccountFieldTags::New() const {
  return new GameAccountFieldTags;
}

void GameAccountFieldTags::Swap(GameAccountFieldTags* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameAccountFieldTags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAccountFieldTags_descriptor_;
  metadata.reflection = GameAccountFieldTags_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountFieldOptions::kAllFieldsFieldNumber;
const int AccountFieldOptions::kFieldAccountLevelInfoFieldNumber;
const int AccountFieldOptions::kFieldPrivacyInfoFieldNumber;
const int AccountFieldOptions::kFieldParentalControlInfoFieldNumber;
const int AccountFieldOptions::kFieldGameLevelInfoFieldNumber;
const int AccountFieldOptions::kFieldGameStatusFieldNumber;
const int AccountFieldOptions::kFieldGameAccountsFieldNumber;
#endif  // !_MSC_VER

AccountFieldOptions::AccountFieldOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountFieldOptions)
}

void AccountFieldOptions::InitAsDefaultInstance() {
}

AccountFieldOptions::AccountFieldOptions(const AccountFieldOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountFieldOptions)
}

void AccountFieldOptions::SharedCtor() {
  _cached_size_ = 0;
  all_fields_ = false;
  field_account_level_info_ = false;
  field_privacy_info_ = false;
  field_parental_control_info_ = false;
  field_game_level_info_ = false;
  field_game_status_ = false;
  field_game_accounts_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountFieldOptions::~AccountFieldOptions() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountFieldOptions)
  SharedDtor();
}

void AccountFieldOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountFieldOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountFieldOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountFieldOptions_descriptor_;
}

const AccountFieldOptions& AccountFieldOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

AccountFieldOptions* AccountFieldOptions::default_instance_ = NULL;

AccountFieldOptions* AccountFieldOptions::New() const {
  return new AccountFieldOptions;
}

void AccountFieldOptions::Swap(AccountFieldOptions* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AccountFieldOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountFieldOptions_descriptor_;
  metadata.reflection = AccountFieldOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAccountFieldOptions::kAllFieldsFieldNumber;
const int GameAccountFieldOptions::kFieldGameLevelInfoFieldNumber;
const int GameAccountFieldOptions::kFieldGameTimeInfoFieldNumber;
const int GameAccountFieldOptions::kFieldGameStatusFieldNumber;
const int GameAccountFieldOptions::kFieldRafInfoFieldNumber;
#endif  // !_MSC_VER

GameAccountFieldOptions::GameAccountFieldOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameAccountFieldOptions)
}

void GameAccountFieldOptions::InitAsDefaultInstance() {
}

GameAccountFieldOptions::GameAccountFieldOptions(const GameAccountFieldOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameAccountFieldOptions)
}

void GameAccountFieldOptions::SharedCtor() {
  _cached_size_ = 0;
  all_fields_ = false;
  field_game_level_info_ = false;
  field_game_time_info_ = false;
  field_game_status_ = false;
  field_raf_info_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAccountFieldOptions::~GameAccountFieldOptions() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameAccountFieldOptions)
  SharedDtor();
}

void GameAccountFieldOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameAccountFieldOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAccountFieldOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAccountFieldOptions_descriptor_;
}

const GameAccountFieldOptions& GameAccountFieldOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameAccountFieldOptions* GameAccountFieldOptions::default_instance_ = NULL;

GameAccountFieldOptions* GameAccountFieldOptions::New() const {
  return new GameAccountFieldOptions;
}

void GameAccountFieldOptions::Swap(GameAccountFieldOptions* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameAccountFieldOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAccountFieldOptions_descriptor_;
  metadata.reflection = GameAccountFieldOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriberReference::kObjectIdFieldNumber;
const int SubscriberReference::kEntityIdFieldNumber;
const int SubscriberReference::kAccountOptionsFieldNumber;
const int SubscriberReference::kAccountTagsFieldNumber;
const int SubscriberReference::kGameAccountOptionsFieldNumber;
const int SubscriberReference::kGameAccountTagsFieldNumber;
const int SubscriberReference::kSubscriberIdFieldNumber;
#endif  // !_MSC_VER

SubscriberReference::SubscriberReference()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.SubscriberReference)
}

void SubscriberReference::InitAsDefaultInstance() {
  entity_id_ = const_cast< ::Battlenet::EntityId*>(&::Battlenet::EntityId::default_instance());
  account_options_ = const_cast< ::Battlenet::account::AccountFieldOptions*>(&::Battlenet::account::AccountFieldOptions::default_instance());
  account_tags_ = const_cast< ::Battlenet::account::AccountFieldTags*>(&::Battlenet::account::AccountFieldTags::default_instance());
  game_account_options_ = const_cast< ::Battlenet::account::GameAccountFieldOptions*>(&::Battlenet::account::GameAccountFieldOptions::default_instance());
  game_account_tags_ = const_cast< ::Battlenet::account::GameAccountFieldTags*>(&::Battlenet::account::GameAccountFieldTags::default_instance());
}

SubscriberReference::SubscriberReference(const SubscriberReference& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.SubscriberReference)
}

void SubscriberReference::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  entity_id_ = NULL;
  account_options_ = NULL;
  account_tags_ = NULL;
  game_account_options_ = NULL;
  game_account_tags_ = NULL;
  subscriber_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriberReference::~SubscriberReference() {
  // @@protoc_insertion_point(destructor:Battlenet.account.SubscriberReference)
  SharedDtor();
}

void SubscriberReference::SharedDtor() {
  if (this != default_instance_) {
    delete entity_id_;
    delete account_options_;
    delete account_tags_;
    delete game_account_options_;
    delete game_account_tags_;
  }
}

void SubscriberReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriberReference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriberReference_descriptor_;
}

const SubscriberReference& SubscriberReference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

SubscriberReference* SubscriberReference::default_instance_ = NULL;

SubscriberReference* SubscriberReference::New() const {
  return new SubscriberReference;
}

void SubscriberReference::Swap(SubscriberReference* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SubscriberReference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriberReference_descriptor_;
  metadata.reflection = SubscriberReference_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLevelInfo::kLicensesFieldNumber;
const int AccountLevelInfo::kDefaultCurrencyFieldNumber;
const int AccountLevelInfo::kCountryFieldNumber;
const int AccountLevelInfo::kPreferredRegionFieldNumber;
const int AccountLevelInfo::kFullNameFieldNumber;
const int AccountLevelInfo::kBattleTagFieldNumber;
const int AccountLevelInfo::kMutedFieldNumber;
const int AccountLevelInfo::kManualReviewFieldNumber;
const int AccountLevelInfo::kAccountPaidAnyFieldNumber;
const int AccountLevelInfo::kIdentityCheckStatusFieldNumber;
const int AccountLevelInfo::kEmailFieldNumber;
#endif  // !_MSC_VER

AccountLevelInfo::AccountLevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountLevelInfo)
}

void AccountLevelInfo::InitAsDefaultInstance() {
}

AccountLevelInfo::AccountLevelInfo(const AccountLevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountLevelInfo)
}

void AccountLevelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  default_currency_ = 0u;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_region_ = 0u;
  full_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  muted_ = false;
  manual_review_ = false;
  account_paid_any_ = false;
  identity_check_status_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLevelInfo::~AccountLevelInfo() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountLevelInfo)
  SharedDtor();
}

void AccountLevelInfo::SharedDtor() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (full_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete full_name_;
  }
  if (battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battle_tag_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void AccountLevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLevelInfo_descriptor_;
}

const AccountLevelInfo& AccountLevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

AccountLevelInfo* AccountLevelInfo::default_instance_ = NULL;

AccountLevelInfo* AccountLevelInfo::New() const {
  return new AccountLevelInfo;
}

void AccountLevelInfo::Swap(AccountLevelInfo* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AccountLevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLevelInfo_descriptor_;
  metadata.reflection = AccountLevelInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PrivacyInfo_GameInfoPrivacy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivacyInfo_GameInfoPrivacy_descriptor_;
}
bool PrivacyInfo_GameInfoPrivacy_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PrivacyInfo_GameInfoPrivacy PrivacyInfo::PRIVACY_ME;
const PrivacyInfo_GameInfoPrivacy PrivacyInfo::PRIVACY_FRIENDS;
const PrivacyInfo_GameInfoPrivacy PrivacyInfo::PRIVACY_EVERYONE;
const PrivacyInfo_GameInfoPrivacy PrivacyInfo::GameInfoPrivacy_MIN;
const PrivacyInfo_GameInfoPrivacy PrivacyInfo::GameInfoPrivacy_MAX;
const int PrivacyInfo::GameInfoPrivacy_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PrivacyInfo::kIsUsingRidFieldNumber;
const int PrivacyInfo::kIsRealIdVisibleForViewFriendsFieldNumber;
const int PrivacyInfo::kIsHiddenFromFriendFinderFieldNumber;
const int PrivacyInfo::kGameInfoPrivacyFieldNumber;
#endif  // !_MSC_VER

PrivacyInfo::PrivacyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.PrivacyInfo)
}

void PrivacyInfo::InitAsDefaultInstance() {
}

PrivacyInfo::PrivacyInfo(const PrivacyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.PrivacyInfo)
}

void PrivacyInfo::SharedCtor() {
  _cached_size_ = 0;
  is_using_rid_ = false;
  is_real_id_visible_for_view_friends_ = false;
  is_hidden_from_friend_finder_ = false;
  game_info_privacy_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivacyInfo::~PrivacyInfo() {
  // @@protoc_insertion_point(destructor:Battlenet.account.PrivacyInfo)
  SharedDtor();
}

void PrivacyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrivacyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivacyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivacyInfo_descriptor_;
}

const PrivacyInfo& PrivacyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

PrivacyInfo* PrivacyInfo::default_instance_ = NULL;

PrivacyInfo* PrivacyInfo::New() const {
  return new PrivacyInfo;
}

void PrivacyInfo::Swap(PrivacyInfo* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata PrivacyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivacyInfo_descriptor_;
  metadata.reflection = PrivacyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParentalControlInfo::kTimezoneFieldNumber;
const int ParentalControlInfo::kMinutesPerDayFieldNumber;
const int ParentalControlInfo::kMinutesPerWeekFieldNumber;
const int ParentalControlInfo::kCanReceiveVoiceFieldNumber;
const int ParentalControlInfo::kCanSendVoiceFieldNumber;
const int ParentalControlInfo::kPlayScheduleFieldNumber;
#endif  // !_MSC_VER

ParentalControlInfo::ParentalControlInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.ParentalControlInfo)
}

void ParentalControlInfo::InitAsDefaultInstance() {
}

ParentalControlInfo::ParentalControlInfo(const ParentalControlInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.ParentalControlInfo)
}

void ParentalControlInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timezone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minutes_per_day_ = 0u;
  minutes_per_week_ = 0u;
  can_receive_voice_ = false;
  can_send_voice_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParentalControlInfo::~ParentalControlInfo() {
  // @@protoc_insertion_point(destructor:Battlenet.account.ParentalControlInfo)
  SharedDtor();
}

void ParentalControlInfo::SharedDtor() {
  if (timezone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timezone_;
  }
  if (this != default_instance_) {
  }
}

void ParentalControlInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParentalControlInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParentalControlInfo_descriptor_;
}

const ParentalControlInfo& ParentalControlInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

ParentalControlInfo* ParentalControlInfo::default_instance_ = NULL;

ParentalControlInfo* ParentalControlInfo::New() const {
  return new ParentalControlInfo;
}

void ParentalControlInfo::Swap(ParentalControlInfo* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ParentalControlInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParentalControlInfo_descriptor_;
  metadata.reflection = ParentalControlInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameLevelInfo::kIsTrialFieldNumber;
const int GameLevelInfo::kIsLifetimeFieldNumber;
const int GameLevelInfo::kIsRestrictedFieldNumber;
const int GameLevelInfo::kIsBetaFieldNumber;
const int GameLevelInfo::kNameFieldNumber;
const int GameLevelInfo::kProgramFieldNumber;
const int GameLevelInfo::kLicensesFieldNumber;
const int GameLevelInfo::kRealmPermissionsFieldNumber;
#endif  // !_MSC_VER

GameLevelInfo::GameLevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameLevelInfo)
}

void GameLevelInfo::InitAsDefaultInstance() {
}

GameLevelInfo::GameLevelInfo(const GameLevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameLevelInfo)
}

void GameLevelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_trial_ = false;
  is_lifetime_ = false;
  is_restricted_ = false;
  is_beta_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  program_ = 0u;
  realm_permissions_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameLevelInfo::~GameLevelInfo() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameLevelInfo)
  SharedDtor();
}

void GameLevelInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GameLevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameLevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameLevelInfo_descriptor_;
}

const GameLevelInfo& GameLevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameLevelInfo* GameLevelInfo::default_instance_ = NULL;

GameLevelInfo* GameLevelInfo::New() const {
  return new GameLevelInfo;
}

void GameLevelInfo::Swap(GameLevelInfo* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameLevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameLevelInfo_descriptor_;
  metadata.reflection = GameLevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameTimeInfo::kIsUnlimitedPlayTimeFieldNumber;
const int GameTimeInfo::kPlayTimeExpiresFieldNumber;
const int GameTimeInfo::kIsSubscriptionFieldNumber;
const int GameTimeInfo::kIsRecurringSubscriptionFieldNumber;
#endif  // !_MSC_VER

GameTimeInfo::GameTimeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameTimeInfo)
}

void GameTimeInfo::InitAsDefaultInstance() {
}

GameTimeInfo::GameTimeInfo(const GameTimeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameTimeInfo)
}

void GameTimeInfo::SharedCtor() {
  _cached_size_ = 0;
  is_unlimited_play_time_ = false;
  play_time_expires_ = GOOGLE_ULONGLONG(0);
  is_subscription_ = false;
  is_recurring_subscription_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameTimeInfo::~GameTimeInfo() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameTimeInfo)
  SharedDtor();
}

void GameTimeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameTimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTimeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTimeInfo_descriptor_;
}

const GameTimeInfo& GameTimeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameTimeInfo* GameTimeInfo::default_instance_ = NULL;

GameTimeInfo* GameTimeInfo::New() const {
  return new GameTimeInfo;
}

void GameTimeInfo::Swap(GameTimeInfo* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameTimeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameTimeInfo_descriptor_;
  metadata.reflection = GameTimeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameTimeRemainingInfo::kMinutesRemainingFieldNumber;
const int GameTimeRemainingInfo::kParentalDailyMinutesRemainingFieldNumber;
const int GameTimeRemainingInfo::kParentalWeeklyMinutesRemainingFieldNumber;
const int GameTimeRemainingInfo::kSecondsRemainingUntilKickFieldNumber;
#endif  // !_MSC_VER

GameTimeRemainingInfo::GameTimeRemainingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameTimeRemainingInfo)
}

void GameTimeRemainingInfo::InitAsDefaultInstance() {
}

GameTimeRemainingInfo::GameTimeRemainingInfo(const GameTimeRemainingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameTimeRemainingInfo)
}

void GameTimeRemainingInfo::SharedCtor() {
  _cached_size_ = 0;
  minutes_remaining_ = 0u;
  parental_daily_minutes_remaining_ = 0u;
  parental_weekly_minutes_remaining_ = 0u;
  seconds_remaining_until_kick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameTimeRemainingInfo::~GameTimeRemainingInfo() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameTimeRemainingInfo)
  SharedDtor();
}

void GameTimeRemainingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameTimeRemainingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTimeRemainingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTimeRemainingInfo_descriptor_;
}

const GameTimeRemainingInfo& GameTimeRemainingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameTimeRemainingInfo* GameTimeRemainingInfo::default_instance_ = NULL;

GameTimeRemainingInfo* GameTimeRemainingInfo::New() const {
  return new GameTimeRemainingInfo;
}

void GameTimeRemainingInfo::Swap(GameTimeRemainingInfo* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameTimeRemainingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameTimeRemainingInfo_descriptor_;
  metadata.reflection = GameTimeRemainingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStatus::kIsSuspendedFieldNumber;
const int GameStatus::kIsBannedFieldNumber;
const int GameStatus::kSuspensionExpiresFieldNumber;
const int GameStatus::kProgramFieldNumber;
const int GameStatus::kIsLockedFieldNumber;
const int GameStatus::kIsBamUnlockableFieldNumber;
#endif  // !_MSC_VER

GameStatus::GameStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameStatus)
}

void GameStatus::InitAsDefaultInstance() {
}

GameStatus::GameStatus(const GameStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameStatus)
}

void GameStatus::SharedCtor() {
  _cached_size_ = 0;
  is_suspended_ = false;
  is_banned_ = false;
  suspension_expires_ = GOOGLE_ULONGLONG(0);
  program_ = 0u;
  is_locked_ = false;
  is_bam_unlockable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStatus::~GameStatus() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameStatus)
  SharedDtor();
}

void GameStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatus_descriptor_;
}

const GameStatus& GameStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameStatus* GameStatus::default_instance_ = NULL;

GameStatus* GameStatus::New() const {
  return new GameStatus;
}

void GameStatus::Swap(GameStatus* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStatus_descriptor_;
  metadata.reflection = GameStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RAFInfo::kRafInfoFieldNumber;
#endif  // !_MSC_VER

RAFInfo::RAFInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.RAFInfo)
}

void RAFInfo::InitAsDefaultInstance() {
}

RAFInfo::RAFInfo(const RAFInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.RAFInfo)
}

void RAFInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  raf_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RAFInfo::~RAFInfo() {
  // @@protoc_insertion_point(destructor:Battlenet.account.RAFInfo)
  SharedDtor();
}

void RAFInfo::SharedDtor() {
  if (raf_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raf_info_;
  }
  if (this != default_instance_) {
  }
}

void RAFInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RAFInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RAFInfo_descriptor_;
}

const RAFInfo& RAFInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

RAFInfo* RAFInfo::default_instance_ = NULL;

RAFInfo* RAFInfo::New() const {
  return new RAFInfo;
}

void RAFInfo::Swap(RAFInfo* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata RAFInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RAFInfo_descriptor_;
  metadata.reflection = RAFInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameSessionInfo::kStartTimeFieldNumber;
const int GameSessionInfo::kLocationFieldNumber;
const int GameSessionInfo::kHasBenefactorFieldNumber;
const int GameSessionInfo::kIsUsingIgrFieldNumber;
const int GameSessionInfo::kParentalControlsActiveFieldNumber;
const int GameSessionInfo::kStartTimeSecFieldNumber;
#endif  // !_MSC_VER

GameSessionInfo::GameSessionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameSessionInfo)
}

void GameSessionInfo::InitAsDefaultInstance() {
  location_ = const_cast< ::Battlenet::account::GameSessionLocation*>(&::Battlenet::account::GameSessionLocation::default_instance());
}

GameSessionInfo::GameSessionInfo(const GameSessionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameSessionInfo)
}

void GameSessionInfo::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = 0u;
  location_ = NULL;
  has_benefactor_ = false;
  is_using_igr_ = false;
  parental_controls_active_ = false;
  start_time_sec_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSessionInfo::~GameSessionInfo() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameSessionInfo)
  SharedDtor();
}

void GameSessionInfo::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void GameSessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSessionInfo_descriptor_;
}

const GameSessionInfo& GameSessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameSessionInfo* GameSessionInfo::default_instance_ = NULL;

GameSessionInfo* GameSessionInfo::New() const {
  return new GameSessionInfo;
}

void GameSessionInfo::Swap(GameSessionInfo* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameSessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSessionInfo_descriptor_;
  metadata.reflection = GameSessionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameSessionUpdateInfo::kCaisFieldNumber;
#endif  // !_MSC_VER

GameSessionUpdateInfo::GameSessionUpdateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameSessionUpdateInfo)
}

void GameSessionUpdateInfo::InitAsDefaultInstance() {
  cais_ = const_cast< ::Battlenet::account::CAIS*>(&::Battlenet::account::CAIS::default_instance());
}

GameSessionUpdateInfo::GameSessionUpdateInfo(const GameSessionUpdateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameSessionUpdateInfo)
}

void GameSessionUpdateInfo::SharedCtor() {
  _cached_size_ = 0;
  cais_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSessionUpdateInfo::~GameSessionUpdateInfo() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameSessionUpdateInfo)
  SharedDtor();
}

void GameSessionUpdateInfo::SharedDtor() {
  if (this != default_instance_) {
    delete cais_;
  }
}

void GameSessionUpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSessionUpdateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSessionUpdateInfo_descriptor_;
}

const GameSessionUpdateInfo& GameSessionUpdateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameSessionUpdateInfo* GameSessionUpdateInfo::default_instance_ = NULL;

GameSessionUpdateInfo* GameSessionUpdateInfo::New() const {
  return new GameSessionUpdateInfo;
}

void GameSessionUpdateInfo::Swap(GameSessionUpdateInfo* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameSessionUpdateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSessionUpdateInfo_descriptor_;
  metadata.reflection = GameSessionUpdateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameSessionLocation::kIpAddressFieldNumber;
const int GameSessionLocation::kCountryFieldNumber;
const int GameSessionLocation::kCityFieldNumber;
#endif  // !_MSC_VER

GameSessionLocation::GameSessionLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameSessionLocation)
}

void GameSessionLocation::InitAsDefaultInstance() {
}

GameSessionLocation::GameSessionLocation(const GameSessionLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameSessionLocation)
}

void GameSessionLocation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_ = 0u;
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSessionLocation::~GameSessionLocation() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameSessionLocation)
  SharedDtor();
}

void GameSessionLocation::SharedDtor() {
  if (ip_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_address_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

void GameSessionLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSessionLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSessionLocation_descriptor_;
}

const GameSessionLocation& GameSessionLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameSessionLocation* GameSessionLocation::default_instance_ = NULL;

GameSessionLocation* GameSessionLocation::New() const {
  return new GameSessionLocation;
}

void GameSessionLocation::Swap(GameSessionLocation* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameSessionLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSessionLocation_descriptor_;
  metadata.reflection = GameSessionLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAIS::kPlayedMinutesFieldNumber;
const int CAIS::kRestedMinutesFieldNumber;
const int CAIS::kLastHeardTimeFieldNumber;
#endif  // !_MSC_VER

CAIS::CAIS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.CAIS)
}

void CAIS::InitAsDefaultInstance() {
}

CAIS::CAIS(const CAIS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.CAIS)
}

void CAIS::SharedCtor() {
  _cached_size_ = 0;
  played_minutes_ = 0u;
  rested_minutes_ = 0u;
  last_heard_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAIS::~CAIS() {
  // @@protoc_insertion_point(destructor:Battlenet.account.CAIS)
  SharedDtor();
}

void CAIS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CAIS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAIS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAIS_descriptor_;
}

const CAIS& CAIS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

CAIS* CAIS::default_instance_ = NULL;

CAIS* CAIS::New() const {
  return new CAIS;
}

void CAIS::Swap(CAIS* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata CAIS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAIS_descriptor_;
  metadata.reflection = CAIS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAccountList::kRegionFieldNumber;
const int GameAccountList::kHandleFieldNumber;
#endif  // !_MSC_VER

GameAccountList::GameAccountList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameAccountList)
}

void GameAccountList::InitAsDefaultInstance() {
}

GameAccountList::GameAccountList(const GameAccountList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameAccountList)
}

void GameAccountList::SharedCtor() {
  _cached_size_ = 0;
  region_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAccountList::~GameAccountList() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameAccountList)
  SharedDtor();
}

void GameAccountList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameAccountList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAccountList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAccountList_descriptor_;
}

const GameAccountList& GameAccountList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameAccountList* GameAccountList::default_instance_ = NULL;

GameAccountList* GameAccountList::New() const {
  return new GameAccountList;
}

void GameAccountList::Swap(GameAccountList* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameAccountList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAccountList_descriptor_;
  metadata.reflection = GameAccountList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountState::kAccountLevelInfoFieldNumber;
const int AccountState::kPrivacyInfoFieldNumber;
const int AccountState::kParentalControlInfoFieldNumber;
const int AccountState::kGameLevelInfoFieldNumber;
const int AccountState::kGameStatusFieldNumber;
const int AccountState::kGameAccountsFieldNumber;
#endif  // !_MSC_VER

AccountState::AccountState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountState)
}

void AccountState::InitAsDefaultInstance() {
  account_level_info_ = const_cast< ::Battlenet::account::AccountLevelInfo*>(&::Battlenet::account::AccountLevelInfo::default_instance());
  privacy_info_ = const_cast< ::Battlenet::account::PrivacyInfo*>(&::Battlenet::account::PrivacyInfo::default_instance());
  parental_control_info_ = const_cast< ::Battlenet::account::ParentalControlInfo*>(&::Battlenet::account::ParentalControlInfo::default_instance());
}

AccountState::AccountState(const AccountState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountState)
}

void AccountState::SharedCtor() {
  _cached_size_ = 0;
  account_level_info_ = NULL;
  privacy_info_ = NULL;
  parental_control_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountState::~AccountState() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountState)
  SharedDtor();
}

void AccountState::SharedDtor() {
  if (this != default_instance_) {
    delete account_level_info_;
    delete privacy_info_;
    delete parental_control_info_;
  }
}

void AccountState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountState_descriptor_;
}

const AccountState& AccountState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

AccountState* AccountState::default_instance_ = NULL;

AccountState* AccountState::New() const {
  return new AccountState;
}

void AccountState::Swap(AccountState* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AccountState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountState_descriptor_;
  metadata.reflection = AccountState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountStateTagged::kAccountStateFieldNumber;
const int AccountStateTagged::kAccountTagsFieldNumber;
#endif  // !_MSC_VER

AccountStateTagged::AccountStateTagged()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AccountStateTagged)
}

void AccountStateTagged::InitAsDefaultInstance() {
  account_state_ = const_cast< ::Battlenet::account::AccountState*>(&::Battlenet::account::AccountState::default_instance());
  account_tags_ = const_cast< ::Battlenet::account::AccountFieldTags*>(&::Battlenet::account::AccountFieldTags::default_instance());
}

AccountStateTagged::AccountStateTagged(const AccountStateTagged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AccountStateTagged)
}

void AccountStateTagged::SharedCtor() {
  _cached_size_ = 0;
  account_state_ = NULL;
  account_tags_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountStateTagged::~AccountStateTagged() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AccountStateTagged)
  SharedDtor();
}

void AccountStateTagged::SharedDtor() {
  if (this != default_instance_) {
    delete account_state_;
    delete account_tags_;
  }
}

void AccountStateTagged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountStateTagged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountStateTagged_descriptor_;
}

const AccountStateTagged& AccountStateTagged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

AccountStateTagged* AccountStateTagged::default_instance_ = NULL;

AccountStateTagged* AccountStateTagged::New() const {
  return new AccountStateTagged;
}

void AccountStateTagged::Swap(AccountStateTagged* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AccountStateTagged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountStateTagged_descriptor_;
  metadata.reflection = AccountStateTagged_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAccountState::kGameLevelInfoFieldNumber;
const int GameAccountState::kGameTimeInfoFieldNumber;
const int GameAccountState::kGameStatusFieldNumber;
const int GameAccountState::kRafInfoFieldNumber;
#endif  // !_MSC_VER

GameAccountState::GameAccountState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameAccountState)
}

void GameAccountState::InitAsDefaultInstance() {
  game_level_info_ = const_cast< ::Battlenet::account::GameLevelInfo*>(&::Battlenet::account::GameLevelInfo::default_instance());
  game_time_info_ = const_cast< ::Battlenet::account::GameTimeInfo*>(&::Battlenet::account::GameTimeInfo::default_instance());
  game_status_ = const_cast< ::Battlenet::account::GameStatus*>(&::Battlenet::account::GameStatus::default_instance());
  raf_info_ = const_cast< ::Battlenet::account::RAFInfo*>(&::Battlenet::account::RAFInfo::default_instance());
}

GameAccountState::GameAccountState(const GameAccountState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameAccountState)
}

void GameAccountState::SharedCtor() {
  _cached_size_ = 0;
  game_level_info_ = NULL;
  game_time_info_ = NULL;
  game_status_ = NULL;
  raf_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAccountState::~GameAccountState() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameAccountState)
  SharedDtor();
}

void GameAccountState::SharedDtor() {
  if (this != default_instance_) {
    delete game_level_info_;
    delete game_time_info_;
    delete game_status_;
    delete raf_info_;
  }
}

void GameAccountState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAccountState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAccountState_descriptor_;
}

const GameAccountState& GameAccountState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameAccountState* GameAccountState::default_instance_ = NULL;

GameAccountState* GameAccountState::New() const {
  return new GameAccountState;
}

void GameAccountState::Swap(GameAccountState* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameAccountState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAccountState_descriptor_;
  metadata.reflection = GameAccountState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAccountStateTagged::kGameAccountStateFieldNumber;
const int GameAccountStateTagged::kGameAccountTagsFieldNumber;
#endif  // !_MSC_VER

GameAccountStateTagged::GameAccountStateTagged()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.GameAccountStateTagged)
}

void GameAccountStateTagged::InitAsDefaultInstance() {
  game_account_state_ = const_cast< ::Battlenet::account::GameAccountState*>(&::Battlenet::account::GameAccountState::default_instance());
  game_account_tags_ = const_cast< ::Battlenet::account::GameAccountFieldTags*>(&::Battlenet::account::GameAccountFieldTags::default_instance());
}

GameAccountStateTagged::GameAccountStateTagged(const GameAccountStateTagged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.GameAccountStateTagged)
}

void GameAccountStateTagged::SharedCtor() {
  _cached_size_ = 0;
  game_account_state_ = NULL;
  game_account_tags_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAccountStateTagged::~GameAccountStateTagged() {
  // @@protoc_insertion_point(destructor:Battlenet.account.GameAccountStateTagged)
  SharedDtor();
}

void GameAccountStateTagged::SharedDtor() {
  if (this != default_instance_) {
    delete game_account_state_;
    delete game_account_tags_;
  }
}

void GameAccountStateTagged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAccountStateTagged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAccountStateTagged_descriptor_;
}

const GameAccountStateTagged& GameAccountStateTagged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

GameAccountStateTagged* GameAccountStateTagged::default_instance_ = NULL;

GameAccountStateTagged* GameAccountStateTagged::New() const {
  return new GameAccountStateTagged;
}

void GameAccountStateTagged::Swap(GameAccountStateTagged* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GameAccountStateTagged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAccountStateTagged_descriptor_;
  metadata.reflection = GameAccountStateTagged_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthorizedData::kDataFieldNumber;
const int AuthorizedData::kLicenseFieldNumber;
#endif  // !_MSC_VER

AuthorizedData::AuthorizedData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Battlenet.account.AuthorizedData)
}

void AuthorizedData::InitAsDefaultInstance() {
}

AuthorizedData::AuthorizedData(const AuthorizedData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Battlenet.account.AuthorizedData)
}

void AuthorizedData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthorizedData::~AuthorizedData() {
  // @@protoc_insertion_point(destructor:Battlenet.account.AuthorizedData)
  SharedDtor();
}

void AuthorizedData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void AuthorizedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthorizedData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthorizedData_descriptor_;
}

const AuthorizedData& AuthorizedData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_5ftypes_2eproto();
  return *default_instance_;
}

AuthorizedData* AuthorizedData::default_instance_ = NULL;

AuthorizedData* AuthorizedData::New() const {
  return new AuthorizedData;
}

void AuthorizedData::Swap(AuthorizedData* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AuthorizedData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthorizedData_descriptor_;
  metadata.reflection = AuthorizedData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace account
}  // namespace Battlenet

// @@protoc_insertion_point(global_scope)
